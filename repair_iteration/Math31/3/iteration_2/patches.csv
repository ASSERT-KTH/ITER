bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2,  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
2	[BUG]  [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1,  n  =  0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1,  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
3	[BUG]  [BUGGY]  cN  =  cN  /  q2;  n  =  1;  cN  =  cN  /  q2,  n  =  1;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  1;  cN  =  cN  /  q2,  n  =  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q2;  n  =  1;  cN  =  cN  /  q2,  n  =  1;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
5	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
7	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
9	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
10	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN);	  	non-compiled	[CE]  ';'  expected	107	None	add
11	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  dPrev,  p0);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	2	None	replace
12	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  dPrev,  epsilon);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	2	None	replace
13	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(dPrev,  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(dPrev,  cN);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
14	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  p0);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
15	[BUG]  [BUGGY]  n  =  Math.min(cN,  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  deltaN);	  n    =    Math.min(dPrev,    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
16	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  *  dPrev;	  cN    =    cN    *    q2;    timeout    	compilable	timeout	66	1	replace
17	[BUG]  [BUGGY]  cN  =  cN  *  dPrev;  timeout  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  dPrev;	  cN    =    cN    *    q2;    timeout    	compilable	timeout	66	1	replace
18	[BUG]  [BUGGY]  timeout  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  *  q1;	  cN    =    cN    *    q2;    timeout    	compilable	timeout	66	1	replace
19	[BUG]  [BUGGY]  cN  =  cN  *  q1;  timeout  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  q1;	  cN    =    cN    *    q2;    timeout    	compilable	timeout	66	1	replace
20	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	166	None	replace
21	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	166	None	replace
22	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	n  =  1;	  n    =    0;    	compilable	timeout	33	1	replace
23	[BUG]  [BUGGY]  n  =  1;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  1;	  n    =    0;    	compilable	timeout	33	1	replace
24	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	n  =  2;	  n    =    0;    	compilable	  [FE]  ConvergenceException  	33	10	replace
25	[BUG]  [BUGGY]  n  =  2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  2;	  n    =    0;    	compilable	  [FE]  ConvergenceException  	33	10	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
27	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
29	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
30	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);	  	non-compiled	[CE]  ';'  expected	110	None	add
31	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN);  cPrev  =  q2  /  cN;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN);  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN);  cPrev  =  q2  /  cN;	  	non-compiled	[CE]  ';'  expected	110	None	add
32	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  dPrev);	  n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
33	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  cN);	  n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
34	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(dPrev  -  1.0)/  epsilon;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	  [FE]  ConvergenceException  	58	12	replace
35	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  epsilon;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(dPrev  -  1.0)/  epsilon;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	  [FE]  ConvergenceException  	58	12	replace
36	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(dPrev  -  1.0)/  dPrev;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	  [FE]  ConvergenceException  	58	12	replace
37	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(dPrev  -  1.0)/  dPrev;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	  [FE]  ConvergenceException  	58	12	replace
38	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	55	12	add
39	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	55	12	add
40	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  int  cN  =  Math.abs(dPrev  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  int  cN  =  Math.abs(dPrev  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    int  cN  =  Math.abs(dPrev  -  1.0)/  q2;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	55	None	add
41	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	55	12	add
42	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	55	12	add
43	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q2);	  	non-compiled	[CE]  ';'  expected	55	None	add
44	[BUG]  [BUGGY]  int  cPrev  =  dPrev  *  q2;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    int    cPrev    =    dPrev    *    q2;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	replace
45	[BUG]  [BUGGY]  int  cPrev  =  dPrev  *  q1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  dPrev  *  q1;	  cPrev    =    dPrev    *    q2;    int    cPrev    =    dPrev    *    q2;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	replace
46	[BUG]  [BUGGY]  int  cPrev  =  dPrev  *  hN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  dPrev  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  dPrev  *  hN;	  cPrev    =    dPrev    *    q2;    int    cPrev    =    dPrev    *    q2;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	replace
47	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	152	None	replace
48	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN  +  1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  deltaN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	152	None	replace
49	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	152	None	replace
50	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	101	12	replace
51	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	101	12	replace
52	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  *  q1;	  cPrev    =    dPrev    *    q1;    	compilable	  [FE]  ConvergenceException  	90	11	replace
53	[BUG]  [BUGGY]  cPrev  =  p0  *  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  q1;	  cPrev    =    dPrev    *    q1;    	compilable	  [FE]  ConvergenceException  	90	11	replace
54	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  *  q1;	  cPrev    =    dPrev    *    q1;    	compilable	  [FE]  ConvergenceException  	90	11	replace
55	[BUG]  [BUGGY]  cPrev  =  hN  *  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q1;	  cPrev    =    dPrev    *    q1;    	compilable	  [FE]  ConvergenceException  	90	11	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q2    /    hN;    cPrev  =  q2  /  hN;	  	compilable	  [FE]  AssertionError  	5	2	add
57	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2  /  hN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    hN;    cPrev  =  q2  /  hN;	  	compilable	  [FE]  AssertionError  	5	2	add
58	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2  /  hN);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2  /  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    hN;    cPrev  =  q2  /  hN);	  	non-compiled	[CE]  ';'  expected	5	None	add
59	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  int  cPrev  =  q2  /  hN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  int  cPrev  =  q2  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    hN;    int  cPrev  =  q2  /  hN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
60	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2)  /  hN;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  q2)  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    hN;    cPrev  =  q2)  /  hN;	  	non-compiled	[CE]  ';'  expected	5	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    q2    /    cN;    cN  =  q2  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	150	2	add
62	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	150	2	add
63	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  }  cN  =  q2  /  cN;  [CE]  illegal  start  of  type  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  }  cN  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN;  }  cN  =  q2  /  cN;	  timeout    	non-compiled	[CE]  illegal  start  of  type	150	None	add
64	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  epsilon;  [CE]  cannot  find  symbol  dPrev  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN;  this.dPrev  =  cN  /  epsilon;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dPrev	150	None	add
65	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  p0;  [CE]  cannot  find  symbol  dPrev  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN;  this.dPrev  =  cN  /  p0;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dPrev	150	None	add
66	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  hN;  [CE]  cannot  find  symbol  dPrev  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN;  this.dPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN;  this.dPrev  =  cN  /  hN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dPrev	150	None	add
67	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  *  dPrev;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	11	replace
68	[BUG]  [BUGGY]  cPrev  =  p0  *  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  dPrev;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	11	replace
69	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  p0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  p0;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	11	replace
70	[BUG]  [BUGGY]  cPrev  =  q1  *  p0;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  p0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  p0;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	11	replace
71	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  p0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  p0;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	12	replace
72	[BUG]  [BUGGY]  cPrev  =  q2  *  p0;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  p0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  p0;	  cPrev    =    p0    *    q2;    	compilable	  [FE]  ConvergenceException  	88	12	replace
73	[BUG]  [BUGGY]  n  =  Math.max(cN,  deltaN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  deltaN);	  n    =    Math.max(dPrev,    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
74	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	n    =    0;    n  =  0;	  	compilable	  [FE]  ConvergenceException  	32	12	add
75	[BUG]  [BUGGY]  n  =  0;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    n  =  0;	  	compilable	  [FE]  ConvergenceException  	32	12	add
76	[BUG]  [BUGGY]  n  =  0;  int  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  int  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    int  n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	32	None	add
77	[BUG]  [BUGGY]  n  =  0;  (n  =  0);  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  (n  =  0);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    (n  =  0);	  	non-compiled	[CE]  not  a  statement	32	None	add
78	[BUG]  [BUGGY]  n  =  0;  (n  =  0;  [CE]  ')'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  (n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    (n  =  0;	  	non-compiled	[CE]  ')'  expected	32	None	add
79	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  /  dPrev;	  cPrev    =    q2    /    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	92	5	replace
80	[BUG]  [BUGGY]  cPrev  =  p0  /  dPrev;  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  dPrev;	  cPrev    =    q2    /    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	92	5	replace
81	[BUG]  [BUGGY]  cPrev  =  p1  /  dPrev;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p1  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p1  /  dPrev;	  cPrev    =    q2    /    dPrev;    timeout    	non-compiled	[CE]  cannot  find  symbol  p1	92	None	replace
82	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cN;	  n    =    Math.abs(cN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
83	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(cN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
84	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cPrev  -  1.0)/  dPrev;	  n    =    Math.abs(cN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	75	None	replace
85	[BUG]  [BUGGY]  cN  =  cN  /  q0;  [CE]  cannot  find  symbol  q0  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q0;	          cN    =    cN    /    q2;    cN    =    cN    /    q2.;    	non-compiled	[CE]  cannot  find  symbol  q0	127	None	replace
86	[BUG]  [BUGGY]  cPrev  =  p1  /  cN;  [CE]  cannot  find  symbol  p1  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p1  /  cN;	  cPrev    =    p0    /    cN;    timeout    	non-compiled	[CE]  cannot  find  symbol  p1	21	None	replace
87	[BUG]  [BUGGY]  n  =  cN  /  q2;  n  =  0;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
88	[BUG]  [BUGGY]  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  0;  CN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  CN	51	None	replace
89	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	118	12	replace
90	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	118	12	replace
91	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
92	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q1;  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
93	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	118	5	replace
94	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q1;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	118	5	replace
95	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p1  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	non-compiled	[CE]  cannot  find  symbol  p1	118	None	replace
96	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  dPrev,  epsilon);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	9	None	replace
97	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  p0);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  dPrev,  p0);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  dPrev,  p0);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	9	None	replace
98	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  *  deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  *  deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
99	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  dPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  /  dPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  /  dPrev  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
100	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  /  deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  /  deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    p0    *    q2;    cPrev  =  p0  *  q2;	  	compilable	  [FE]  AssertionError  	87	2	add
102	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    cPrev  =  p0  *  q2;	  	compilable	  [FE]  AssertionError  	87	2	add
103	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    cPrev  =  p0  *  q2);	  	non-compiled	[CE]  ';'  expected	87	None	add
104	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  int  cPrev  =  p0  *  q2;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  int  cPrev  =  p0  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    int  cPrev  =  p0  *  q2;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
105	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    cPrev  =  p0  *  q2,;	  	non-compiled	[CE]  ';'  expected	87	None	add
106	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  q2)/  cN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  q2)/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  cN;  cPrev  =  q2)/  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	non-compiled	[CE]  ';'  expected	159	None	replace
107	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	compilable	timeout	159	1	replace
108	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN;  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	compilable	timeout	159	1	replace
109	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    /    cN;    cPrev  =  p0  /  cN);	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
110	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  int  cPrev  =  p0  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  int  cPrev  =  p0  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    /    cN;    int  cPrev  =  p0  /  cN;	  timeout    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	20	None	add
111	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cS;  [CE]  cannot  find  symbol  cS  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  /  cS;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    /    cN;    cPrev  =  p0  /  cS;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cS	20	None	add
112	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	compilable	  [FE]  ConvergenceException  	177	12	replace
113	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	compilable	  [FE]  ConvergenceException  	177	12	replace
114	[BUG]  [BUGGY]  cPrev  =  hN  /  q1,  q2;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1,  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
115	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2;    	non-compiled	[CE]  cannot  find  symbol  p1	114	None	replace
116	[BUG]  [BUGGY]  n  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev.doubleValue();	  n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	155	None	replace
117	[BUG]  [BUGGY]  n  =  p0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  p0.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  p0.doubleValue();	  n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	155	None	replace
118	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	compilable	  [FE]  ConvergenceException  	128	11	replace
119	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	compilable	  [FE]  ConvergenceException  	128	11	replace
120	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(dPrev,  cN  +  1);	  n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
121	[BUG]  [BUGGY]  n  =  cN;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN;	  n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
122	[BUG]  [BUGGY]  n  =  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  +  1;	  n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
123	[BUG]  [BUGGY]  n  =  epsilon;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  epsilon;	  n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
124	[BUG]  [BUGGY]  n  =  dPrev  -  1;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  -  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  -  1;	  n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
125	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    *    q2;    n    =    0;    cN  =  cN  *  q2;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	36	12	add
126	[BUG]  [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    n    =    0;    cN  =  cN  *  q2;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	36	12	add
127	[BUG]  [BUGGY]  cN  =  cN  *  q2;  n  =  0;  int  cN  =  cN  *  q2;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  int  cN  =  cN  *  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    n    =    0;    int  cN  =  cN  *  q2;  n  =  0;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
128	[BUG]  [BUGGY]  cN  =  cN  *  q2;  n  =  0;  CN  =  cN  *  q2;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  CN  =  cN  *  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    n    =    0;    CN  =  cN  *  q2;  n  =  0;	  timeout    	non-compiled	[CE]  cannot  find  symbol  CN	36	None	add
129	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(q2    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	126	None	replace
130	[BUG]  [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(p0  *  dPrev);	  n    =    Math.abs(q2    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	126	None	replace
131	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  deltaN  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  deltaN  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  deltaN  +  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
132	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  dPrev  *  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  dPrev  *  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  dPrev  *  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
133	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  dPrev  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  dPrev  +  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
134	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cPrev  -  1.0)/  epsilon;	  n    =    Math.abs(cN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	185	None	replace
135	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  dPrev  +  1;	  cPrev    =    q2    *    dPrev;    	compilable	timeout	84	1	replace
136	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev  +  1;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev  +  1;	  cPrev    =    q2    *    dPrev;    	compilable	timeout	84	1	replace
137	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  2;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  2;	          n    =    Math.abs(deltaN    -    1.0)/    2;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
138	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  2  +  1;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  2  +  1;	          n    =    Math.abs(deltaN    -    1.0)/    2;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
139	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  2;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  1.0)/  2;	          n    =    Math.abs(deltaN    -    1.0)/    2;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
140	[BUG]  [BUGGY]  int  cPrev  =  q2  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  q2  /  cN;	  cPrev    =    q2    /    cN;    int    cPrev    =    q2    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
141	[BUG]  [BUGGY]  int  cPrev  =  hN  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  hN  /  cN;	  cPrev    =    q2    /    cN;    int    cPrev    =    q2    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
142	[BUG]  [BUGGY]  int  cPrev  =  dPrev  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  dPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  dPrev  /  cN;	  cPrev    =    q2    /    cN;    int    cPrev    =    q2    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
143	[BUG]  [BUGGY]  int  cPrev  =  q1  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  q1  /  cN;	  cPrev    =    q2    /    cN;    int    cPrev    =    q2    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	153	2	add
145	[BUG]  [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cN;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	153	2	add
146	[BUG]  [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  /  cN);	  timeout    	non-compiled	[CE]  ';'  expected	153	None	add
147	[BUG]  [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cS;  [CE]  cannot  find  symbol  cS  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  /  cS;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  /  cS;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cS	153	None	add
148	[BUG]  [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hprev  /  cN;  [CE]  cannot  find  symbol  hprev  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hprev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hPrev    /    cN;    cPrev  =  hprev  /  cN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  hprev	153	None	add
149	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
150	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
151	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	171	6	add
153	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	171	6	add
154	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  int  cN  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  int  cN  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    int  cN  =  Math.abs(epsilon  -  1.0)/  q2;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	171	None	add
155	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q2);	  	non-compiled	[CE]  ';'  expected	171	None	add
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q1;	  	compilable	  [FE]  AssertionError  	171	6	add
157	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q1;  [FE]  AssertionError  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q1;	  	compilable	  [FE]  AssertionError  	171	6	add
158	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	timeout	64	1	replace
159	[BUG]  [BUGGY]  cN  =  dPrev  /  deltaN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	timeout	64	1	replace
160	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  p0  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	  [FE]  ConvergenceException  	64	9	replace
161	[BUG]  [BUGGY]  cN  =  p0  /  deltaN;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p0  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	  [FE]  ConvergenceException  	64	9	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
163	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	38	2	add
165	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	38	2	add
166	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2);	  	non-compiled	[CE]  ';'  expected	38	None	add
167	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,  cPrev  =  hN  /  q2;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2,  cPrev  =  hN  /  q2;	  	non-compiled	[CE]  ';'  expected	38	None	add
168	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,	  	non-compiled	[CE]  ';'  expected	38	None	add
169	[BUG]  [BUGGY]  cPrev  =  hN  /  q1,  q0;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1,  q0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1,  q0;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q0;    	non-compiled	[CE]  ';'  expected	178	None	replace
170	[BUG]  [BUGGY]  n  =  n  /  q2;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  n  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  n  /  q2;	  cN    =    n    /    q2;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
171	[BUG]  [BUGGY]  cN  =  n  /  q1;  n  =  dPrev;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  n  /  q1;  n  =  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  n  /  q1;  n  =  dPrev;	  cN    =    n    /    q2;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
172	[BUG]  [BUGGY]  cN  =  n  /  q2;  n  =  hN;  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  n  /  q2;  n  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  n  /  q2;  n  =  hN;	  cN    =    n    /    q2;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
173	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
174	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
175	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
176	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
177	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
178	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
179	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    dPrev;    n    =    0;    cN  =  cN  /  dPrev;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	34	12	add
180	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    n    =    0;    cN  =  cN  /  dPrev;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	34	12	add
181	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  int  cN  =  cN  /  dPrev;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  int  cN  =  cN  /  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    n    =    0;    int  cN  =  cN  /  dPrev;  n  =  0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
182	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  CN  =  cN  /  dPrev;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  CN  =  cN  /  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    n    =    0;    CN  =  cN  /  dPrev;  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol  CN	34	None	add
183	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  hN;	  cPrev    =    q1    /    hN;    	compilable	  [FE]  ConvergenceException  	8	12	replace
184	[BUG]  [BUGGY]  cPrev  =  dPrev  /  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  hN;	  cPrev    =    q1    /    hN;    	compilable	  [FE]  ConvergenceException  	8	12	replace
185	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  hN;	  cPrev    =    q1    /    hN;    	compilable	  [FE]  ConvergenceException  	8	11	replace
186	[BUG]  [BUGGY]  cPrev  =  dPrev  *  hN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  hN;	  cPrev    =    q1    /    hN;    	compilable	  [FE]  ConvergenceException  	8	11	replace
187	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2;    n    =    0;    	compilable	  [FE]  ConvergenceException  	49	12	replace
188	[BUG]  [BUGGY]  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2;    n    =    0;    	compilable	  [FE]  ConvergenceException  	49	12	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN;	  	compilable	  [FE]  AssertionError  	189	2	add
190	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN;	  	compilable	  [FE]  AssertionError  	189	2	add
191	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  }  cPrev  =  hN  /  cN;  [CE]  illegal  start  of  type  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  }  cPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN;  }  cPrev  =  hN  /  cN;	  	non-compiled	[CE]  illegal  start  of  type	189	None	add
192	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN);	  	non-compiled	[CE]  ';'  expected	189	None	add
193	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  System.arraycopy(cPrev,  0,  cPrev,  0,  dPrev);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  System.arraycopy(cPrev,  0,  cPrev,  0,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN;  System.arraycopy(cPrev,  0,  cPrev,  0,  dPrev);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	189	None	add
194	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  System.arraycopy(dPrev,  0,  cPrev,  0,  dPrev);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  hN  /  cN;  System.arraycopy(dPrev,  0,  cPrev,  0,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    cPrev  =  hN  /  cN;  System.arraycopy(dPrev,  0,  cPrev,  0,  dPrev);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	189	None	add
195	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  dPrev;	  cPrev    =    dPrev    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	19	6	replace
196	[BUG]  [BUGGY]  cPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  dPrev;	  cPrev    =    dPrev    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	19	6	replace
197	[BUG]  [BUGGY]  n  =  dPrev  /  q1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  /  q1;	  n    =    dPrev    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
198	[BUG]  [BUGGY]  n  =  dPrev  /  deltaN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  /  deltaN;	  n    =    dPrev    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
199	[BUG]  [BUGGY]  n  =  dPrev  /  q2  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  /  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  /  q2  +  1;	  n    =    dPrev    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
200	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  q1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  *  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  *  q1);	  n    =    Math.abs(dPrev    *    q1);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
201	[BUG]  [BUGGY]  n  =  dPrev  /  cN;  [CE]  possible  loss  of  precision  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  /  cN;	  cN    =    cN    /    dPrev;    n    =    0;    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    *    cN;    cPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	22	2	add
203	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    cN;    cPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	22	2	add
204	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dPrev  *  cN);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dPrev  *  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    cN;    cPrev  =  dPrev  *  cN);	  	non-compiled	[CE]  ';'  expected	22	None	add
205	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dprev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  dprev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    cN;    cPrev  =  dprev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	22	None	add
206	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    *    q2;    cN  =  cN  *  q2;	  timeout    	compilable	  [FE]  ConvergenceException  	65	11	add
207	[BUG]  [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    cN  =  cN  *  q2;	  timeout    	compilable	  [FE]  ConvergenceException  	65	11	add
208	[BUG]  [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2);  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    cN  =  cN  *  q2);	  timeout    	non-compiled	[CE]  ';'  expected	65	None	add
209	[BUG]  [BUGGY]  cN  =  cN  *  q2;  CN  =  cN  *  q2;  [CE]  cannot  find  symbol  CN  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  CN  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    CN  =  cN  *  q2;	  timeout    	non-compiled	[CE]  cannot  find  symbol  CN	65	None	add
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
211	[BUG]  [BUGGY]  cN  =  dPrev  /  q1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  *  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
213	[BUG]  [BUGGY]  cN  =  dPrev  *  q1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  *  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
214	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  cN;	  cN    =    cN    /    dPrev;    	compilable	timeout	60	1	replace
215	[BUG]  [BUGGY]  cN  =  dPrev  /  cN;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  cN;	  cN    =    cN    /    dPrev;    	compilable	timeout	60	1	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  p0  /  dPrev;	  cN    =    cN    /    dPrev;    	compilable	  [FE]  AssertionError  	60	6	replace
217	[BUG]  [BUGGY]  cN  =  p0  /  dPrev;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p0  /  dPrev;	  cN    =    cN    /    dPrev;    	compilable	  [FE]  AssertionError  	60	6	replace
218	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  *  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  *  cN;	  cN    =    cN    /    dPrev;    	compilable	timeout	60	1	replace
219	[BUG]  [BUGGY]  cN  =  dPrev  *  cN;  timeout  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  *  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  *  cN;	  cN    =    cN    /    dPrev;    	compilable	timeout	60	1	replace
220	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q2;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
221	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q2;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
222	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
223	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  cN;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  cN;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    *    q2    +    1;    cPrev  =  dPrev  *  q2  +  1;	  timeout    	compilable	  [FE]  AssertionError  	161	2	add
225	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2  +  1;  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q2    +    1;    cPrev  =  dPrev  *  q2  +  1;	  timeout    	compilable	  [FE]  AssertionError  	161	2	add
226	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2)  +  1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2)  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q2    +    1;    cPrev  =  dPrev  *  q2)  +  1;	  timeout    	non-compiled	[CE]  ';'  expected	161	None	add
227	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2,  +  1;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dPrev  *  q2,  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q2    +    1;    cPrev  =  dPrev  *  q2,  +  1;	  timeout    	non-compiled	[CE]  ';'  expected	161	None	add
228	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  dPrev  =  dPrev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    *    q2    +    1;    dPrev  =  dPrev  *  q2  +  1;	  timeout    	compilable	  [FE]  ConvergenceException  	161	11	add
229	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  dPrev  =  dPrev  *  q2  +  1;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  dPrev  =  dPrev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q2    +    1;    dPrev  =  dPrev  *  q2  +  1;	  timeout    	compilable	  [FE]  ConvergenceException  	161	11	add
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q1  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q1    /    hN;    cPrev  =  q1  /  hN;	  	compilable	  [FE]  AssertionError  	7	2	add
231	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q1  /  hN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q1  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    hN;    cPrev  =  q1  /  hN;	  	compilable	  [FE]  AssertionError  	7	2	add
232	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q1  /  hN);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q1  /  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    hN;    cPrev  =  q1  /  hN);	  	non-compiled	[CE]  ';'  expected	7	None	add
233	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  int  cPrev  =  q1  /  hN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  int  cPrev  =  q1  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    hN;    int  cPrev  =  q1  /  hN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
234	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cPrev  -  1.0)/  q2;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
235	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  1.0)/  q1;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
236	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  deltaN  +  1;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
237	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN  +  1;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  deltaN  +  1;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
238	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
239	[BUG]  [BUGGY]  cPrev  =  dPrev  *  deltaN;  timeout  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
240	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN  *  2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  deltaN  *  2;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
241	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN  *  2;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN  *  2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  deltaN  *  2;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
242	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
243	[BUG]  [BUGGY]  cPrev  =  cN  /  deltaN;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
244	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  /  hN;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	146	12	add
245	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  hN;  n  =  0;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  /  hN;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	146	12	add
246	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  int  cN  =  cN  /  hN;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  int  cN  =  cN  /  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    int  cN  =  cN  /  hN;  n  =  0;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	146	None	add
247	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  CN  =  cN  /  hN;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  CN  =  cN  /  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    CN  =  cN  /  hN;  n  =  0;	  timeout    	non-compiled	[CE]  cannot  find  symbol  CN	146	None	add
248	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  hN);  n  =  0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  hN);  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  /  hN);  n  =  0;	  timeout    	non-compiled	[CE]  ';'  expected	146	None	add
249	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
250	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
251	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  hN;	  cPrev    =    hN    /    cN;    	compilable	  [FE]  ConvergenceException  	190	12	replace
252	[BUG]  [BUGGY]  cPrev  =  cN  /  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  hN;	  cPrev    =    hN    /    cN;    	compilable	  [FE]  ConvergenceException  	190	12	replace
253	[BUG]  [BUGGY]  cPrev  =  cN  hN  /  hN;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  hN  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  hN  /  hN;	  cPrev    =    hN    /    cN;    	non-compiled	[CE]  ';'  expected	190	None	replace
254	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  cN;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev2;    	non-compiled	[CE]  possible  loss  of  precision	134	None	replace
255	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	156	11	add
256	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	156	11	add
257	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	156	11	add
258	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	156	11	add
259	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1);	  	non-compiled	[CE]  ';'  expected	156	None	add
260	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    int  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	156	None	add
261	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  q2);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  /  q2);	  n    =    Math.abs(dPrev    /    q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
262	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  cN);	  n    =    Math.abs(dPrev    /    q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
263	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  q1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  q1);	  n    =    Math.abs(dPrev    /    q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  p0  /  q2;	  cN    =    dPrev    /    q2;    	compilable	  [FE]  AssertionError  	62	6	replace
265	[BUG]  [BUGGY]  cN  =  p0  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p0  /  q2;	  cN    =    dPrev    /    q2;    	compilable	  [FE]  AssertionError  	62	6	replace
266	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2);	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2);    	non-compiled	[CE]  ';'  expected	122	None	replace
267	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(dPrev  -  1.0)/  q1;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
268	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(dPrev  -  1.0)/  q1;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
269	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  dPrev  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
270	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev  +  1;  timeout  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
271	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  q1  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
272	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1  +  1;  timeout  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
273	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  *  q2  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
274	[BUG]  [BUGGY]  cPrev  =  p0  *  q2  +  1;  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  q2  +  1;	  cPrev    =    dPrev    *    q2    +    1;    timeout    	compilable	timeout	162	1	replace
275	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  dPrev,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  dPrev,  q2);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	72	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	117	2	add
277	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	117	2	add
278	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1);	  	non-compiled	[CE]  ';'  expected	117	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	117	2	add
280	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	117	2	add
281	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1,  n);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1,  n);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	117	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dPrev  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    deltaN;    cPrev  =  dPrev  /  deltaN;	  	compilable	  [FE]  AssertionError  	95	2	add
283	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dPrev  /  deltaN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dPrev  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    deltaN;    cPrev  =  dPrev  /  deltaN;	  	compilable	  [FE]  AssertionError  	95	2	add
284	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dPrev  /  deltaN);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dPrev  /  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    deltaN;    cPrev  =  dPrev  /  deltaN);	  	non-compiled	[CE]  ';'  expected	95	None	add
285	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  dPrev  =  dPrev  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    deltaN;    dPrev  =  dPrev  /  deltaN;	  	compilable	  [FE]  OutOfRangeException  	95	7	add
286	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN;  dPrev  =  dPrev  /  deltaN;  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  dPrev  =  dPrev  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    deltaN;    dPrev  =  dPrev  /  deltaN;	  	compilable	  [FE]  OutOfRangeException  	95	7	add
287	[BUG]  [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dprev  /  deltaN;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  deltaN;  cPrev  =  dprev  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    deltaN;    cPrev  =  dprev  /  deltaN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	95	None	add
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  q2  /  dPrev;	  cN    =    q2    /    cN;    timeout    	compilable	  [FE]  AssertionError  	151	6	replace
289	[BUG]  [BUGGY]  cN  =  q2  /  dPrev;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  q2  /  dPrev;	  cN    =    q2    /    cN;    timeout    	compilable	  [FE]  AssertionError  	151	6	replace
290	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  p0  /  cN;	  cN    =    q2    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	151	12	replace
291	[BUG]  [BUGGY]  cN  =  p0  /  cN;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p0  /  cN;	  cN    =    q2    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	151	12	replace
292	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    cN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	compilable	  [FE]  ConvergenceException  	57	12	add
293	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    cN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	compilable	  [FE]  ConvergenceException  	57	12	add
294	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  int  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  int  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    int  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
295	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dPrev  -  1.0)/  deltaN);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dPrev  -  1.0)/  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    cN  =  Math.abs(dPrev  -  1.0)/  deltaN);	  	non-compiled	[CE]  ';'  expected	57	None	add
296	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  dPrev  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    dPrev  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	compilable	  [FE]  ConvergenceException  	57	12	add
297	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  dPrev  =  Math.abs(dPrev  -  1.0)/  deltaN;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  dPrev  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    dPrev  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	compilable	  [FE]  ConvergenceException  	57	12	add
298	[BUG]  [BUGGY]  n  =  q2  /  dPrev;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2  /  dPrev;	  n    =    q2    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	139	None	replace
299	[BUG]  [BUGGY]  n  =  p0  /  cN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  p0  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  p0  /  cN;	  n    =    q2    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	139	None	replace
300	[BUG]  [BUGGY]  n  =  Math.max(cN,  q2);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	136	None	replace
301	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  dPrev,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  dPrev,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	136	None	replace
302	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	53	11	add
303	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	53	11	add
304	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev);	  	non-compiled	[CE]  ';'  expected	53	None	add
305	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	53	None	add
306	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dprev;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dprev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	53	None	add
307	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  /  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
308	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  deltaN);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
309	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    dPrev;    cN  =  cN  /  dPrev;	  	compilable	  [FE]  ConvergenceException  	59	11	add
310	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    cN  =  cN  /  dPrev;	  	compilable	  [FE]  ConvergenceException  	59	11	add
311	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  int  cN  =  cN  /  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  int  cN  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    int  cN  =  cN  /  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	59	None	add
312	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dprev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    cN  =  cN  /  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	59	None	add
313	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dPrev);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  cN  =  cN  /  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    cN  =  cN  /  dPrev);	  	non-compiled	[CE]  ';'  expected	59	None	add
314	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  dPrev  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
315	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev  +  1;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
316	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  dPrev  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
317	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev  +  1;  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  dPrev  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
318	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
319	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
320	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	16	None	add
321	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q3;  [CE]  cannot  find  symbol  q3  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q3;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q3;	  	non-compiled	[CE]  cannot  find  symbol  q3	16	None	add
322	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  n);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  n);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	16	None	add
323	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	non-compiled	[CE]  ';'  expected	106	None	replace
324	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	non-compiled	[CE]  ';'  expected	106	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	113	2	add
326	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	113	2	add
327	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	113	None	add
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	113	2	add
329	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	113	2	add
330	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q2;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q2;	  	non-compiled	[CE]  ';'  expected	113	None	add
331	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,	  	non-compiled	[CE]  ';'  expected	113	None	add
332	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	102	None	replace
333	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	102	None	replace
334	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	102	None	replace
335	[BUG]  [BUGGY]  n  =  cN.abs(dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(dPrev);	  n    =    cN.abs(deltaN);    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
336	[BUG]  [BUGGY]  n  =  cN.abs(dPrev,  deltaN);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(dPrev,  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(dPrev,  deltaN);	  n    =    cN.abs(deltaN);    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
337	[BUG]  [BUGGY]  n  =  dPrev.abs(deltaN);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev.abs(deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev.abs(deltaN);	  n    =    cN.abs(deltaN);    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
338	[BUG]  [BUGGY]  n  =  cN.abs(epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(epsilon);	  n    =    cN.abs(deltaN);    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
339	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(dPrev,  epsilon);	  n    =    Math.min(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
340	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dprev    *    q2;    	compilable	  [FE]  ConvergenceException  	142	12	replace
341	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dprev    *    q2;    	compilable	  [FE]  ConvergenceException  	142	12	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    deltaN;    cN  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	63	10	add
343	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    cN  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	63	10	add
344	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  int  cN  =  cN  /  deltaN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  int  cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    int  cN  =  cN  /  deltaN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
345	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    cN  =  cN  /  deltaN);	  	non-compiled	[CE]  ';'  expected	63	None	add
346	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    deltaN;    cN  =  cN  /  deltaN  +  1;	  	compilable	  [FE]  ConvergenceException  	63	11	add
347	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN  +  1;  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  deltaN  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    cN  =  cN  /  deltaN  +  1;	  	compilable	  [FE]  ConvergenceException  	63	11	add
348	[BUG]  [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(dPrev  -  1.0)/  deltaN;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
349	[BUG]  [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(dPrev  -  1.0)/  epsilon;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
350	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
351	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
352	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN,  q1;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  hN;  cPrev  =  q2  /  hN,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
353	[BUG]  [BUGGY]  cPrev  =  hN  /  q1,  q1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
354	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  epsilon;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  epsilon;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cS;    	compilable	timeout	71	1	replace
355	[BUG]  [BUGGY]  cPrev  =  q2  /  epsilon;  timeout  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  epsilon;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  epsilon;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cS;    	compilable	timeout	71	1	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  /  hN;	          cN    =    cN    /    q2;    cN    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	13	6	replace
357	[BUG]  [BUGGY]  cN  =  cN  /  hN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  hN;	          cN    =    cN    /    q2;    cN    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	13	6	replace
358	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
359	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  deltaN,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  deltaN,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  deltaN,  epsilon);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	28	None	replace
360	[BUG]  [BUGGY]  n  =  hN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  hN.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  hN.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	174	None	replace
361	[BUG]  [BUGGY]  n  =  cN.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.doubleValue()  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.doubleValue()  +  1;	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	174	None	replace
362	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  /  hN;	  cPrev    =    q2    /    hN;    	compilable	  [FE]  ConvergenceException  	6	12	replace
363	[BUG]  [BUGGY]  cPrev  =  p0  /  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  hN;	  cPrev    =    q2    /    hN;    	compilable	  [FE]  ConvergenceException  	6	12	replace
364	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(epsilon,    q2);    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
365	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  q2);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  q2);	  n    =    Math.abs(q2    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	164	None	replace
366	[BUG]  [BUGGY]  n  =  Math.abs(q2  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  /  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  /  dPrev);	  n    =    Math.abs(q2    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	164	None	replace
367	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  *  dPrev;	  cPrev    =    q1    *    dPrev;    	compilable	  [FE]  ConvergenceException  	86	11	replace
368	[BUG]  [BUGGY]  cPrev  =  hN  *  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  dPrev;	  cPrev    =    q1    *    dPrev;    	compilable	  [FE]  ConvergenceException  	86	11	replace
369	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  ConvergenceException  	54	12	replace
370	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  ConvergenceException  	54	12	replace
371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q1;	  timeout    	compilable	  [FE]  AssertionError  	129	2	add
372	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q1;	  timeout    	compilable	  [FE]  AssertionError  	129	2	add
373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;	  timeout    	compilable	  [FE]  AssertionError  	129	2	add
374	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;	  timeout    	compilable	  [FE]  AssertionError  	129	2	add
375	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q1);	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
376	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1,  cN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q1,  cN;	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q2    /    dPrev;    cPrev  =  q2  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	91	2	add
378	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    dPrev;    cPrev  =  q2  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	91	2	add
379	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    dPrev;    cPrev  =  q2  /  dPrev);	  timeout    	non-compiled	[CE]  ';'  expected	91	None	add
380	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dprev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    dPrev;    cPrev  =  q2  /  dprev;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	add
381	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  hN;	  cPrev    =    hN    *    q2;    	compilable	  [FE]  ConvergenceException  	141	11	replace
382	[BUG]  [BUGGY]  cPrev  =  q2  *  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  hN;	  cPrev    =    hN    *    q2;    	compilable	  [FE]  ConvergenceException  	141	11	replace
383	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  hN;	  cPrev    =    hN    *    q2;    	compilable	  [FE]  ConvergenceException  	141	11	replace
384	[BUG]  [BUGGY]  cPrev  =  q1  *  hN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  hN;	  cPrev    =    hN    *    q2;    	compilable	  [FE]  ConvergenceException  	141	11	replace
385	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(epsilon    -    1.0)/    dPrev;    	compilable	timeout	76	1	replace
386	[BUG]  [BUGGY]  dPrev  =  Math.abs(epsilon  -  1.0)/  dPrev;  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(epsilon    -    1.0)/    dPrev;    	compilable	timeout	76	1	replace
387	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	10	add
388	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	10	add
389	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    cPrev  =  Math.abs(deltaN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	10	add
390	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cPrev  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    cPrev  =  Math.abs(deltaN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	10	add
391	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q1;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	11	add
392	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q1;	  timeout    	compilable	  [FE]  OutOfRangeException  	182	11	add
393	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2);	  timeout    	non-compiled	[CE]  ';'  expected	182	None	add
394	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  *  dPrev;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
395	[BUG]  [BUGGY]  cPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  *  dPrev;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
396	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
397	[BUG]  [BUGGY]  cPrev  =  p0  *  cN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
398	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	12	replace
399	[BUG]  [BUGGY]  cPrev  =  hN  *  cN;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	12	replace
400	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  cN  +  1;	  cPrev    =    dPrev    *    cN;    	compilable	timeout	23	1	replace
401	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN  +  1;  timeout  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  cN  +  1;	  cPrev    =    dPrev    *    cN;    	compilable	timeout	23	1	replace
402	[BUG]  [BUGGY]  n  =  dPrev  /  hN;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev  /  hN;	  n    =    cN    /    hN;    	non-compiled	[CE]  possible  loss  of  precision	173	None	replace
403	[BUG]  [BUGGY]  n  =  hN  /  cN;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  hN  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  hN  /  cN;	  n    =    cN    /    hN;    	non-compiled	[CE]  possible  loss  of  precision	173	None	replace
404	[BUG]  [BUGGY]  n  =  p0  /  hN;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  p0  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  p0  /  hN;	  n    =    cN    /    hN;    	non-compiled	[CE]  possible  loss  of  precision	173	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q1    /    dPrev;    cPrev  =  q1  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
406	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dPrev;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    dPrev;    cPrev  =  q1  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
407	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dPrev);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    dPrev;    cPrev  =  q1  /  dPrev);	  timeout    	non-compiled	[CE]  ';'  expected	93	None	add
408	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q1    /    dPrev;    cPrev  =  q2  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
409	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q2  /  dPrev;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    dPrev;    cPrev  =  q2  /  dPrev;	  timeout    	compilable	  [FE]  AssertionError  	93	2	add
410	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  q1  /  dprev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    /    dPrev;    cPrev  =  q1  /  dprev;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	93	None	add
411	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1,;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,;    	non-compiled	[CE]  ';'  expected	131	None	replace
412	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	42	2	add
413	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	42	2	add
414	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1);	  	non-compiled	[CE]  ';'  expected	42	None	add
415	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  cPrev  =  hN  /  q1;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2,  cPrev  =  hN  /  q1;	  	non-compiled	[CE]  ';'  expected	42	None	add
416	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2);  cPrev  =  hN  /  q1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2);  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2);  cPrev  =  hN  /  q1;	  	non-compiled	[CE]  ';'  expected	42	None	add
417	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1,  n);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1,  n);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	42	None	add
418	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2);    n    =    0;    	compilable	  [FE]  ConvergenceException  	143	12	replace
419	[BUG]  [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2);    n    =    0;    	compilable	  [FE]  ConvergenceException  	143	12	replace
420	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2);  n  =  0;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2);  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2);  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2);    n    =    0;    	non-compiled	[CE]  ';'  expected	143	None	replace
421	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2);    n    =    0;    	compilable	  [FE]  ConvergenceException  	143	12	replace
422	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2);    n    =    0;    	compilable	  [FE]  ConvergenceException  	143	12	replace
423	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN);	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	non-compiled	[CE]  ';'  expected	69	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;	  	compilable	  [FE]  AssertionError  	120	2	add
425	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;	  	compilable	  [FE]  AssertionError  	120	2	add
426	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2);	  	non-compiled	[CE]  ';'  expected	120	None	add
427	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;	  	compilable	  [FE]  AssertionError  	120	2	add
428	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q1;	  	compilable	  [FE]  AssertionError  	120	2	add
429	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  dPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    dPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;	  	compilable	  [FE]  OutOfRangeException  	120	11	add
430	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  dPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  dPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    dPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;	  	compilable	  [FE]  OutOfRangeException  	120	11	add
431	[BUG]  [BUGGY]  n  =  Math.max(cN,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  hN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
432	[BUG]  [BUGGY]  n  =  Math.max(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(hN,  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(hN,  dPrev);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
433	[BUG]  [BUGGY]  n  =  Math.min(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(hN,  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(hN,  dPrev);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
434	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
435	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
436	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	48	12	add
437	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	48	12	add
438	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  int  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  int  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    int  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
439	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2);  n  =  0;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2);  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2);  n  =  0;	  	non-compiled	[CE]  ';'  expected	48	None	add
440	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    cN;    cPrev  =  dPrev  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	18	2	add
441	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dPrev  /  cN;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    cN;    cPrev  =  dPrev  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	18	2	add
442	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dPrev  /  cN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dPrev  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    cN;    cPrev  =  dPrev  /  cN);	  timeout    	non-compiled	[CE]  ';'  expected	18	None	add
443	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dprev  /  cN;  [CE]  cannot  find  symbol  dprev  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  dprev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    cN;    cPrev  =  dprev  /  cN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	18	None	add
444	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    cN;    dPrev  =  dPrev  /  cN;	  timeout    	compilable	  [FE]  OutOfRangeException  	18	7	add
445	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  [FE]  OutOfRangeException  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    cN;    dPrev  =  dPrev  /  cN;	  timeout    	compilable	  [FE]  OutOfRangeException  	18	7	add
446	[BUG]  [BUGGY]  p0  =  cN  /  q1;  n  =  dPrev;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  p0  =  cN  /  q1;  n  =  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	p0  =  cN  /  q1;  n  =  dPrev;	  cN    =    cN    /    q1;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
447	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  q1;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	108	6	replace
448	[BUG]  [BUGGY]  cPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  q1;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	108	6	replace
449	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  cannot  find  symbol  CN  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  CN  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    CN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  cannot  find  symbol  CN	132	None	replace
450	[BUG]  [BUGGY]  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  cannot  find  symbol  CN  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	CN  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    CN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  cannot  find  symbol  CN	132	None	replace
451	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  cannot  find  symbol  CN  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  CN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;  CN  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    CN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  cannot  find  symbol  CN	132	None	replace
452	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	12	11	add
453	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	12	11	add
454	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	12	11	add
455	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	12	11	add
456	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	12	None	add
457	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2,	  	non-compiled	[CE]  ';'  expected	12	None	add
458	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
459	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
460	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,  q1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p1  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
461	[BUG]  [BUGGY]  int  cN  =  cN  /  q2;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    int    cN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
462	[BUG]  [BUGGY]  n  =  0;  int  cN  =  cN  /  q2;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  int  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  0;  int  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    int    cN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
463	[BUG]  [BUGGY]  n  =  cN  /  q2;  int  cN  =  cN  /  q2;  n  =  0;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q2;  int  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q2;  int  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    int    cN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
464	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    q1;    n    =    0;    cN  =  cN  /  q1;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	144	12	add
465	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    n    =    0;    cN  =  cN  /  q1;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	144	12	add
466	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  int  cN  =  cN  /  q1;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  int  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    n    =    0;    int  cN  =  cN  /  q1;  n  =  0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	144	None	add
467	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  CN  =  cN  /  q1;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  CN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    n    =    0;    CN  =  cN  /  q1;  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol  CN	144	None	add
468	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(epsilon  -  1.0)/  dPrev;	  cN    =    Math.abs(epsilon    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	172	7	replace
469	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(epsilon  -  1.0)/  dPrev;	  cN    =    Math.abs(epsilon    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	172	7	replace
470	[BUG]  [BUGGY]  cN  =  cN  /  dPrev,  q1;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  dPrev,  q1;	          cN    =    cN    /    q2;    cN    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	179	None	replace
471	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    *    q1;    cPrev  =  dPrev  *  q1;	  	compilable	  [FE]  AssertionError  	89	2	add
472	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q1;    cPrev  =  dPrev  *  q1;	  	compilable	  [FE]  AssertionError  	89	2	add
473	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q1;    cPrev  =  dPrev  *  q1);	  	non-compiled	[CE]  ';'  expected	89	None	add
474	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1,  cN;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q1,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q1;    cPrev  =  dPrev  *  q1,  cN;	  	non-compiled	[CE]  ';'  expected	89	None	add
475	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  cN;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  cN;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	186	None	replace
476	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q2;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	186	None	replace
477	[BUG]  [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q2;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q2;  cPrev  =  p0  /  q2,  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	186	None	replace
478	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  /  dPrev  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  /  dPrev  +  1);	  n    =    Math.abs(deltaN    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
479	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  dPrev,  cN);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                          AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  /  dPrev,  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  /  dPrev,  cN);	  n    =    Math.abs(deltaN    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	31	None	replace
480	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    hN    *    q2;    cPrev  =  hN  *  q2;	  	compilable	  [FE]  AssertionError  	140	2	add
481	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    *    q2;    cPrev  =  hN  *  q2;	  	compilable	  [FE]  AssertionError  	140	2	add
482	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    *    q2;    cPrev  =  hN  *  q2);	  	non-compiled	[CE]  ';'  expected	140	None	add
483	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  int  cPrev  =  hN  *  q2;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  int  cPrev  =  hN  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    *    q2;    int  cPrev  =  hN  *  q2;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	140	None	add
484	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    *    q2;    cPrev  =  hN  *  q2,;	  	non-compiled	[CE]  ';'  expected	140	None	add
485	[BUG]  [BUGGY]  n  =  q1  /  cN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q1  /  cN;	  n    =    cN    /    q1;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
486	[BUG]  [BUGGY]  n  =  cN  /  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  dPrev  +  1;	  n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
487	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  cN  /  dPrev;	  n    =    cN    /    dPrev;    	compilable	timeout	24	1	replace
488	[BUG]  [BUGGY]  dPrev  =  cN  /  dPrev;  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  cN  /  dPrev;	  n    =    cN    /    dPrev;    	compilable	timeout	24	1	replace
489	[BUG]  [BUGGY]  n  =  p0  /  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  p0  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  p0  /  dPrev;	  n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
490	[BUG]  [BUGGY]  n  =  q2  /  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2  /  DEFAULT_EPSILON;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2  /  DEFAULT_EPSILON;	  n    =    q2;    	non-compiled	[CE]  possible  loss  of  precision	138	None	replace
491	[BUG]  [BUGGY]  n  =  q1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q1;	  n    =    q2;    	non-compiled	[CE]  possible  loss  of  precision	138	None	replace
492	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  q2);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cPrev  *  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cPrev  *  q2);	  n    =    Math.abs(cN    *    q2);    	non-compiled	[CE]  possible  loss  of  precision	77	None	replace
493	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  *  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  *  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev  *  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev    +    1;    	non-compiled	[CE]  possible  loss  of  precision	133	None	replace
494	[BUG]  [BUGGY]  cPrev  =  cN  hPrev  /  hN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  hPrev  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  hPrev  /  hN;	  cPrev    =    hPrev    /    cN;    timeout    	non-compiled	[CE]  ';'  expected	154	None	replace
495	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  hPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  hPrev;	  cPrev    =    hPrev    /    cN;    timeout    	compilable	timeout	154	1	replace
496	[BUG]  [BUGGY]  cPrev  =  cN  /  hPrev;  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  hPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  hPrev;	  cPrev    =    hPrev    /    cN;    timeout    	compilable	timeout	154	1	replace
497	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q2    *    dPrev;    cPrev  =  q2  *  dPrev;	  	compilable	  [FE]  AssertionError  	83	2	add
498	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    *    dPrev;    cPrev  =  q2  *  dPrev;	  	compilable	  [FE]  AssertionError  	83	2	add
499	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    *    dPrev;    cPrev  =  q2  *  dPrev);	  	non-compiled	[CE]  ';'  expected	83	None	add
500	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  int  cPrev  =  q2  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  int  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    *    dPrev;    int  cPrev  =  q2  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	83	None	add
501	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2  *  dprev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    *    dPrev;    cPrev  =  q2  *  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	83	None	add
502	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cPrev;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q2,  cPrev;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    cN;    	non-compiled	[CE]  ';'  expected	188	None	replace
503	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev1;  [CE]  cannot  find  symbol  dPrev1  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev1;	  cPrev    =    dPrev    /    q1;    timeout    	non-compiled	[CE]  cannot  find  symbol  dPrev1	130	None	replace
504	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  p0  /  q1;	  cPrev    =    dPrev    /    q1;    timeout    	compilable	  [FE]  ConvergenceException  	130	5	replace
505	[BUG]  [BUGGY]  cPrev  =  p0  /  q1;  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  q1;	  cPrev    =    dPrev    /    q1;    timeout    	compilable	  [FE]  ConvergenceException  	130	5	replace
506	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
507	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
508	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  epsilon;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  epsilon;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
509	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  epsilon;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  epsilon;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  epsilon;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
510	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN);	  	non-compiled	[CE]  ';'  expected	67	None	add
511	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN);  cPrev  =  q2  /  cN;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN);  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN);  cPrev  =  q2  /  cN;	  	non-compiled	[CE]  ';'  expected	67	None	add
512	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	61	6	add
513	[BUG]  [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	61	6	add
514	[BUG]  [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	61	None	add
515	[BUG]  [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q2,;	  	non-compiled	[CE]  ';'  expected	61	None	add
516	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	61	6	add
517	[BUG]  [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dPrev  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    dPrev    /    q2;    cN  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	61	6	add
518	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q2  +  1;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  1.0)/  q2  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
519	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q2  +  1;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  deltaN  -  1.0)/  q2  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
520	[BUG]  [BUGGY]  n  =  cN.abs(dPrev  -  1.0);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(dPrev  -  1.0);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(dPrev  -  1.0);	          n    =    cN.abs(deltaN    -    1.0);    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
521	[BUG]  [BUGGY]  n  =  dPrev.abs(deltaN  -  1.0);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  dPrev.abs(deltaN  -  1.0);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  dPrev.abs(deltaN  -  1.0);	          n    =    cN.abs(deltaN    -    1.0);    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
522	[BUG]  [BUGGY]  n  =  cN.abs(epsilon  -  1.0);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(epsilon  -  1.0);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(epsilon  -  1.0);	          n    =    cN.abs(deltaN    -    1.0);    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
523	[BUG]  [BUGGY]  n  =  cN  *  q2;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  *  q2;	  cN    =    cN    *    q2;    n    =    0;    timeout    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
524	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  *  dPrev;  n  =  0;	  cN    =    cN    *    q2;    n    =    0;    timeout    	compilable	timeout	37	1	replace
525	[BUG]  [BUGGY]  cN  =  cN  *  dPrev;  n  =  0;  timeout  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  dPrev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  dPrev;  n  =  0;	  cN    =    cN    *    q2;    n    =    0;    timeout    	compilable	timeout	37	1	replace
526	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    q2    +    1;    cPrev  =  dPrev  /  q2  +  1;	  timeout    	compilable	  [FE]  AssertionError  	192	2	add
527	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2  +  1;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q2    +    1;    cPrev  =  dPrev  /  q2  +  1;	  timeout    	compilable	  [FE]  AssertionError  	192	2	add
528	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2)  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2)  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q2    +    1;    cPrev  =  dPrev  /  q2)  +  1;	  timeout    	non-compiled	[CE]  ';'  expected	192	None	add
529	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2,  +  1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dPrev  /  q2,  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q2    +    1;    cPrev  =  dPrev  /  q2,  +  1;	  timeout    	non-compiled	[CE]  ';'  expected	192	None	add
530	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2  +  1;	  timeout    	compilable	  [FE]  OutOfRangeException  	192	11	add
531	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2  +  1;  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2  +  1;	  timeout    	compilable	  [FE]  OutOfRangeException  	192	11	add
532	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
533	[BUG]  [BUGGY]  cPrev  =  cN  *  q2;  cPrev  =  dPrev  *  q2,  q1;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  *  q2;  cPrev  =  dPrev  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  *  q2;  cPrev  =  dPrev  *  q2,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
534	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q1;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q1;  cPrev  =  dPrev  *  q2,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
535	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev,  q1;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev;  cPrev  =  q2  *  dPrev,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
536	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    q1;    cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	148	11	add
537	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	148	11	add
538	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    q1;    cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	148	11	add
539	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	148	11	add
540	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  cN;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1,  cN;	  	non-compiled	[CE]  ';'  expected	148	None	add
541	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	148	None	add
542	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  cPrev;  [CE]  ';'  expected  [FE]            ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  cPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1,  cPrev;	  	non-compiled	[CE]  ';'  expected	148	None	add
543	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(dPrev    *    cN);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
544	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  *  cN  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  *  cN  +  1);	  n    =    Math.abs(dPrev    *    cN);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
545	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(deltaN  -  1.0)/  q1;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
546	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(deltaN  -  1.0)/  q1;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
547	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(deltaN  -  1.0)/  cN;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
548	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  cN;  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(deltaN  -  1.0)/  cN;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
549	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
550	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  timeout  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
551	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q0;  [CE]  cannot  find  symbol  q0  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q0;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2);    	non-compiled	[CE]  cannot  find  symbol  q0	103	None	replace
552	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	104	11	add
553	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	104	11	add
554	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	104	11	add
555	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	104	11	add
556	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  possible  loss  of  precision	104	None	add
557	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	timeout	104	1	add
558	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  timeout  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	timeout	104	1	add
559	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dprev    /    q2;    	compilable	timeout	135	1	replace
560	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dprev    /    q2;    	compilable	timeout	135	1	replace
561	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(epsilon,  dPrev);	  n    =    Math.max(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
562	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
563	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(dPrev,  epsilon  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(dPrev,  epsilon  +  1);	  n    =    Math.max(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
564	[BUG]  [BUGGY]  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
565	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  epsilon);	  n    =    Math.abs(epsilon    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
566	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  /  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  /  dPrev);	  n    =    Math.abs(epsilon    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    q1    *    dPrev;    cPrev  =  q1  *  dPrev;	  	compilable	  [FE]  AssertionError  	85	2	add
568	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    *    dPrev;    cPrev  =  q1  *  dPrev;	  	compilable	  [FE]  AssertionError  	85	2	add
569	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    *    dPrev;    cPrev  =  q1  *  dPrev);	  	non-compiled	[CE]  ';'  expected	85	None	add
570	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  q1  *  dprev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q1    *    dPrev;    cPrev  =  q1  *  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	85	None	add
571	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
572	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
573	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	100	11	add
574	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	100	11	add
575	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
576	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
577	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  possible  loss  of  precision	100	None	add
578	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
579	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
580	[BUG]  [BUGGY]  cN  =  p0  /  q2;  cN  =  cN  /  q2,  dPrev;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p0  /  q2;  cN  =  cN  /  q2,  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p0  /  q2;  cN  =  cN  /  q2,  dPrev;	          cN    =    cN    /    q2;    cN    =    cN    /    q2,    dPrev;    	non-compiled	[CE]  ';'  expected	180	None	replace
581	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
582	[BUG]  [BUGGY]  cPrev  =  q2  /  deltaN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	  [FE]  ConvergenceException  	96	12	replace
583	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
584	[BUG]  [BUGGY]  cPrev  =  hN  /  deltaN;  timeout  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  deltaN;	  cPrev    =    dPrev    /    deltaN;    	compilable	timeout	96	1	replace
585	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q2;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
586	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q2;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
587	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q2;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
588	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  cPrev;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  cPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  cPrev;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
589	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  q2;  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  *  q2;	  n    =    Math.abs(cN    *    q2);    	non-compiled	[CE]  ')'  expected	77	None	replace
590	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  q2  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	timeout	64	1	replace
591	[BUG]  [BUGGY]  cN  =  q2  /  deltaN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  q2  /  deltaN;	  cN    =    cN    /    deltaN;    	compilable	timeout	64	1	replace
592	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  n  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  n  /  cN;	  cPrev    =    hN    /    cN;    	compilable	  [FE]  ConvergenceException  	190	12	replace
593	[BUG]  [BUGGY]  cPrev  =  n  /  cN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  n  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  n  /  cN;	  cPrev    =    hN    /    cN;    	compilable	  [FE]  ConvergenceException  	190	12	replace
594	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
595	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  q1  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
596	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1  +  1;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q1  +  1;	  cPrev    =    dPrev    /    q2    +    1;    timeout    	compilable	timeout	193	1	replace
597	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  CN  =  cN  /  dPrev;  [CE]  cannot  find  symbol  CN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  CN  =  cN  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    CN  =  cN  /  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  CN	59	None	add
598	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    cN;    	non-compiled	[CE]  ';'  expected	188	None	replace
599	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    cN;    	non-compiled	[CE]  ';'  expected	188	None	replace
600	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1  +  1;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  q1  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
601	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
602	[BUG]  [BUGGY]  cPrev  =  q2  *  cN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  cN;	  cPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	23	11	replace
603	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dprev  /  q1;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dprev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dprev  /  q1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	129	None	add
604	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2);  cN  =  cN  /  q1;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2);  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2);  cN  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	16	None	add
605	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1,	  	non-compiled	[CE]  ';'  expected	16	None	add
606	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2,;	  	non-compiled	[CE]  ';'  expected	12	None	add
607	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  hN;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  n  =  hN;	  cN    =    cN    /    q1;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
608	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  -  1.0)/  dPrev;	  n    =    Math.abs(dPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	81	None	replace
609	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q1;	  	non-compiled	[CE]  ';'  expected	42	None	add
610	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q3;  [CE]  cannot  find  symbol  q3  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q3;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q3;	  	non-compiled	[CE]  cannot  find  symbol  q3	42	None	add
611	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  cN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  cN;  n  =  0;	  cN    =    cN    /    dPrev;    n    =    0;    	compilable	timeout	35	1	replace
612	[BUG]  [BUGGY]  cN  =  dPrev  /  cN;  n  =  0;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  cN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  cN;  n  =  0;	  cN    =    cN    /    dPrev;    n    =    0;    	compilable	timeout	35	1	replace
613	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  dPrev,  q2);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  /  dPrev,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  /  dPrev,  q2);	  n    =    Math.abs(deltaN    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	31	None	replace
614	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  q2);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  /  q2);	  n    =    Math.abs(deltaN    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
615	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
616	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q1;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
617	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  cN;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  cN;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
618	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q0,  q1;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q0,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q0,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
619	[BUG]  [BUGGY]  n  =  Math.min(q2,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(q2,  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(q2,  dPrev);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
620	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(dPrev,  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(dPrev,  q1);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
621	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2,;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2,;	  timeout    	non-compiled	[CE]  ';'  expected	182	None	add
622	[BUG]  [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dprev  /  q2;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2;  cN  =  dprev  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    dPrev    /    q2;    cN  =  dprev  /  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	61	None	add
623	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q2    /    cN;    	compilable	timeout	111	1	replace
624	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q2    /    cN;    	compilable	timeout	111	1	replace
625	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  q1;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  cN  /  q1;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q2    /    cN;    	compilable	timeout	111	1	replace
626	[BUG]  [BUGGY]  cPrev  =  cN  /  q1;  cPrev  =  q2  /  cN;  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  cN  /  q1;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  cN  /  q1;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q2    /    cN;    	compilable	timeout	111	1	replace
627	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  n  =  0;  CN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  CN	51	None	replace
628	[BUG]  [BUGGY]  cN  =  cN  /  q2;  n  =  0;  CN  =  cN  /  q1;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  0;  CN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q2;  n  =  0;  CN  =  cN  /  q1;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  CN	51	None	replace
629	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	22	11	add
630	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	22	11	add
631	[BUG]  [BUGGY]  int  cPrev  =  q2  /  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  q2  /  dPrev;	  cPrev    =    q2    /    cN;    int    cPrev    =    q2    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
632	[BUG]  [BUGGY]  n  =  Math.max(cN,  dN);  [CE]  cannot  find  symbol  dN  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(cN,  dN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(cN,  dN);	  n    =    Math.max(dPrev,    dN);    	non-compiled	[CE]  cannot  find  symbol  dN	194	None	replace
633	[BUG]  [BUGGY]  n  =  Math.max(q2,  q2);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(q2,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(q2,  q2);	  n    =    Math.max(dPrev,    dN);    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
634	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  *  dPrev);	  n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
635	[BUG]  [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2);  n  =  0;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2);  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    n    =    0;    cN  =  cN  *  q2);  n  =  0;	  timeout    	non-compiled	[CE]  ';'  expected	36	None	add
636	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
637	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
638	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  3;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	n  =  3;	  n    =    0;    	compilable	timeout	33	1	replace
639	[BUG]  [BUGGY]  n  =  3;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  3;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  3;	  n    =    0;    	compilable	timeout	33	1	replace
640	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  int  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  int  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    int  cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	67	None	add
641	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2)  /  cN;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2)  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2)  /  cN;	  	non-compiled	[CE]  ';'  expected	67	None	add
642	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dprev  *  q1;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q1;  cPrev  =  dprev  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q1;    cPrev  =  dprev  *  q1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	89	None	add
643	[BUG]  [BUGGY]  n  =  q2  -  dPrev;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2  -  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2  -  dPrev;	  n    =    q2;    	non-compiled	[CE]  possible  loss  of  precision	138	None	replace
644	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev,  q1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  q2  /  dPrev,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
645	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
646	[BUG]  [BUGGY]  n  =  Math.min(cN,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  hN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  hN);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
647	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q0;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q0;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q0;    	non-compiled	[CE]  ';'  expected	178	None	replace
648	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q0;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q0;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q0;    	non-compiled	[CE]  ';'  expected	178	None	replace
649	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  hN  /  q2,  q0;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q0;    	non-compiled	[CE]  ';'  expected	178	None	replace
650	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q0;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q0;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q0;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q0;    	non-compiled	[CE]  ';'  expected	178	None	replace
651	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  CN  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  cannot  find  symbol  CN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  CN  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    CN  =  Math.abs(epsilon  -  1.0)/  q2;	  	non-compiled	[CE]  cannot  find  symbol  CN	171	None	add
652	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2,;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q2,;	  	non-compiled	[CE]  ';'  expected	171	None	add
653	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN;  [CE]  cannot  find  symbol  p1  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p0  /  cN;  cPrev  =  p1  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q3    /    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	168	None	replace
654	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  CN  =  Math.abs(dPrev  -  1.0)/  q2;  [CE]  cannot  find  symbol  CN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  CN  =  Math.abs(dPrev  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    CN  =  Math.abs(dPrev  -  1.0)/  q2;	  	non-compiled	[CE]  cannot  find  symbol  CN	55	None	add
655	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2,;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q2,;	  	non-compiled	[CE]  ';'  expected	55	None	add
656	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	non-compiled	[CE]  ';'  expected	106	None	replace
657	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  epsilon;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1,  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	non-compiled	[CE]  ';'  expected	106	None	replace
658	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                    ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	compilable	  [FE]  ConvergenceException  	106	12	replace
659	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]                    ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2,    epsilon;    	compilable	  [FE]  ConvergenceException  	106	12	replace
660	[BUG]  [BUGGY]  cPrev  =  p2  /  cN;  [CE]  cannot  find  symbol  p2  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  p2  /  cN;	  cPrev    =    p0    /    cN;    timeout    	non-compiled	[CE]  cannot  find  symbol  p2	21	None	replace
661	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2,  *  dPrev;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q2,  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    *    dPrev;    cPrev  =  q2,  *  dPrev;	  	non-compiled	[CE]  ';'  expected	83	None	add
662	[BUG]  [BUGGY]  n  =  cN  /  q1  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q1  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q1  +  1;	  n    =    cN    /    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
663	[BUG]  [BUGGY]  n  =  q2.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	174	None	replace
664	[BUG]  [BUGGY]  cPrev  =  q0  *  p2;  [CE]  cannot  find  symbol  q0  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q0  *  p2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q0  *  p2;	  cPrev    =    p0    *    q2;    	non-compiled	[CE]  cannot  find  symbol  q0	88	None	replace
665	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  q1  /  cN;	  cN    =    cN    /    q1;    	compilable	timeout	149	1	replace
666	[BUG]  [BUGGY]  cN  =  q1  /  cN;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  q1  /  cN;	  cN    =    cN    /    q1;    	compilable	timeout	149	1	replace
667	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
668	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
669	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  qPrev  *  q2,;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  qPrev  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  qPrev  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
670	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  ';'  expected	104	None	add
671	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q3;  [CE]  cannot  find  symbol  q3  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q3;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q3;	  	non-compiled	[CE]  cannot  find  symbol  q3	104	None	add
672	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  ';'  expected	104	None	add
673	[BUG]  [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q1,  n  =  0;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  n  =  0;  cN  =  cN  /  q1,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    n    =    0;    cN  =  cN  /  q1,  n  =  0;	  	non-compiled	[CE]  ';'  expected	144	None	add
674	[BUG]  [BUGGY]  cPrev  =  q2  *  cN;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  cN;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  cN;  cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
675	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2.;  [CE]  <identifier>  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2.;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2.;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
676	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	compilable	  [FE]  ConvergenceException  	128	11	replace
677	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	compilable	  [FE]  ConvergenceException  	128	11	replace
678	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2)  /  cN;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2)  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2)  /  cN;	  	non-compiled	[CE]  ';'  expected	110	None	add
679	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  int  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  int  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    int  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	110	None	add
680	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2,  /  cN;	  	non-compiled	[CE]  ';'  expected	110	None	add
681	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  q2  +  1;	  cN    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	62	12	replace
682	[BUG]  [BUGGY]  cN  =  dPrev  /  q2  +  1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  q2  +  1;	  cN    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	62	12	replace
683	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  *  q1;  n  =  0;	  cN    =    cN    *    q2;    n    =    0;    timeout    	compilable	timeout	37	1	replace
684	[BUG]  [BUGGY]  cN  =  cN  *  q1;  n  =  0;  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  q1;  n  =  0;	  cN    =    cN    *    q2;    n    =    0;    timeout    	compilable	timeout	37	1	replace
685	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(epsilon,  cN);	  n    =    Math.min(deltaN,    cN);    	non-compiled	[CE]  possible  loss  of  precision	158	None	replace
686	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
687	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	113	11	add
688	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	113	11	add
689	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q2;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	113	None	add
690	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q1;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2;  cPrev  =  dprev  /  q1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	117	None	add
691	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2);  cPrev  =  dPrev  /  q1;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2);  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2);  cPrev  =  dPrev  /  q1;	  	non-compiled	[CE]  ';'  expected	117	None	add
692	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	117	11	add
693	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	117	11	add
694	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2);	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2);    	non-compiled	[CE]  ';'  expected	122	None	replace
695	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q3  *  q2);  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q3  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q3  *  q2);	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2);    	non-compiled	[CE]  ';'  expected	122	None	replace
696	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q2,  dPrev;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q2,  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q1;  cN  =  cN  /  q2,  dPrev;	          cN    =    cN    /    q2;    cN    =    cN    /    q2,    dPrev;    	non-compiled	[CE]  ';'  expected	180	None	replace
697	[BUG]  [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2,  dPrev;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2,  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  q2;  cN  =  cN  *  q2,  dPrev;	          cN    =    cN    /    q2;    cN    =    cN    /    q2,    dPrev;    	non-compiled	[CE]  ';'  expected	180	None	replace
698	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(dPrev,  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(dPrev,  q1);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	136	None	replace
699	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(epsilon,  hN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(epsilon,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
700	[BUG]  [BUGGY]  n  =  Math.min(cN,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  q1,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  q1,  q2);	  n    =    Math.min(cN,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	73	None	replace
701	[BUG]  [BUGGY]  int  cPrev  =  q1  /  hN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  q1  /  hN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  q1  /  hN;	  cPrev    =    q1    /    cN;    int    cPrev    =    q1    /    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	replace
702	[BUG]  [BUGGY]  n  =  Math.min(q2,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(q2,  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(q2,  epsilon);	  n    =    Math.min(epsilon,    q2);    	non-compiled	[CE]  possible  loss  of  precision	74	None	replace
703	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q1  /  cN);	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN);    	non-compiled	[CE]  ';'  expected	109	None	replace
704	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1,;	  	non-compiled	[CE]  ';'  expected	148	None	add
705	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
706	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
707	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  int  cPrev  =  hN  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  int  cPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    int  cPrev  =  hN  /  cN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	189	None	add
708	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2)  /  dPrev;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2)  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    q2    /    dPrev;    cPrev  =  q2)  /  dPrev;	  timeout    	non-compiled	[CE]  ';'  expected	91	None	add
709	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  CN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  cannot  find  symbol  CN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  CN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    CN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  	non-compiled	[CE]  cannot  find  symbol  CN	57	None	add
710	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dprev  -  1.0)/  deltaN;  [CE]  cannot  find  symbol  dprev  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  cN  =  Math.abs(dprev  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    cN  =  Math.abs(dprev  -  1.0)/  deltaN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	57	None	add
711	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  *  cN;	  timeout    	compilable	  [FE]  AssertionError  	153	2	add
712	[BUG]  [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  *  cN;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hPrev  /  cN;  cPrev  =  hPrev  *  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hPrev    /    cN;    cPrev  =  hPrev  *  cN;	  timeout    	compilable	  [FE]  AssertionError  	153	2	add
713	[BUG]  [BUGGY]  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN);	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	non-compiled	[CE]  ';'  expected	69	None	replace
714	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  cN  +  1;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	compilable	timeout	69	1	replace
715	[BUG]  [BUGGY]  cPrev  =  q2  /  cN  +  1;  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  cN  +  1;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	compilable	timeout	69	1	replace
716	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  p0  =  p0  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    p0    *    q2;    p0  =  p0  *  q2;	  	compilable	  [FE]  AssertionError  	87	2	add
717	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  p0  =  p0  *  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  p0  =  p0  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    p0  =  p0  *  q2;	  	compilable	  [FE]  AssertionError  	87	2	add
718	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  q2  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  q2  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  q2  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
719	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  epsilon  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  epsilon  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
720	[BUG]  [BUGGY]  n  =  Math.abs(q2  /  deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  /  deltaN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  /  deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
721	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev2;  [CE]  cannot  find  symbol  dPrev2  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  dPrev2;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dPrev2	54	None	replace
722	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  ';'  expected	100	None	add
723	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  ';'  expected	100	None	add
724	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
725	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  -  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  -  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
726	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  1;	          n    =    Math.abs(deltaN    -    1.0)/    2;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
727	[BUG]  [BUGGY]  cN  =  cN  /  q0,  q1;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q0,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q0,  q1;	          cN    =    cN    /    q2;    cN    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	179	None	replace
728	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(deltaN  -  1.0)/  q2  +  1;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
729	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2  +  1;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(deltaN  -  1.0)/  q2  +  1;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
730	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,;    	non-compiled	[CE]  ';'  expected	41	None	replace
731	[BUG]  [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q1;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  hN  /  q2;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
732	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  q2;  cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dprev    *    q2;    	compilable	  [FE]  ConvergenceException  	142	12	replace
733	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  q1  *  q2;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  q1  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;  cPrev  =  q1  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dprev    *    q2;    	compilable	  [FE]  ConvergenceException  	142	12	replace
734	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	152	None	replace
735	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dprev  *  q2  +  1;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2  +  1;  cPrev  =  dprev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    *    q2    +    1;    cPrev  =  dprev  *  q2  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	161	None	add
736	[BUG]  [BUGGY]  int  cPrev  =  q2  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  q2  *  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  q2  *  dPrev;	  cPrev    =    dPrev    *    q2;    int    cPrev    =    dPrev    *    q2;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	replace
737	[BUG]  [BUGGY]  n  =  Math.abs(q2  *  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  *  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  *  cN);	  n    =    Math.abs(dPrev    *    cN);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
738	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  dPrev  /  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(deltaN  -  dPrev  /  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(deltaN  -  dPrev  /  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
739	[BUG]  [BUGGY]  n  =  cN.abs(deltaN  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(deltaN  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(deltaN  +  1);	  n    =    cN.abs(deltaN);    	non-compiled	[CE]  double  cannot  be  dereferenced	175	None	replace
740	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2)  /  cN;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2)  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2)  /  cN;	  timeout    	non-compiled	[CE]  ';'  expected	150	None	add
741	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2,  /  cN;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2,  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2,  /  cN;	  timeout    	non-compiled	[CE]  ';'  expected	150	None	add
742	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2-  /  cN;  [CE]  illegal  start  of  expression  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2-  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2-  /  cN;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	150	None	add
743	[BUG]  [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2,;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  cN  =  cN  *  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    *    q2;    cN  =  cN  *  q2,;	  timeout    	non-compiled	[CE]  ';'  expected	65	None	add
744	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dprev    /    q2;    	compilable	timeout	135	1	replace
745	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dprev    /    q2;    	compilable	timeout	135	1	replace
746	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  q2;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  q1  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
747	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,  q2;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
748	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  CN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  cannot  find  symbol  CN  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  CN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q2;  CN  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    CN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  cannot  find  symbol  CN	132	None	replace
749	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
750	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
751	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q1;  [CE]  cannot  find  symbol  qN  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  qN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	non-compiled	[CE]  cannot  find  symbol  qN	43	None	replace
752	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  q2;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
753	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2;  cPrev  =  hN  /  q1;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q2;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
754	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dprev  *  q2;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dprev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dprev  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	120	None	add
755	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2);  cPrev  =  dPrev  *  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2);  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2);  cPrev  =  dPrev  *  q2;	  	non-compiled	[CE]  ';'  expected	120	None	add
756	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev2;  [CE]  cannot  find  symbol  dPrev2  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  1.0)/  dPrev2;	  n    =    Math.abs(cN    -    1.0)/    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dPrev2	75	None	replace
757	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q1;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
758	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  q1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  qN  /  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
759	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q1;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
760	[BUG]  [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q2,  q1;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  hN  /  q2;  cPrev  =  hN  /  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
761	[BUG]  [BUGGY]  cN  =  p2  /  dPrev;  [CE]  cannot  find  symbol  p2  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  p2  /  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  p2  /  dPrev;	  cN    =    cN    /    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p2	60	None	replace
762	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  3/  cN;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  cPrev  =  p0  3/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    /    cN;    cPrev  =  p0  3/  cN;	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
763	[BUG]  [BUGGY]  cPrev  =  p0  /  cN;  pPrev  =  p0  /  cN;  [CE]  cannot  find  symbol  pPrev  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  /  cN;  pPrev  =  p0  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    /    cN;    pPrev  =  p0  /  cN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  pPrev	20	None	add
764	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
765	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
766	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  CN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  cannot  find  symbol  CN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  CN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    CN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  cannot  find  symbol  CN	156	None	add
767	[BUG]  [BUGGY]  n  =  cN.abs(deltaN  -  1.0,  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN.abs(deltaN  -  1.0,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN.abs(deltaN  -  1.0,  epsilon);	          n    =    cN.abs(deltaN    -    1.0);    	non-compiled	[CE]  double  cannot  be  dereferenced	191	None	replace
768	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dprev;  n  =  0;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dprev;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    n    =    0;    cN  =  cN  /  dprev;  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol  dprev	34	None	add
769	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(q2  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(q2  -  1.0)/  dPrev;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
770	[BUG]  [BUGGY]  cN  =  Math.abs(q2  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(q2  -  1.0)/  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(q2  -  1.0)/  dPrev;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
771	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(dPrev  -  1.0)/  q2  +  1;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	56	6	replace
772	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2  +  1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(dPrev  -  1.0)/  q2  +  1;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	56	6	replace
773	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2,  q2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2,  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	186	None	replace
774	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q2;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2,  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	186	None	replace
775	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  *  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  *  hN;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	146	12	add
776	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  *  hN;  n  =  0;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  *  hN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  *  hN;  n  =  0;	  timeout    	compilable	  [FE]  ConvergenceException  	146	12	add
777	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  int  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  int  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    int  cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	107	None	add
778	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q3  /  cN;  [CE]  cannot  find  symbol  q3  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q3  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q3  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  q3	107	None	add
779	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2)/  cN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q2)/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  q2)/  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	non-compiled	[CE]  ';'  expected	159	None	replace
780	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2)/  cN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2)/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q2)/  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	non-compiled	[CE]  ';'  expected	159	None	replace
781	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  cN;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  cN;  cPrev  =  q2  /  dPrev;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	compilable	timeout	159	1	replace
782	[BUG]  [BUGGY]  cPrev  =  q2  /  cN;  cPrev  =  q2  /  dPrev;  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  cN;  cPrev  =  q2  /  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  cN;  cPrev  =  q2  /  dPrev;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	compilable	timeout	159	1	replace
783	[BUG]  [BUGGY]  cPrev  =  q2  /  cN;  cPrev  =  q2)/  dPrev;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  cN;  cPrev  =  q2)/  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  cN;  cPrev  =  q2)/  dPrev;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	non-compiled	[CE]  ';'  expected	159	None	replace
784	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2);  cPrev  =  hN  /  q2;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2);  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2);  cPrev  =  hN  /  q2;	  	non-compiled	[CE]  ';'  expected	38	None	add
785	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2,;  cPrev  =  hN  /  q2;	  	non-compiled	[CE]  ';'  expected	38	None	add
786	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  /  q2,;	  	non-compiled	[CE]  ';'  expected	38	None	add
787	[BUG]  [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q2;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  hN  /  q2;  cPrev  =  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2);    	non-compiled	[CE]  possible  loss  of  precision	40	None	replace
788	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2;    	compilable	timeout	114	1	replace
789	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2;    	compilable	timeout	114	1	replace
790	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2;    	compilable	timeout	114	1	replace
791	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2;  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  q1  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2;    	compilable	timeout	114	1	replace
792	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  DeltaN;  [CE]  cannot  find  symbol  DeltaN  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  cN  =  cN  /  DeltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    cN  =  cN  /  DeltaN;	  	non-compiled	[CE]  cannot  find  symbol  DeltaN	63	None	add
793	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2;    	compilable	  [FE]  ConvergenceException  	39	11	replace
794	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2;    	compilable	  [FE]  ConvergenceException  	39	11	replace
795	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2)/  cN;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2)/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  cN;  cPrev  =  q2)/  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2)    /    cN;    	non-compiled	[CE]  ';'  expected	159	None	replace
796	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1,  q2;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q1,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q1,  q2;	  timeout    	non-compiled	[CE]  ';'  expected	129	None	add
797	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  *  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	42	2	add
798	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    cPrev  =  hN  *  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  AssertionError  	42	2	add
799	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    dPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	42	11	add
800	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q1;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q1;    dPrev  =  hN  /  q2;  cPrev  =  hN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	42	11	add
801	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
802	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q1;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	187	None	replace
803	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(cN  -  1.0)/  q2;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
804	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(cN  -  1.0)/  q2;	  cN    =    Math.abs(dPrev    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	56	12	replace
805	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2;    n    =    0;    	compilable	timeout	49	1	replace
806	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2;    n    =    0;    	compilable	timeout	49	1	replace
807	[BUG]  [BUGGY]  n  =  cN  /  q2;  cN  =  cN  /  q1;  n  =  0;  [CE]  possible  loss  of  precision  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q2;  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q2;  cN  =  cN  /  q1;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
808	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  q2  /  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
809	[BUG]  [BUGGY]  cN  =  q2  /  q1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  q2  /  q1;	  cN    =    cN    /    q1;    	compilable	  [FE]  AssertionError  	149	6	replace
810	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
811	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
812	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
813	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN;  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN;	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN;    	compilable	timeout	108	1	replace
814	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2.;  [CE]  <identifier>  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2.;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2.;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
815	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2.;  [CE]  <identifier>  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2.;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2.;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2.;    	non-compiled	[CE]  <identifier>  expected	128	None	replace
816	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2  +  1;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q2  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
817	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2  +  1;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  1.0)/  q2  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    q2    +    1;    	non-compiled	[CE]  possible  loss  of  precision	167	None	replace
818	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2);	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2);    	non-compiled	[CE]  ';'  expected	122	None	replace
819	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2);  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2);	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2);    	non-compiled	[CE]  ';'  expected	122	None	replace
820	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  q2  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  -  q2  -  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  -  q2  -  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
821	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  2;	          n    =    Math.abs(deltaN    -    1.0)/    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	119	None	replace
822	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,;    	non-compiled	[CE]  ';'  expected	41	None	replace
823	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  q2);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(dPrev,  epsilon  *  q2);	  n    =    Math.max(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
824	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  *  cN  -  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  *  cN  -  1);	  n    =    Math.abs(dPrev    *    cN);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
825	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
826	[BUG]  [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  dPrev;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
827	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
828	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q1;  timeout  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q1;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q1;    	compilable	timeout	118	1	replace
829	[BUG]  [BUGGY]  double  n  =  Math.abs(cN  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(cN  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(cN  -  1.0)/  epsilon;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
830	[BUG]  [BUGGY]  double  n  =  Math.abs(x  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(x  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(x  -  1.0)/  epsilon;	  double    n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	184	None	replace
831	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dprev  /  q2  +  1;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  q2  +  1;  cPrev  =  dprev  /  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    dPrev    /    q2    +    1;    cPrev  =  dprev  /  q2  +  1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	192	None	add
832	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  cN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  cN;  cPrev  =  cN  /  q1;	  cPrev    =    q1    /    cN;    cPrev    =    q3    /    cN;    	compilable	  [FE]  ConvergenceException  	168	6	replace
833	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  cN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  cN  /  q1;	  cPrev    =    q1    /    cN;    cPrev    =    q3    /    cN;    	compilable	  [FE]  ConvergenceException  	168	6	replace
834	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
835	[BUG]  [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  q2;  cPrev  =  dPrev  /  q2);	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	115	None	replace
836	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	compilable	timeout	115	1	replace
837	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2;  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2);    	compilable	timeout	115	1	replace
838	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q1  /  dPrev);	  n    =    Math.abs(dPrev    /    q2);    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
839	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  *  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  *  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
840	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  *  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  *  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  *  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
841	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
842	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
843	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  %  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  %  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
844	[BUG]  [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  %  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  cPrev  =  q2  %  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q2        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q2  %  cN;	  	compilable	  [FE]  AssertionError  	67	2	add
845	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  q2;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	181	None	replace
846	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
847	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
848	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  hN;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
849	[BUG]  [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  hN  /  q1;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  /  hN;  cPrev  =  hN  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  hN;  cPrev  =  hN  /  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q1;    	compilable	  [FE]  ConvergenceException  	43	11	replace
850	[BUG]  [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q1;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q1;  cPrev  =  hN  /  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
851	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  hN  *  q2,  q1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  q2;  cPrev  =  hN  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q2;  cPrev  =  hN  *  q2,  q1;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	176	None	replace
852	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cS;  [CE]  cannot  find  symbol  cS  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cS;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q2  /  cS;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cS;    	non-compiled	[CE]  cannot  find  symbol  cS	71	None	replace
853	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cS;  [CE]  cannot  find  symbol  cS  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cS;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cS;	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cS;    	non-compiled	[CE]  cannot  find  symbol  cS	71	None	replace
854	[BUG]  [BUGGY]  n  =  Math.min(defULT_EPSILON,  q2);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(defULT_EPSILON,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(defULT_EPSILON,  q2);	  n    =    Math.min(epsilon,    q2);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	74	None	replace
855	[BUG]  [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  dPrev;  cPrev  =  dPrev  /  q2,;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
856	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;  cPrev  =  dPrev  /  q2,;	  cPrev    =    dPrev    /    q2;    cPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
857	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2,  cN;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  q2;  cN  =  Math.abs(epsilon  -  1.0)/  q2,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(epsilon    -    1.0)/    q2;    cN  =  Math.abs(epsilon  -  1.0)/  q2,  cN;	  	non-compiled	[CE]  ';'  expected	171	None	add
858	[BUG]  [BUGGY]  int  cN  =  cN  /  q1;  n  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cN  =  cN  /  q1;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cN  =  cN  /  q1;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    int    cN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
859	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1,  cN);	  	non-compiled	[CE]  ';'  expected	156	None	add
860	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2);	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2);    	non-compiled	[CE]  ';'  expected	40	None	replace
861	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2);    	compilable	timeout	40	1	replace
862	[BUG]  [BUGGY]  cPrev  =  q2  /  hN  /  q2;  timeout  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN  /  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2);    	compilable	timeout	40	1	replace
863	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  *  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
864	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q2  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q2  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q2    /    cN;    cPrev  =  q1  *  cN;  cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	110	2	add
865	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	113	2	add
866	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	113	2	add
867	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  n);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  n);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q2;  cPrev  =  dPrev  /  q2,  n);	  	non-compiled	[CE]  ';'  expected	113	None	add
868	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  Math.abs(epsilon  -  1.0)/  deltaN;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	timeout	58	1	replace
869	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  timeout  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  Math.abs(epsilon  -  1.0)/  deltaN;	  cN    =    Math.abs(dPrev    -    1.0)/    deltaN;    	compilable	timeout	58	1	replace
870	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,;    	non-compiled	[CE]  ';'  expected	124	None	replace
871	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
872	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
873	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
874	[BUG]  [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  q2;  cPrev  =  dPrev  *  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2;    	compilable	  [FE]  ConvergenceException  	121	12	replace
875	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  *  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  *  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
876	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  *  q2;  cN  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  *  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  *  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
877	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  dPrev  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  dPrev  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	16	6	add
878	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  dPrev  /  q2;  cN  =  cN  /  q1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  dPrev  /  q2;  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  dPrev  /  q2;  cN  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	16	6	add
879	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2,  cN  =  cN  /  q1;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2,  cN  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2,  cN  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	16	None	add
880	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  x);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q1;  cN  =  cN  /  q2;  cN  =  cN  /  q1,  x);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q1;    cN  =  cN  /  q2;  cN  =  cN  /  q1,  x);	  	non-compiled	[CE]  ';'  expected	16	None	add
881	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  wN;  n  =  0;  [CE]  cannot  find  symbol  wN  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  wN;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    hN;    n    =    0;    cN  =  cN  /  wN;  n  =  0;	  timeout    	non-compiled	[CE]  cannot  find  symbol  wN	146	None	add
882	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  hN;  n  =  0;  cN  =  cN  /  q2,  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
883	[BUG]  [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2,  n  =  0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  *  q2;  n  =  0;  cN  =  cN  *  q2,  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
884	[BUG]  [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  hN,  n  =  0;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  hN,  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  hN,  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    cN    =    cN    /    q2,    n    =    0;    	non-compiled	[CE]  ';'  expected	52	None	replace
885	[BUG]  [BUGGY]  n  =  cN  /  q2;  n  =  dPrev;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q2;  n  =  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q2;  n  =  dPrev;	  cN    =    n    /    q2;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
886	[BUG]  [BUGGY]  n  =  q2  /  n;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2  /  n;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2  /  n;	  cN    =    n    /    q2;    n    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	99	None	replace
887	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  *  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
888	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q1  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q1  *  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q1  *  cN;  cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	107	2	add
889	[BUG]  [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q3  /  cN;  cPrev  =  q1  /  cN;  [CE]  cannot  find  symbol  q3  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;  cPrev  =  q3  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        q1        /        cN;        cPrev    =    q1    /    cN;    cPrev  =  q3  /  cN;  cPrev  =  q1  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  q3	107	None	add
890	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  *  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  *  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	12	11	add
891	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  *  q2;  cN  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  *  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  *  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	12	11	add
892	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2,  cN  =  cN  /  q2;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2,  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2,  cN  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	12	None	add
893	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  dPrev  /  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  dPrev  /  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	6	add
894	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  dPrev  /  q2;  cN  =  cN  /  q2;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  dPrev  /  q2;  cN  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  dPrev  /  q2;  cN  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	6	add
895	[BUG]  [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,  dPrev;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2;  cN  =  cN  /  q2,  dPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        cN    =    cN    /    q2;    cN  =  cN  /  q2;  cN  =  cN  /  q2,  dPrev;	  	non-compiled	[CE]  ';'  expected	12	None	add
896	[BUG]  [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q2);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  *  q2;  cPrev  =  hN  *  q2,  q2);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    *    q2;    cPrev  =  hN  *  q2,  q2);	  	non-compiled	[CE]  ';'  expected	140	None	add
897	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(q2  -  dPrev  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(q2  -  dPrev  +  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
898	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  dPrev  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  dPrev  +  1);	  n    =    Math.abs(deltaN    -    dPrev    +    1);    	non-compiled	[CE]  possible  loss  of  precision	165	None	replace
899	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q1  /  cN);	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN);    	non-compiled	[CE]  ';'  expected	109	None	replace
900	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q2  /  cN);	  cPrev    =    q1    /    cN;    cPrev    =    q1    /    cN);    	non-compiled	[CE]  ';'  expected	109	None	replace
901	[BUG]  [BUGGY]  n  =  cN  /  dPrev2;  [CE]  cannot  find  symbol  dPrev2  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  dPrev2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  dPrev2;	  cN    =    cN    /    dPrev;    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  dPrev2	35	None	replace
902	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dprev  *  q2;  cPrev  =  dPrev  *  q2;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dprev  *  q2;  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dprev  *  q2;  cPrev  =  dPrev  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	120	None	add
903	[BUG]  [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2,  cPrev  =  dPrev  *  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2;  cPrev  =  dPrev  *  q2,  cPrev  =  dPrev  *  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        *        q2;        cPrev    =    dPrev    *    q2;    cPrev  =  dPrev  *  q2,  cPrev  =  dPrev  *  q2;	  	non-compiled	[CE]  ';'  expected	120	None	add
904	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  /  q2,  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2,  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	non-compiled	[CE]  ';'  expected	48	None	add
905	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  *  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
906	[BUG]  [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    cN    /    q2;    n    =    0;    cN  =  cN  /  q2;  n  =  0;  cN  =  cN  *  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        cN        /        q2;        n        =        0;        cN    =    cN    /    q2;    n    =    0;    cN  =  cN  *  q2;  n  =  0;  cN  =  cN  /  q2;  n  =  0;	  	compilable	  [FE]  ConvergenceException  	48	12	add
907	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  dPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev    =    hN    /    cN;    dPrev  =  hN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	189	11	add
908	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  dPrev  =  hN  /  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  dPrev  =  hN  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    hN    /    cN;    dPrev  =  hN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	189	11	add
909	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  *  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
910	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  hN  *  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  hN  *  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
911	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  q2  /  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  q2  /  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
912	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  q2  /  hN  /  q2;  cPrev  =  hN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  cPrev  =  q2  /  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    cPrev  =  q2  /  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  AssertionError  	38	2	add
913	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    dPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	38	11	add
914	[BUG]  [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    hN    /    q2;    cPrev  =  hN  /  q2;  dPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        hN        /        q2;        cPrev    =    hN    /    q2;    dPrev  =  hN  /  q2;  cPrev  =  hN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	38	11	add
915	[BUG]  [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  cN;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  p0  *  q2;  cPrev  =  p0  *  q2,  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev    =    p0    *    q2;    cPrev  =  p0  *  q2,  cN;	  	non-compiled	[CE]  ';'  expected	87	None	add
916	[BUG]  [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev    =    dPrev    /    q2;    cPrev  =  dPrev  /  q1;  cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev        =        dPrev        /        q2;        cPrev    =    dPrev    /    q1;    cPrev  =  dPrev  /  q2,  cPrev  =  dPrev  /  q1;	  	non-compiled	[CE]  ';'  expected	117	None	add
917	[BUG]  [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  *  dPrev;  cPrev  =  dPrev  *  q2,  q2;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q2;    	non-compiled	[CE]  ';'  expected	169	None	replace
918	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(q2  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(q2  -  1.0)/  deltaN;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
919	[BUG]  [BUGGY]  dPrev  =  Math.abs(q2  -  1.0)/  deltaN;  timeout  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(q2  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(q2  -  1.0)/  deltaN;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
920	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	dPrev  =  Math.abs(cN  -  1.0)/  q2;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
921	[BUG]  [BUGGY]  dPrev  =  Math.abs(cN  -  1.0)/  q2;  timeout  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev  =  Math.abs(cN  -  1.0)/  q2;	  dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    timeout    	compilable	timeout	183	1	replace
922	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  dPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(dPrev  /  dPrev  -  1.0)/  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(dPrev  /  dPrev  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    /    deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
923	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  no  suitable  method  found  for  min(double)  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	104	None	add
924	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  x2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  cannot  find  symbol  x2  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  x2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  x2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  cannot  find  symbol  x2	104	None	add
925	[BUG]  [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  q2  /  cN;  cN  =  q2  /  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    q2    /    cN;    cN  =  q2  /  cN);	  timeout    	non-compiled	[CE]  ';'  expected	150	None	add
926	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  dPrev  -  1);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
927	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.min(cN,  dPrev  +  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.min(cN,  dPrev  +  1);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
928	[BUG]  [BUGGY]  int  cPrev  =  dPrev  *  q2  +  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  int  cPrev  =  dPrev  *  q2  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	int  cPrev  =  dPrev  *  q2  +  1;	  cPrev    =    dPrev    *    q2;    int    cPrev    =    dPrev    *    q2;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	replace
929	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  q2;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1,  q2;	  	non-compiled	[CE]  ';'  expected	148	None	add
930	[BUG]  [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  q1;  cN  =  cN  /  q1,  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    q1;    cN  =  cN  /  q1,  q2);	  	non-compiled	[CE]  ';'  expected	148	None	add
931	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  cN  +  1;	  cPrev    =    dPrev    /    cN;    timeout    	compilable	timeout	19	1	replace
932	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN  +  1;  timeout  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN  +  1;	  cPrev    =    dPrev    /    cN;    timeout    	compilable	timeout	19	1	replace
933	[BUG]  [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q1;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  *  dPrev;  cPrev  =  dPrev  *  q2,  q1;	  cPrev    =    dPrev    *    q2;    cPrev    =    dPrev    *    q2,    q1;    	non-compiled	[CE]  ';'  expected	170	None	replace
934	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q2  /  cN);	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	non-compiled	[CE]  ';'  expected	69	None	replace
935	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2  *  cN);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2  *  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  cN;  cPrev  =  q2  *  cN);	  cPrev    =    q2    /    cN;    cPrev    =    q2    /    cN);    	non-compiled	[CE]  ';'  expected	69	None	replace
936	[BUG]  [BUGGY]  n  =  b.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  b.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  b.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	174	None	replace
937	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2,  cN;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  q2;  cN  =  Math.abs(dPrev  -  1.0)/  q2,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    Math.abs(dPrev    -    1.0)/    q2;    cN  =  Math.abs(dPrev  -  1.0)/  q2,  cN;	  	non-compiled	[CE]  ';'  expected	55	None	add
938	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	166	None	replace
939	[BUG]  [BUGGY]  n  =  cN  /  q2;  CN  =  cN  /  q2;  n  =  0;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  cN  /  q2;  CN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  cN  /  q2;  CN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
940	[BUG]  [BUGGY]  cN  =  cN  /  hN;  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [CE]  cannot  find  symbol  CN  [FE]              ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  hN;  n  =  0;  CN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  cN  /  hN;  n  =  0;  CN  =  cN  /  q2;  n  =  0;	          cN    =    cN    /    q2;    n    =    0;    CN    =    cN    /    q2;    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  CN	51	None	replace
941	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2,  cN;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	dPrev    =    Math.abs(deltaN    -    1.0)/    q2;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2,  cN;	  timeout    	non-compiled	[CE]  ';'  expected	182	None	add
942	[BUG]  [BUGGY]  cN  =  cN  /  deltaN;  if(cN  =  cN  /  deltaN;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  deltaN;  if(cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    deltaN;    if(cN  =  cN  /  deltaN;	  	non-compiled	[CE]  ')'  expected	63	None	add
943	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(epsilon  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev    +    1;    	non-compiled	[CE]  possible  loss  of  precision	133	None	replace
944	[BUG]  [BUGGY]  n  =  Math.abs(defULT_EPSILON  -  1.0)/  dPrev  +  1;  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]              AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(defULT_EPSILON  -  1.0)/  dPrev  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(defULT_EPSILON  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev    +    1;    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	133	None	replace
945	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.max(dPrev,  cN  -  1);	  n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
946	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN    =    cN    /    dPrev;    n    =    0;    cN  =  cN  /  dPrev;  n  =  1;	  	compilable	  [FE]  ConvergenceException  	34	11	add
947	[BUG]  [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  cN  /  dPrev;  n  =  0;  cN  =  cN  /  dPrev;  n  =  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN    =    cN    /    dPrev;    n    =    0;    cN  =  cN  /  dPrev;  n  =  1;	  	compilable	  [FE]  ConvergenceException  	34	11	add
948	[BUG]  [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  cN;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  cN;  cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
949	[BUG]  [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  *  cN;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  cN;  cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
950	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  dPrev  /  cN;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  cN;  cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
951	[BUG]  [BUGGY]  cPrev  =  q2;  cPrev  =  q2,  /  cN;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2;  cPrev  =  q2,  /  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2;  cPrev  =  q2,  /  cN;	  cPrev    =    q2    /    cN;    cPrev    =    q2,    /    cN;    	non-compiled	[CE]  ';'  expected	160	None	replace
952	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q2;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  q2;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
953	[BUG]  [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  cPrev;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  cPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  hN;  cPrev  =  hN  /  q2,  cPrev;	  cPrev    =    hN    /    q2;    cPrev    =    hN    /    q2,    q2;    	non-compiled	[CE]  ';'  expected	177	None	replace
954	[BUG]  [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  n  =  0;  [CE]  cannot  find  symbol  cN  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    n  =  0;  this.cN  =  cN  /  q2;  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol  cN	32	None	add
955	[BUG]  [BUGGY]  n  =  0;  n  =  0;  this.p0  =  cN  /  q2;  n  =  0;  [CE]  cannot  find  symbol  p0  [FE]      ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  this.p0  =  cN  /  q2;  n  =  0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    n  =  0;  this.p0  =  cN  /  q2;  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol  p0	32	None	add
956	[BUG]  [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  n  =  hN;  [CE]  cannot  find  symbol  cN  [FE]        ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  n  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    n  =  0;  this.cN  =  cN  /  q2;  n  =  hN;	  	non-compiled	[CE]  cannot  find  symbol  cN	32	None	add
957	[BUG]  [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  p0  =  p0;  [CE]  cannot  find  symbol  cN  [FE]          ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  0;  n  =  0;  this.cN  =  cN  /  q2;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n    =    0;    n  =  0;  this.cN  =  cN  /  q2;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  cN	32	None	add
958	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(cN  -  1.0)/  deltaN;	  n    =    Math.abs(dPrev    -    1.0)/    deltaN;    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
959	[BUG]  [BUGGY]  n  =  Math.abs(x  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  Math.abs(x  -  dPrev);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  Math.abs(x  -  dPrev);	  n    =    Math.abs(epsilon    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
960	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cN  =  dPrev  /  hN;	  cN    =    dPrev    /    q2;    	compilable	timeout	62	1	replace
961	[BUG]  [BUGGY]  cN  =  dPrev  /  hN;  timeout  [FE]    AssertionError    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cN  =  dPrev  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cN  =  dPrev  /  hN;	  cN    =    dPrev    /    q2;    	compilable	timeout	62	1	replace
962	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
963	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	100	11	add
964	[BUG]  [BUGGY]  n  =  q2  /  cN  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  n  =  q2  /  cN  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	n  =  q2  /  cN  +  1;	  n    =    q2    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	139	None	replace
965	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dprev  /  q2;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]      if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;      [BUGGY]  cPrev  =  hN  /  q2;  cPrev  =  dprev  /  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;  cPrev  =  dprev  /  q2;	  cPrev    =    dPrev    /    q2;    cPrev    =    dprev    /    q2;    	non-compiled	[CE]  cannot  find  symbol  dprev	135	None	replace
