bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
2	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  hN);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  hN);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
4	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  hN);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  hN);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  hN);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  hN);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  hN);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
6	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  hN);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  hN);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  hN);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x,  epsilon);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x,  epsilon);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
8	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x,  epsilon);  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x,  epsilon);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x,  epsilon);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	  	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
10	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	  	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
11	[BUG]  [BUGGY]    x  =  Double.parseDouble(dPrev);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Double.parseDouble(dPrev);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Double.parseDouble(dPrev);		non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	2	None	add
12	[BUG]  [BUGGY]    double  epsilon  =  Double.parseDouble(cN);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    double  epsilon  =  Double.parseDouble(cN);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    double  epsilon  =  Double.parseDouble(cN);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
13	[BUG]  [BUGGY]    x  =  Double.parseDouble(cN);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Double.parseDouble(cN);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Double.parseDouble(cN);		non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	2	None	add
14	[BUG]  [BUGGY]    double  epsilon  =  Double.parseDouble(x);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    double  epsilon  =  Double.parseDouble(x);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    double  epsilon  =  Double.parseDouble(x);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
15	[BUG]  [BUGGY]    double  epsilon  =  Double.parseDouble(dPrev);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    double  epsilon  =  Double.parseDouble(dPrev);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    double  epsilon  =  Double.parseDouble(dPrev);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
17	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  	1	2	replace
18	[BUG]  [BUGGY]    double  epsilon  =  Double.parseDouble(q2);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    double  epsilon  =  Double.parseDouble(q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    double  epsilon  =  Double.parseDouble(q2);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
19	[BUG]  [BUGGY]    x  =  Double.parseDouble(x);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Double.parseDouble(x);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Double.parseDouble(x);		non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	2	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(cN  *  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	    x  =  Math.abs(cN  *  q2);		compilable	  [FE]  AssertionError  	2	2	add
21	[BUG]  [BUGGY]    x  =  Math.abs(cN  *  q2);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(cN  *  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Math.abs(cN  *  q2);		compilable	  [FE]  AssertionError  	2	2	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  -  dPrev);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	    x  =  Math.abs(dPrev  -  dPrev);		compilable	  [FE]  AssertionError  	2	2	add
23	[BUG]  [BUGGY]    x  =  Math.abs(dPrev  -  dPrev);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  -  dPrev);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Math.abs(dPrev  -  dPrev);		compilable	  [FE]  AssertionError  	2	2	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  *  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	    x  =  Math.abs(dPrev  *  q2);		compilable	  [FE]  AssertionError  	2	2	add
25	[BUG]  [BUGGY]    x  =  Math.abs(dPrev  *  q2);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  *  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Math.abs(dPrev  *  q2);		compilable	  [FE]  AssertionError  	2	2	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  cN  *  q2;  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	    x  =  cN  *  q2;		compilable	  [FE]  AssertionError  	2	2	add
27	[BUG]  [BUGGY]    x  =  cN  *  q2;  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  cN  *  q2;  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  cN  *  q2;		compilable	  [FE]  AssertionError  	2	2	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  /  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	    x  =  Math.abs(dPrev  /  q2);		compilable	  [FE]  AssertionError  	2	2	add
29	[BUG]  [BUGGY]    x  =  Math.abs(dPrev  /  q2);  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  Math.abs(dPrev  /  q2);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  Math.abs(dPrev  /  q2);		compilable	  [FE]  AssertionError  	2	2	add
