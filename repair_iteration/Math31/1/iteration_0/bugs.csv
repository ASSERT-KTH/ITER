bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,   x); [FE] AssertionError [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); [BUGGY] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	
