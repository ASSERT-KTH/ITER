bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,   x); [FE] AssertionError [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); [BUGGY] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	
3	[BUG] [BUGGY] dPrev = q1; [FE] AssertionError [CONTEXT] } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } [BUGGY] dPrev = q1; [BUGGY] cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } [BUGGY] [BUGGY] dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	
5	[BUG] [BUGGY] cPrev = cN / q2; [FE] AssertionError [CONTEXT] if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; [BUGGY] cPrev = cN / q2; [BUGGY] p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; [BUGGY] [BUGGY] cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	
7	[BUG] [BUGGY] p0 = hPrev; [FE] AssertionError [CONTEXT] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [BUGGY] p0 = hPrev; [BUGGY] hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [BUGGY] [BUGGY] p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	
9	[BUG] [BUGGY] hPrev = cN; [FE] AssertionError [CONTEXT] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [BUGGY] hPrev = cN; [BUGGY] q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [BUGGY] [BUGGY] hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	
11	[BUG] [BUGGY] q1 = q2; [FE] AssertionError [CONTEXT] } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; [BUGGY] q1 = q2; [BUGGY] n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; [BUGGY] [BUGGY] q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	
13	[BUG] [BUGGY] n++; [FE] AssertionError [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; [BUGGY] n++; [BUGGY] } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; [BUGGY] [BUGGY] n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	
15	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; [BUGGY] } [BUGGY]  if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; [BUGGY] [BUGGY] } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	add	
17	[BUG] [BUGGY] super(); [FE] AssertionError [CONTEXT] protected ContinuedFraction() { [BUGGY] super(); [BUGGY] } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	45	45	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected ContinuedFraction() { [BUGGY] [BUGGY] super(); } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	45	45	2	add	
19	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] protected ContinuedFraction() { super(); [BUGGY] } [BUGGY]  [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	46	46	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected ContinuedFraction() { super(); [BUGGY] [BUGGY] } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	46	46	2	add	
21	[BUG] [BUGGY] final double small = 1e-50; [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { [BUGGY] final double small = 1e-50; [BUGGY] double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { [BUGGY] [BUGGY] final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	
23	[BUG] [BUGGY] double hPrev = getA(0, x); [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; [BUGGY] double hPrev = getA(0, x); [BUGGY]   if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; [BUGGY] [BUGGY] double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	
25	[BUG] [BUGGY] if (Precision.equals(hPrev, 0.0, small)) { [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  [BUGGY] if (Precision.equals(hPrev, 0.0, small)) { [BUGGY] hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev;  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  [BUGGY] [BUGGY] if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev;  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	
27	[BUG] [BUGGY] int n = 1; [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } [BUGGY] int n = 1; [BUGGY] double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x);  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } [BUGGY] [BUGGY] int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x);  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	add	
29	[BUG] [BUGGY] double dPrev = 0.0; [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; [BUGGY] double dPrev = 0.0; [BUGGY] double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	133	133	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; [BUGGY] [BUGGY] double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	133	133	2	add	
31	[BUG] [BUGGY] double p0 = 1.0; [FE] AssertionError [CONTEXT] final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; [BUGGY] double p0 = 1.0; [BUGGY] double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double small = 1e-50; double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; [BUGGY] [BUGGY] double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	
33	[BUG] [BUGGY] double q1 = 1.0; [FE] AssertionError [CONTEXT] double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; [BUGGY] double q1 = 1.0; [BUGGY] double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	135	135	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double hPrev = getA(0, x);  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; [BUGGY] [BUGGY] double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	135	135	2	add	
35	[BUG] [BUGGY] double cPrev = hPrev; [FE] AssertionError [CONTEXT]  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; [BUGGY] double cPrev = hPrev; [BUGGY] double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; [BUGGY] [BUGGY] double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	
37	[BUG] [BUGGY] double hN = hPrev; [FE] AssertionError [CONTEXT]  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; [BUGGY] double hN = hPrev; [BUGGY]  while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	137	137	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; [BUGGY] [BUGGY] double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	137	137	2	add	
39	[BUG] [BUGGY] while (n < maxIterations) { [FE] AssertionError [CONTEXT] hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; [BUGGY] while (n < maxIterations) { [BUGGY] final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; [BUGGY] [BUGGY] while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	
41	[BUG] [BUGGY] final double a = getA(n, x); [FE] AssertionError [CONTEXT] } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { [BUGGY] final double a = getA(n, x); [BUGGY] final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { [BUGGY] [BUGGY] final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	
43	[BUG] [BUGGY] final double b = getB(n, x); [FE] AssertionError [CONTEXT] int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); [BUGGY] final double b = getB(n, x); [BUGGY]  double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	141	141	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); [BUGGY] [BUGGY] final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	141	141	2	add	
45	[BUG] [BUGGY] double cN = a * hPrev + b * p0; [FE] AssertionError [CONTEXT] double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); [BUGGY] double cN = a * hPrev + b * p0; [BUGGY] double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); [BUGGY] [BUGGY] double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	
47	[BUG] [BUGGY] double q2 = a * q1 + b * dPrev; [FE] AssertionError [CONTEXT] double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; [BUGGY] double q2 = a * q1 + b * dPrev; [BUGGY] if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; [BUGGY] [BUGGY] double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	
49	[BUG] [BUGGY] if (Double.isInfinite(cN) || Double.isInfinite(q2)) { [FE] AssertionError [CONTEXT] double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; [BUGGY] if (Double.isInfinite(cN) || Double.isInfinite(q2)) { [BUGGY] double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; scaleFactor *= scale; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; [BUGGY] [BUGGY] if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {// Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; scaleFactor *= scale; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	
51	[BUG] [BUGGY] final double deltaN = cN / q2 / cPrev; [FE] AssertionError [CONTEXT] } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } [BUGGY] final double deltaN = cN / q2 / cPrev; [BUGGY] hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } [BUGGY] [BUGGY] final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	
53	[BUG] [BUGGY] hN = cPrev * deltaN; [FE] AssertionError [CONTEXT] cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } final double deltaN = cN / q2 / cPrev; [BUGGY] hN = cPrev * deltaN; [BUGGY]  if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	170	170	2	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } final double deltaN = cN / q2 / cPrev; [BUGGY] [BUGGY] hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	170	170	2	add	
55	[BUG] [BUGGY] if (Double.isInfinite(hN)) { [FE] AssertionError [CONTEXT] } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; [BUGGY] if (Double.isInfinite(hN)) { [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	172	172	2	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; [BUGGY] [BUGGY] if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	172	172	2	add	
57	[BUG] [BUGGY] if (Double.isNaN(hN)) { [FE] AssertionError [CONTEXT] } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } [BUGGY] if (Double.isNaN(hN)) { [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	176	176	2	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } [BUGGY] [BUGGY] if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	176	176	2	add	
59	[BUG] [BUGGY] if (FastMath.abs(deltaN - 1.0) < epsilon) { [FE] AssertionError [CONTEXT] if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } [BUGGY] if (FastMath.abs(deltaN - 1.0) < epsilon) { [BUGGY] break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	181	181	2	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } [BUGGY] [BUGGY] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	181	181	2	add	
