bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  p0  =  1.0f;  double  p0  =  1.0f;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0f;  double  p0  =  1.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    1.0f;    double  p0  =  1.0f;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
2	[BUG]  [BUGGY]  double  p0  =  1.0f;  Double  p0  =  1.0f;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0f;  Double  p0  =  1.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    1.0f;    Double  p0  =  1.0f;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
3	[BUG]  [BUGGY]  double  p0  =  1.0f;  int  p0  =  1.0f;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0f;  int  p0  =  1.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    1.0f;    int  p0  =  1.0f;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
4	[BUG]  [BUGGY]  double  p0  =  1.0f;  p0  =  1.0f;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0f;  p0  =  1.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    1.0f;    p0  =  1.0f;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
5	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  hN  +  b  *  dPrev;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
6	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  a  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  q1  +  b  *  cN;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
7	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  hPrev  +  b  *  dPrev;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
8	[BUG]  [BUGGY]  double  dPrev  =  hPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hPrev;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hPrev;	      double    dPrev    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
9	[BUG]  [BUGGY]  double  dPrev  =  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  DEFAULT_EPSILON;	      double    dPrev    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
10	[BUG]  [BUGGY]  double  dPrev  =  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hN;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hN;	      double    dPrev    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
11	[BUG]  [BUGGY]  double  dPrev  =  n;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  n;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  n;	      double    dPrev    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
12	[BUG]  [BUGGY]      double  d0  =  1.0;  double  d0  =  1.0;  [CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]      double  d0  =  1.0;  double  d0  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	        double    d0    =    1.0;    double  d0  =  1.0;	  	non-compiled	[CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
13	[BUG]  [BUGGY]      double  d0  =  1.0;  Double  d0  =  1.0;  [CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]      double  d0  =  1.0;  Double  d0  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	        double    d0    =    1.0;    Double  d0  =  1.0;	  	non-compiled	[CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
14	[BUG]  [BUGGY]      double  d0  =  1.0;  int  d0  =  1.0;  [CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]      double  d0  =  1.0;  int  d0  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	        double    d0    =    1.0;    int  d0  =  1.0;	  	non-compiled	[CE]  variable  d0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]      double  d0  =  1.0;  d0  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	        double    d0    =    1.0;    d0  =  1.0;	  	compilable	  [FE]  AssertionError  	13	2	add
16	[BUG]  [BUGGY]      double  d0  =  1.0;  d0  =  1.0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]      double  d0  =  1.0;  d0  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	        double    d0    =    1.0;    d0  =  1.0;	  	compilable	  [FE]  AssertionError  	13	2	add
17	[BUG]  [BUGGY]  double  cN  =  getS(n,  dPrev);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getS(n,  dPrev);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getS(n,  dPrev);	      double    cN    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
18	[BUG]  [BUGGY]  double  cN  =  getS(n,  x,  dPrev);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getS(n,  x,  dPrev);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getS(n,  x,  dPrev);	      double    cN    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  double  cN  =  getS(n,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getS(n,  x,  epsilon);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getS(n,  x,  epsilon);	      double    cN    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
20	[BUG]  [BUGGY]  double  dPrev  =  hPrev  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hPrev  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hPrev  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
21	[BUG]  [BUGGY]  double  dPrev  =  hN  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hN  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hN  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
22	[BUG]  [BUGGY]  double  dPrev  =  n  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  n  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  n  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
23	[BUG]  [BUGGY]  double  dPrev  =  cN  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  cN  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  cN  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
24	[BUG]  [BUGGY]  double  dPrev  =  hPrev  +  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hPrev  +  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hPrev  +  getA(n,  x);	      double    dPrev    =    dPrev    +    getA(n,    x);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
25	[BUG]  [BUGGY]  double  dPrev  =  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  getA(n,  x);	      double    dPrev    =    dPrev    +    getA(n,    x);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
26	[BUG]  [BUGGY]  double  dPrev  =  hN  +  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  hN  +  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  hN  +  getA(n,  x);	      double    dPrev    =    dPrev    +    getA(n,    x);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
27	[BUG]  [BUGGY]  double  dPrev  =  n  +  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  n  +  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  n  +  getA(n,  x);	      double    dPrev    =    dPrev    +    getA(n,    x);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
28	[BUG]  [BUGGY]  double  dPrev  =  0.5;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  0.5;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  0.5;	      double    dPrev    =    1.0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
29	[BUG]  [BUGGY]  double  cN  =  1.0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  1.0;	      double    dPrev    =    1.0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
30	[BUG]  [BUGGY]  n  =  getA(n,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  n  =  getA(n,  dPrev);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	n  =  getA(n,  dPrev);	      n    =    getA(n,    x);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
31	[BUG]  [BUGGY]  n  =  getN(n,  x);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  n  =  getN(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	n  =  getN(n,  x);	      n    =    getA(n,    x);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  n  =  getB(n,  x);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  n  =  getB(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	n  =  getB(n,  x);	      n    =    getA(n,    x);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
33	[BUG]  [BUGGY]  double  dPrev  =  10.0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  10.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  10.0;	      double    dPrev    =    0.0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
34	[BUG]  [BUGGY]  double  cN  =  0.0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  0.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  0.0;	      double    dPrev    =    0.0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
35	[BUG]  [BUGGY]  double  p0  =  0.5;  double  p0  =  0.5;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.5;  double  p0  =  0.5;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.5;    double  p0  =  0.5;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
36	[BUG]  [BUGGY]  double  p0  =  0.5;  Double  p0  =  0.5;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.5;  Double  p0  =  0.5;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.5;    Double  p0  =  0.5;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
37	[BUG]  [BUGGY]  double  p0  =  0.5;  int  p0  =  0.5;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.5;  int  p0  =  0.5;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.5;    int  p0  =  0.5;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
38	[BUG]  [BUGGY]  double  p0  =  0.5;  p0  =  0.5;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.5;  p0  =  0.5;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.5;    p0  =  0.5;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  10.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	double  p0  =  10.0;	  double    p0    =    0.0;    	compilable	  [FE]  OutOfRangeException  	7	10	replace
40	[BUG]  [BUGGY]  double  p0  =  10.0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  10.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  p0  =  10.0;	  double    p0    =    0.0;    	compilable	  [FE]  OutOfRangeException  	7	10	replace
41	[BUG]  [BUGGY]  double  d0  =  0.0;  [CE]  cannot  find  symbol  p0  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  d0  =  0.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  d0  =  0.0;	      double    d0    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  p0	14	None	replace
42	[BUG]  [BUGGY]  double  d0  =  0.5;  [CE]  cannot  find  symbol  p0  [FE]      AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  d0  =  0.5;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  d0  =  0.5;	      double    d0    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  p0	14	None	replace
43	[BUG]  [BUGGY]  double  p0  =  0.0;  double  p0  =  0.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  double  p0  =  0.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    double  p0  =  0.0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
44	[BUG]  [BUGGY]  double  p0  =  0.0;  Double  p0  =  0.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  Double  p0  =  0.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    Double  p0  =  0.0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
45	[BUG]  [BUGGY]  double  p0  =  0.0;  int  p0  =  0.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  int  p0  =  0.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    int  p0  =  0.0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
46	[BUG]  [BUGGY]  double  p0  =  0.0;  p0  =  0.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  p0  =  0.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    p0  =  0.0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
47	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q2;  [CE]  cannot  find  symbol  a  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  q2;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  hN  +  b  *  q2;	      double    q2    =    a    *    q1    +    b    *    q2;    	non-compiled	[CE]  cannot  find  symbol  a	15	None	replace
48	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q2;  [CE]  cannot  find  symbol  a  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q2;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  hPrev  +  b  *  q2;	      double    q2    =    a    *    q1    +    b    *    q2;    	non-compiled	[CE]  cannot  find  symbol  a	15	None	replace
49	[BUG]  [BUGGY]  double  cN  =  getA(n,  dPrev);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getA(n,  dPrev);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getA(n,  dPrev);	      double    cN    =    getA(n,    x);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
50	[BUG]  [BUGGY]  double  cN  =  getA(n,  x,  dPrev);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getA(n,  x,  dPrev);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getA(n,  x,  dPrev);	      double    cN    =    getA(n,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	1	None	replace
51	[BUG]  [BUGGY]  double  cN  =  getA(n,  x  +  1);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getA(n,  x  +  1);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getA(n,  x  +  1);	      double    cN    =    getA(n,    x);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  Double  p0  =  1.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	Double  p0  =  1.0;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	2	replace
53	[BUG]  [BUGGY]  Double  p0  =  1.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  Double  p0  =  1.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	Double  p0  =  1.0;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	2	replace
54	[BUG]  [BUGGY]  double  p0  =  0.0;  long  p0  =  0.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  long  p0  =  0.0;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    long  p0  =  0.0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
55	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [CE]  cannot  find  symbol  a  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  q1  +  b  *  q0;	      double    q2    =    a    *    q1    +    b    *    q2;    	non-compiled	[CE]  cannot  find  symbol  a	15	None	replace
56	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [CE]  cannot  find  symbol  a  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  q1  +  b  *  hN;	      double    q2    =    a    *    q1    +    b    *    q2;    	non-compiled	[CE]  cannot  find  symbol  a	15	None	replace
57	[BUG]  [BUGGY]  double  n  =  1.0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  n  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  n  =  1.0;	      double    dPrev    =    1.0;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
58	[BUG]  [BUGGY]  double  cN  =  getS(n,  x  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getS(n,  x  +  1);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getS(n,  x  +  1);	      double    cN    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
59	[BUG]  [BUGGY]  double  dPrev  =  a  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  a  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  a  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	double  p0  =  0.0f;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	6	replace
61	[BUG]  [BUGGY]  double  p0  =  0.0f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0f;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  p0  =  0.0f;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	6	replace
62	[BUG]  [BUGGY]  double  n  =  0.0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  n  =  0.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  n  =  0.0;	      double    dPrev    =    0.0;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
63	[BUG]  [BUGGY]  n  =  getA(n,  x  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  n  =  getA(n,  x  +  1);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	n  =  getA(n,  x  +  1);	      n    =    getA(n,    x);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
64	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hPrev;  [CE]  cannot  find  symbol  a  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  hPrev;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  a  *  q1  +  b  *  hPrev;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	12	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0d;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	add	double  p0  =  1.0d;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	2	replace
66	[BUG]  [BUGGY]  double  p0  =  1.0d;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  1.0d;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  p0  =  1.0d;	  double    p0    =    1.0f;    	compilable	  [FE]  AssertionError  	11	2	replace
67	[BUG]  [BUGGY]  double  dPrev  =  defULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  defULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  defULT_EPSILON;	      double    dPrev    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
68	[BUG]  [BUGGY]  double  dPrev  =  x  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  x  *  DEFAULT_EPSILON;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  x  *  DEFAULT_EPSILON;	      double    dPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
69	[BUG]  [BUGGY]  double  q2  =  1.0;  [CE]  cannot  find  symbol  p0  [FE]                AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  q2  =  1.0;  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  q2  =  1.0;	      double    dPrev    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  p0	5	None	replace
70	[BUG]  [BUGGY]  double  p0  =  0.0;  double  p0  =  0.00;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  p0  =  0.0;  double  p0  =  0.00;  [BUGGY]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double    p0    =    0.0;    double  p0  =  0.00;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
71	[BUG]  [BUGGY]  double  dPrev  =  x  +  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  dPrev  =  x  +  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  dPrev  =  x  +  getA(n,  x);	      double    dPrev    =    dPrev    +    getA(n,    x);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
72	[BUG]  [BUGGY]  double  cN  =  getC(n,  x);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  cN  =  getC(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  cN  =  getC(n,  x);	      double    cN    =    getA(n,    x);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
73	[BUG]  [BUGGY]  double  n  =  getA(n,  x);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;    [BUGGY]  double  n  =  getA(n,  x);  [BUGGY]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	134	134	2	replace	double  n  =  getA(n,  x);	      n    =    getA(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
