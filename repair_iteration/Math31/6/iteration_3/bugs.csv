bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
2	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
3	[BUG]  [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  dPrev,  q1,  q2);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  dPrev,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  dPrev,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
4	[BUG]  [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
5	[BUG]  [BUGGY]  int  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  q1  =  cN;	  q1    =    cN;    int    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	79	None	replace
6	[BUG]  [BUGGY]  p0  =  cN;  int  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  int  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  int  q1  =  cN;	  q1    =    cN;    int    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	79	None	replace
7	[BUG]  [BUGGY]  n  =  cN;  int  q1  =  cN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cN;  int  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN;  int  q1  =  cN;	  q1    =    cN;    int    q1    =    cN;    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2    =    cN;    q2  =  cN;	  	compilable	  [FE]  AssertionError  	82	6	add
9	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;	  	compilable	  [FE]  AssertionError  	82	6	add
10	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CE]  'else'  without  'if'  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
11	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [CE]  'else'  without  'if'  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
12	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [CE]  'else'  without  'if'  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
13	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON);  }  [CE]  'else'  without  'if'  [FE]            OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
15	[BUG]  [BUGGY]  q1  =  q2;  q1  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
17	[BUG]  [BUGGY]  q1  =  p0;  q1  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
19	[BUG]  [BUGGY]  q1  =  dPrev;  q1  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  cN;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
21	[BUG]  [BUGGY]  q2  =  cN;  q1  =  cN;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    	compilable	  [FE]  AssertionError  	46	6	replace
22	[BUG]  [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cN);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cN);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
23	[BUG]  [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
24	[BUG]  [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cPrev);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  cPrev);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
25	[BUG]  [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
26	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
27	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
28	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  /  dPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
29	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p2;  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  p2;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  cannot  find  symbol  p2	5	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  p0;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  AssertionError  	5	10	replace
31	[BUG]  [BUGGY]  q2  =  p0;  q1  =  p0;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  p0;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  AssertionError  	5	10	replace
32	[BUG]  [BUGGY]  n  =  p0;  q1  =  p0;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  p0;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
33	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	78	11	replace
34	[BUG]  [BUGGY]  q1  =  dPrev;  q2  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	78	11	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  AssertionError  	78	10	replace
36	[BUG]  [BUGGY]  q1  =  p0;  q2  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  AssertionError  	78	10	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  AssertionError  	78	2	replace
38	[BUG]  [BUGGY]  q1  =  q2;  q2  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	  [FE]  AssertionError  	78	2	replace
39	[BUG]  [BUGGY]  n  =  cPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cPrev.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cPrev.doubleValue();	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
40	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  cPrev;	  p0    =    p1;    	compilable	  [FE]  OutOfRangeException  	1	7	replace
41	[BUG]  [BUGGY]  p0  =  cPrev;  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cPrev;	  p0    =    p1;    	compilable	  [FE]  OutOfRangeException  	1	7	replace
42	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  b;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  p1	44	None	replace
43	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  b;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  p1	44	None	replace
44	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(p0  -  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  -  cN);	  n    =    Math.abs(cN    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
45	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  p0);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cN  /  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  /  p0);	  n    =    Math.abs(cN    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
46	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
47	[BUG]  [BUGGY]  q1  =  q2  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
48	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
49	[BUG]  [BUGGY]  q1  =  p0  +  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
50	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cPrev  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
51	[BUG]  [BUGGY]  q1  =  cPrev  +  1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cPrev  +  1;	  q1    =    dPrev    +    1;    	compilable	  [FE]  OutOfRangeException  	88	12	replace
52	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
53	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
54	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERG  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERG  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERG	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
55	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
56	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor;	          p0    =    p0;    p0    =    p0;    this.scaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	43	None	replace
57	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  this.scaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p2;  this.scaleFactor  =  scaleFactor;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p2;  this.scaleFactor  =  scaleFactor;	          p0    =    p0;    p0    =    p0;    this.scaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p2	43	None	replace
58	[BUG]  [BUGGY]  q1  =  q2;  (q1  =  p0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  (q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  (q1  =  p0;	  q1    =    p0;    (q1    =    p0;    	non-compiled	[CE]  ')'  expected	67	None	replace
59	[BUG]  [BUGGY]  q1  =  cN;  (q1  =  p0;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  (q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  (q1  =  p0;	  q1    =    p0;    (q1    =    p0;    	non-compiled	[CE]  ')'  expected	67	None	replace
60	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cPrev,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
61	[BUG]  [BUGGY]  int  q1  =  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  q1  =  dPrev;	  q1    =    dPrev;    int    q1    =    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
62	[BUG]  [BUGGY]  n  =  dPrev;  int  q1  =  dPrev;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  dPrev;  int  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  dPrev;  int  q1  =  dPrev;	  q1    =    dPrev;    int    q1    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
63	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
64	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
65	[BUG]  [BUGGY]  n  =  Math.max(p0,  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(p0,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(p0,  epsilon);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
66	[BUG]  [BUGGY]  n  =  Math.min(p0,  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(p0,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  cPrev);	  n    =    Math.min(cPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
67	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(cPrev,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cPrev,  hN);	  n    =    Math.min(cPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
68	[BUG]  [BUGGY]  n  =  Math.min(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(hN,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(hN,  dPrev);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
69	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q1  =  q2;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  AssertionError  	36	2	replace
71	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q2;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  AssertionError  	36	2	replace
72	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q1  =  dPrev;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
73	[BUG]  [BUGGY]  q1  =  cN;  q1  =  dPrev;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  dPrev;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
74	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q1  =  dPrev;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
75	[BUG]  [BUGGY]  q1  =  q2;  q1  =  dPrev;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  dPrev;	  q1    =    dPrev;    q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
76	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cPrev  /  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  /  p0);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
77	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  *  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  *  p0);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0;  q1  =  q2;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  AssertionError  	53	2	replace
79	[BUG]  [BUGGY]  q1  =  p0;  q1  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  q2;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  AssertionError  	53	2	replace
80	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  0;  q1  =  0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  0;  q1  =  0;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  ConvergenceException  	53	12	replace
81	[BUG]  [BUGGY]  q1  =  0;  q1  =  0;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  0;  q1  =  0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  0;  q1  =  0;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  ConvergenceException  	53	12	replace
82	[BUG]  [BUGGY]  q1  =  cN;  q1  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  dprev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  dprev;	  q1    =    dPrev;    q1    =    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	39	None	replace
83	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(dPrev,  p0  -  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  p0  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
84	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
85	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cPrev,  dPrev  -  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
86	[BUG]  [BUGGY]  n  =  Math.max(cN,  hPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cN,  hPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  hPrev);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
87	[BUG]  [BUGGY]  n  =  Math.max(p0,  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(p0,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(p0,  cN);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	6	replace
89	[BUG]  [BUGGY]  q1  =  cN;  q2  =  dPrev;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	6	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q2  =  q2;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	2	replace
91	[BUG]  [BUGGY]  q1  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  q2;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	2	replace
92	[BUG]  [BUGGY]  timeout  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cPrev;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	timeout	38	1	replace
93	[BUG]  [BUGGY]  q1  =  cPrev;  q2  =  dPrev;  timeout  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cPrev;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	timeout	38	1	replace
94	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cPrev,  dPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
95	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	42	None	replace
96	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	42	None	replace
97	[BUG]  [BUGGY]  q1  =  q0;  q1  =  q2;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q0;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q0;  q1  =  q2;	  q1    =    q1;    q1    =    q2;    	non-compiled	[CE]  cannot  find  symbol  q0	55	None	replace
98	[BUG]  [BUGGY]  q1  =  qN;  q1  =  q2;  [CE]  cannot  find  symbol  qN  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  qN;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  qN;  q1  =  q2;	  q1    =    q1;    q1    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	55	None	replace
99	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
100	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  cN,  p0);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	10	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
102	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q1  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
103	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q2  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	35	11	add
104	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q2  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	35	11	add
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cPrev;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q1  =  cPrev;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
106	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cPrev;  q1  =  dPrev;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cPrev;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  cPrev;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cN;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q1  =  cN;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
108	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cN;  q1  =  dPrev;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  cN;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  cN;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
109	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(p0  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
110	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  *  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
111	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	41	None	replace
112	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p1;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	41	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q2    =    cN;    q1  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	77	6	add
114	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    q1  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	77	6	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q2    =    cN;    q2  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	77	6	add
116	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  q2  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    q2  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	77	6	add
117	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN);  q2  =  cN;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN);  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    q1  =  cN);  q2  =  cN;	  	non-compiled	[CE]  ';'  expected	77	None	add
118	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  sq1  =  cN;  q2  =  cN;  [CE]  cannot  find  symbol  sq1  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  sq1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    sq1  =  cN;  q2  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  sq1	77	None	add
119	[BUG]  [BUGGY]  q1  =  p0;  (q1  =  cN;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  (q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  (q1  =  cN;	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  ')'  expected	81	None	replace
120	[BUG]  [BUGGY]  q1  =  q2;  (q1  =  cN;  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  (q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  (q1  =  cN;	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  ')'  expected	81	None	replace
121	[BUG]  [BUGGY]  q1  =  dPrev;  (q1  =  cN;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  (q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev;  (q1  =  cN;	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  ')'  expected	81	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    	compilable	  [FE]  AssertionError  	4	10	replace
123	[BUG]  [BUGGY]  q1  =  q2;  q1  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    	compilable	  [FE]  AssertionError  	4	10	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    	compilable	  [FE]  AssertionError  	4	10	replace
125	[BUG]  [BUGGY]  q1  =  cN;  q1  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    	compilable	  [FE]  AssertionError  	4	10	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q1;    q1  =  q1;  q1  =  q1;	  	compilable	  [FE]  AssertionError  	52	2	add
127	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q1  =  q1;  q1  =  q1;	  	compilable	  [FE]  AssertionError  	52	2	add
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q1;    q1  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	52	2	add
129	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q1  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	52	2	add
130	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q1;    q1  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	52	11	add
131	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q2  =  q1;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q1  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	52	11	add
132	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q1,  n);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q1;  q1  =  q1,  n);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q1  =  q1;  q1  =  q1,  n);	  	non-compiled	[CE]  ';'  expected	52	None	add
133	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  -  cPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
134	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  p0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  p0);	  n    =    Math.min(i,    p0);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
135	[BUG]  [BUGGY]  n  =  Math.min(p0,  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(p0,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  p0);	  n    =    Math.min(i,    p0);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q2    =    p0;    q1  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	65	10	add
137	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  q1  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    q1  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	65	10	add
138	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  int  q1  =  p0;  q2  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  int  q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    int  q1  =  p0;  q2  =  p0;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
139	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  q1  =  p0;  q2)  =  p0;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  q1  =  p0;  q2)  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    q1  =  p0;  q2)  =  p0;	  	non-compiled	[CE]  not  a  statement	65	None	add
140	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  sq1  =  p0;  q2  =  p0;  [CE]  cannot  find  symbol  sq1  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  sq1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    sq1  =  p0;  q2  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  sq1	65	None	add
141	[BUG]  [BUGGY]  p0  =  p;  [CE]  cannot  find  symbol  p  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p;	  p0    =    epsilon;    timeout    	non-compiled	[CE]  cannot  find  symbol  p	93	None	replace
142	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
143	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cPrev,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  epsilon);	  n    =    Math.max(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	71	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  p0;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	  [FE]  AssertionError  	8	10	replace
145	[BUG]  [BUGGY]  dPrev  =  p0;  q1  =  p0;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  p0;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	  [FE]  AssertionError  	8	10	replace
146	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  p0;  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	timeout	8	1	replace
147	[BUG]  [BUGGY]  dPrev  =  p0;  q2  =  p0;  timeout  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  p0;  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	timeout	8	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q2;    q1  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
149	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q1  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q2  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q2;    q2  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
151	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q2  =  q1;  q1  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q2  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q2  =  q1;  q1  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q2;    q1  =  q1;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
153	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q2  =  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q1  =  q1;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	54	2	add
154	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  sq1  =  q1;  q1  =  q2;  [CE]  cannot  find  symbol  sq1  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  sq1  =  q1;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    sq1  =  q1;  q1  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  sq1	54	None	add
155	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p2;  initializeScaleFactor();  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  p2;  initializeScaleFactor();  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  p2;  initializeScaleFactor();	  q1    =    p0;    q1    =    p0;    initializeScaleFactor();    	non-compiled	[CE]  cannot  find  symbol  p2	100	None	replace
156	[BUG]  [BUGGY]  q1  =  cN;  q1  =  p0;  initializeScaleFactor();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  p0;  initializeScaleFactor();  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  p0;  initializeScaleFactor();	  q1    =    p0;    q1    =    p0;    initializeScaleFactor();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
157	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
158	[BUG]  [BUGGY]  q1  =  p0  /  q2;  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
159	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2  /  cN;	  q1    =    cN    /    q2;    timeout    	compilable	  [FE]  ConvergenceException  	61	12	replace
160	[BUG]  [BUGGY]  q1  =  q2  /  cN;  [FE]  ConvergenceException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2  /  cN;	  q1    =    cN    /    q2;    timeout    	compilable	  [FE]  ConvergenceException  	61	12	replace
161	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
162	[BUG]  [BUGGY]  q1  =  dPrev  /  q2;  timeout  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
163	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	7	replace
164	[BUG]  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	7	replace
165	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  p0;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
166	[BUG]  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  p0;  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  p0;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
167	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  epsilon;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  epsilon;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	timeout	50	1	replace
168	[BUG]  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  epsilon;  timeout  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  epsilon;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  epsilon;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	timeout	50	1	replace
169	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  q1;  cPrev  =  cN  /  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
170	[BUG]  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  q1;  cPrev  =  cN  /  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
171	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  p0  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0    =    epsilon;    p0  =  epsilon;	  timeout    	compilable	  [FE]  ConvergenceException  	92	11	add
172	[BUG]  [BUGGY]  p0  =  epsilon;  p0  =  epsilon;  [FE]  ConvergenceException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  p0  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    p0  =  epsilon;	  timeout    	compilable	  [FE]  ConvergenceException  	92	11	add
173	[BUG]  [BUGGY]  p0  =  epsilon;  p1  =  epsilon;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  p1  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    p1  =  epsilon;	  timeout    	non-compiled	[CE]  cannot  find  symbol  p1	92	None	add
174	[BUG]  [BUGGY]  p0  =  epsilon;  P0  =  epsilon;  [CE]  cannot  find  symbol  P0  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  P0  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    P0  =  epsilon;	  timeout    	non-compiled	[CE]  cannot  find  symbol  P0	92	None	add
175	[BUG]  [BUGGY]  p0  =  epsilon;  p0  =  epsileon;  [CE]  cannot  find  symbol  epsileon  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  p0  =  epsileon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    p0  =  epsileon;	  timeout    	non-compiled	[CE]  cannot  find  symbol  epsileon	92	None	add
176	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cN  /  dPrev,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  /  dPrev,  p0);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	31	None	replace
177	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(p0  -  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  -  cPrev);	  n    =    Math.abs(p0    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	2	replace
179	[BUG]  [BUGGY]  q1  =  q2;  q2  =  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	2	replace
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	6	replace
181	[BUG]  [BUGGY]  q1  =  cN;  q2  =  q1;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	6	replace
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	10	replace
183	[BUG]  [BUGGY]  q1  =  p0;  q2  =  q1;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q2  =  q1;	  q1    =    q1;    q2    =    q1;    	compilable	  [FE]  AssertionError  	57	10	replace
184	[BUG]  [BUGGY]  q1  =  q0;  q2  =  q0;  [CE]  cannot  find  symbol  q0  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q0;  q2  =  q0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q0;  q2  =  q0;	  q1    =    q1;    q2    =    q1;    	non-compiled	[CE]  cannot  find  symbol  q0	57	None	replace
185	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  q2  =  p0;  [CE]  'else'  without  'if'  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  p0;  }  else  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
186	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  {  q2  =  p0;  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  {  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  p0;  }  else  {  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
187	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0,  dPrev);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(cN,  p0,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cN,  p0,  dPrev);	  n    =    Math.min(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
188	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  p0,  cN,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(dPrev,  p0,  cN,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  p0,  cN,  epsilon);	  n    =    Math.min(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	12	None	replace
189	[BUG]  [BUGGY]  n  =  Math.min(p0,  dPrev,  cN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(p0,  dPrev,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  dPrev,  cN);	  n    =    Math.min(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	40	2	add
191	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	40	2	add
192	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	40	None	add
193	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	40	None	add
194	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    P0  =  p0;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  P0	40	None	add
195	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
196	[BUG]  [BUGGY]  q1  =  p0;  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  double  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  double  q1  =  cN;	  q1    =    cN;    double    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
197	[BUG]  [BUGGY]  p0  =  cN;  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  double  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  double  q1  =  cN;	  q1    =    cN;    double    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
198	[BUG]  [BUGGY]  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  double  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	double  q1  =  cN;	  q1    =    cN;    double    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
199	[BUG]  [BUGGY]  n  =  Math.max(p0,  n);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(p0,  n);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(p0,  n);	  n    =    Math.max(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
200	[BUG]  [BUGGY]  n  =  Math.max(n,  cPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(n,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  cPrev);	  n    =    Math.max(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
201	[BUG]  [BUGGY]  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  p0  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  p0  =  dPrev;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
202	[BUG]  [BUGGY]  int  p0  =  epsilon;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  p0  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  p0  =  epsilon;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
203	[BUG]  [BUGGY]  int  p0  =  cN;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  p0  =  cN;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
204	[BUG]  [BUGGY]  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
205	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  p0;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
206	[BUG]  [BUGGY]  q2  =  p0;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  p0;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
207	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  dPrev;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
208	[BUG]  [BUGGY]  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  dPrev;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
209	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  cN  +  1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
210	[BUG]  [BUGGY]  q2  =  cN  +  1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN  +  1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
211	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  p0  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
212	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  cN  *  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
213	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
214	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q1    =    cN;    q1  =  cN;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	2	add
216	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q1  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    q1  =  cN;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	2	add
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q1    =    cN;    q1  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
218	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    q1  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q1    =    cN;    q2  =  cN;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
220	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q1  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    q2  =  cN;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q1    =    cN;    q2  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
222	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q2  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    q2  =  cN;  q2  =  cN;	  	compilable	  [FE]  AssertionError  	45	6	add
223	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p2;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	97	None	replace
224	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p1;  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p2;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	97	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q1    =    p0;    q1  =  p0;  q1  =  p0;	  	compilable	  [FE]  AssertionError  	3	2	add
226	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q1  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    q1  =  p0;  q1  =  p0;	  	compilable	  [FE]  AssertionError  	3	2	add
227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q1    =    p0;    q1  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
228	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    q1  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q1    =    p0;    q2  =  p0;  q1  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
230	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q1  =  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    q2  =  p0;  q1  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
231	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  sq1  =  p0;  q1  =  p0;  [CE]  cannot  find  symbol  sq1  [FE]          AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  sq1  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    sq1  =  p0;  q1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  sq1	3	None	add
232	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q2    =    q1;    q1  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	56	11	add
233	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2  =  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    q1  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	56	11	add
234	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q2  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q2    =    q1;    q2  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	56	11	add
235	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  q2  =  q1;  q2  =  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q2  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    q2  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	56	11	add
236	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2  =  q1,  n);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2  =  q1,  n);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    q1  =  q1;  q2  =  q1,  n);	  	non-compiled	[CE]  ';'  expected	56	None	add
237	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  sq1  =  q1;  q2  =  q1;  [CE]  cannot  find  symbol  sq1  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  sq1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    sq1  =  q1;  q2  =  q1;	  	non-compiled	[CE]  cannot  find  symbol  sq1	56	None	add
238	[BUG]  [BUGGY]  q1  =  p0;  (q2  =  p0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  (q2  =  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  (q2  =  p0);	  q1    =    p0;    (q1    =    p0);    	non-compiled	[CE]  not  a  statement	68	None	replace
239	[BUG]  [BUGGY]  q1  =  p0;  (q1  =  q2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  (q1  =  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  (q1  =  q2);	  q1    =    p0;    (q1    =    p0);    	non-compiled	[CE]  not  a  statement	68	None	replace
240	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  p0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cPrev  *  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  *  p0);	  n    =    Math.abs(cPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN    -    1;    q1  =  cN  -  1;	  	compilable	  [FE]  AssertionError  	62	2	add
242	[BUG]  [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    q1  =  cN  -  1;	  	compilable	  [FE]  AssertionError  	62	2	add
243	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q2  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN    -    1;    q2  =  cN  -  1;	  	compilable	  [FE]  OutOfRangeException  	62	11	add
244	[BUG]  [BUGGY]  q1  =  cN  -  1;  q2  =  cN  -  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q2  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    q2  =  cN  -  1;	  	compilable	  [FE]  OutOfRangeException  	62	11	add
245	[BUG]  [BUGGY]  q1  =  cN  -  1;  int  q1  =  cN  -  1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  int  q1  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    int  q1  =  cN  -  1;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
246	[BUG]  [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  1;  }  n++;  [CE]  illegal  start  of  type  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  1;  }  n++;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    q1  =  cN  -  1;  }  n++;	  	non-compiled	[CE]  illegal  start  of  type	62	None	add
247	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  P0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  P0  =  p2;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	74	None	replace
248	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  P0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  P0  =  p1;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	74	None	replace
249	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p1  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	98	None	replace
250	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p1  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	98	None	replace
251	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p0;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p2;  p1  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	98	None	replace
252	[BUG]  [BUGGY]  n  =  Math.min(p0,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(p0,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  cN);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
253	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q1);  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q1);	  q1    =    q1;    q1    =    q1);    	non-compiled	[CE]  ';'  expected	58	None	replace
254	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q2);  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q2);	  q1    =    q1;    q1    =    q1);    	non-compiled	[CE]  ';'  expected	58	None	replace
255	[BUG]  [BUGGY]  q1  =  p0;  q1  =  q1);  [CE]  ';'  expected  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  q1);	  q1    =    q1;    q1    =    q1);    	non-compiled	[CE]  ';'  expected	58	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q1  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    dPrev    +    1;    q1  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	87	2	add
257	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  q1  =  dPrev  +  1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q1  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev    +    1;    q1  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	87	2	add
258	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  int  q1  =  dPrev  +  1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  int  q1  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev    +    1;    int  q1  =  dPrev  +  1;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
259	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q2  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    dPrev    +    1;    q2  =  dPrev  +  1;	  	compilable	  [FE]  OutOfRangeException  	87	12	add
260	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  q2  =  dPrev  +  1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q2  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev    +    1;    q2  =  dPrev  +  1;	  	compilable	  [FE]  OutOfRangeException  	87	12	add
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q1  =  cN  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    dPrev    +    1;    q1  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	87	2	add
262	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  q1  =  cN  +  1;  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q1  =  cN  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev    +    1;    q1  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	87	2	add
263	[BUG]  [BUGGY]  int  q1  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  q1  =  p0;	  q1    =    p0;    int    q1    =    p0;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	64	None	replace
264	[BUG]  [BUGGY]  n  =  p0;  int  q1  =  p0;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  p0;  int  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  p0;  int  q1  =  p0;	  q1    =    p0;    int    q1    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
265	[BUG]  [BUGGY]  p0  =  p0;  int  q1  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  int  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  int  q1  =  p0;	  q1    =    p0;    int    q1    =    p0;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	64	None	replace
266	[BUG]  [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	94	None	replace
267	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	94	None	replace
268	[BUG]  [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	94	None	replace
269	[BUG]  [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
270	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q2    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	37	11	add
271	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	37	11	add
272	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dPrev;  q2  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dPrev;  q2  =  dprev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    q1  =  dPrev;  q2  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	37	None	add
273	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  sq1  =  dPrev;  q2  =  dPrev;  [CE]  cannot  find  symbol  sq1  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  sq1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    sq1  =  dPrev;  q2  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  sq1	37	None	add
274	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  q2  =  cN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  OutOfRangeException  	47	7	replace
275	[BUG]  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  q2  =  cN;  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  q2  =  cN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  OutOfRangeException  	47	7	replace
276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    hN;    q1  =  hN;	  timeout    	compilable	  [FE]  AssertionError  	23	2	add
277	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN;	  timeout    	compilable	  [FE]  AssertionError  	23	2	add
278	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q2  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    hN;    q2  =  hN;	  timeout    	compilable	timeout	23	1	add
279	[BUG]  [BUGGY]  q1  =  hN;  q2  =  hN;  timeout  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q2  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q2  =  hN;	  timeout    	compilable	timeout	23	1	add
280	[BUG]  [BUGGY]  q1  =  hN;  int  q1  =  hN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  int  q1  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    int  q1  =  hN;	  timeout    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	23	None	add
281	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN);	  timeout    	non-compiled	[CE]  ';'  expected	23	None	add
282	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  cPrev);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
283	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q1,;  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q1,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q1,;	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
284	[BUG]  [BUGGY]  q1  =  p0;  q1  =  q1,;  [CE]  ';'  expected  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  q1,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  q1,;	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
285	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q1,  [CE]  ';'  expected  [FE]                    OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q1,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q1,	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
286	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q2  =  p0;	  q1    =    p0;    q2    =    p0;    	compilable	  [FE]  AssertionError  	66	6	replace
287	[BUG]  [BUGGY]  q1  =  cN;  q2  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q2  =  p0;	  q1    =    p0;    q2    =    p0;    	compilable	  [FE]  AssertionError  	66	6	replace
288	[BUG]  [BUGGY]  q1  =  q2;  q2  =  q0;  [CE]  cannot  find  symbol  q0  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  q0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  q0;	  q1    =    p0;    q2    =    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	66	None	replace
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q2  =  p0;	  q1    =    p0;    q2    =    p0;    	compilable	  [FE]  AssertionError  	66	2	replace
290	[BUG]  [BUGGY]  q1  =  q2;  q2  =  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  p0;	  q1    =    p0;    q2    =    p0;    	compilable	  [FE]  AssertionError  	66	2	replace
291	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0    =    dPrev;    p0  =  dPrev;	  timeout    	compilable	  [FE]  ConvergenceException  	75	11	add
292	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p0  =  dPrev;	  timeout    	compilable	  [FE]  ConvergenceException  	75	11	add
293	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p0  =  dPrev.;	  timeout    	non-compiled	[CE]  <identifier>  expected	75	None	add
294	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p0  =  dPrev);	  timeout    	non-compiled	[CE]  ';'  expected	75	None	add
295	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
296	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUE	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
297	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFA	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
298	[BUG]  [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DE  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DE  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(dPrev  ==  epsilon)  {  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DE	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
299	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	90	7	add
300	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	90	7	add
301	[BUG]  [BUGGY]  p0  =  cN;  p1  =  cN;  [CE]  cannot  find  symbol  p1  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p1  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	90	None	add
302	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN);	  	non-compiled	[CE]  ';'  expected	90	None	add
303	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN.;  [CE]  <identifier>  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN.;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN.;	  	non-compiled	[CE]  <identifier>  expected	90	None	add
304	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN    /    q2;    q1  =  cN  /  q2;	  timeout    	compilable	  [FE]  AssertionError  	60	2	add
305	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cN  /  q2;	  timeout    	compilable	  [FE]  AssertionError  	60	2	add
306	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cN  /  q2);	  timeout    	non-compiled	[CE]  ';'  expected	60	None	add
307	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2,;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cN  /  q2,;	  timeout    	non-compiled	[CE]  ';'  expected	60	None	add
308	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cP  /  q2;  [CE]  cannot  find  symbol  cP  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cP  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cP  /  q2;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cP	60	None	add
309	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN    /    q2;    q2  =  cN  /  q2;	  timeout    	compilable	timeout	60	1	add
310	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q2  =  cN  /  q2;  timeout  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q2  =  cN  /  q2;	  timeout    	compilable	timeout	60	1	add
311	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  p0  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
312	[BUG]  [BUGGY]  q1  =  p0  -  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
313	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
314	[BUG]  [BUGGY]  q1  =  q2  -  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
315	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN  /  1;	  q1    =    cN    -    1;    	compilable	  [FE]  AssertionError  	63	6	replace
316	[BUG]  [BUGGY]  q1  =  cN  /  1;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN  /  1;	  q1    =    cN    -    1;    	compilable	  [FE]  AssertionError  	63	6	replace
317	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
318	[BUG]  [BUGGY]  q1  =  dPrev  -  1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev  -  1;	  q1    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	63	12	replace
319	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(epsilon,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(epsilon,  hN);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
320	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(epsilon,  dPrev);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
321	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(epsilon,  cPrev);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
322	[BUG]  [BUGGY]  q1  =  scaleFactor;  q1  =  p0;  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  scaleFactor;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  scaleFactor;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    initializeScaleFactor();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	100	None	replace
323	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  int  q1  =  p0;  q1  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  int  q1  =  p0;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    int  q1  =  p0;  q1  =  p0;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
324	[BUG]  [BUGGY]  p0  =  epsilon;  int  p0  =  epsilon;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  int  p0  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    int  p0  =  epsilon;	  timeout    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	92	None	add
325	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  p0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(deltaN,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(deltaN,  p0);	  n    =    Math.min(i,    p0);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
326	[BUG]  [BUGGY]  n  =  Math.min(n,  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(n,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(n,  p0);	  n    =    Math.min(i,    p0);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
327	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p0;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  (p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	73	None	replace
328	[BUG]  [BUGGY]  p0  =  p2;  (p0  =  p0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p2;  (p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	73	None	replace
329	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  int  p0  =  p0;  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  int  p0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    int  p0  =  p0;  p0  =  p0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
330	[BUG]  [BUGGY]  q2  =  cN;  (q1  =  q2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  (q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN;  (q1  =  q2;	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  ')'  expected	81	None	replace
331	[BUG]  [BUGGY]  q2  =  cN;  (q1  =  q2);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  (q1  =  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN;  (q1  =  q2);	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  not  a  statement	81	None	replace
332	[BUG]  [BUGGY]  q1  =  q2;  q2  =  qN;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  qN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  qN;	  q1    =    cN;    q2    =    cN;    	non-compiled	[CE]  cannot  find  symbol  qN	78	None	replace
333	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN  /  q2;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	timeout	78	1	replace
334	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q2  =  cN;  timeout  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN  /  q2;  q2  =  cN;	  q1    =    cN;    q2    =    cN;    	compilable	timeout	78	1	replace
335	[BUG]  [BUGGY]  q1  =  q2;  int  q1  =  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  int  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  int  q1  =  dPrev;	  q1    =    dPrev;    int    q1    =    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
336	[BUG]  [BUGGY]  q1  =  q2;  int  q1  =  q2;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  int  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  int  q1  =  q2;	  q1    =    dPrev;    int    q1    =    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
337	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  int  q1  =  dPrev;  q2  =  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  int  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    int  q1  =  dPrev;  q2  =  dPrev;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
338	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dprev;  q2  =  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  dprev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    q1  =  dprev;  q2  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	37	None	add
339	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  dPrev);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
340	[BUG]  [BUGGY]  q1  =  cN  -  1;  (q1  =  cN  -  1;  [CE]  ')'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  (q1  =  cN  -  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    (q1  =  cN  -  1;	  	non-compiled	[CE]  ')'  expected	62	None	add
341	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  sq1  =  q1;  q1  =  q1;  [CE]  cannot  find  symbol  sq1  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  sq1  =  q1;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    sq1  =  q1;  q1  =  q1;	  	non-compiled	[CE]  cannot  find  symbol  sq1	52	None	add
342	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  int  q1  =  q1;  q2  =  q1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  int  q1  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    int  q1  =  q1;  q2  =  q1;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	56	None	add
343	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2)  =  q1;  [CE]  not  a  statement  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1;  q2)  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    q1  =  q1;  q2)  =  q1;	  	non-compiled	[CE]  not  a  statement	56	None	add
344	[BUG]  [BUGGY]  n  =  b.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  b.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  b.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
345	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  q1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
346	[BUG]  [BUGGY]  q2  =  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
347	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	35	11	add
348	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  dPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	35	11	add
349	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q1  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  dPrev;  q1  =  dprev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  dPrev;  q1  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	35	None	add
350	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  q2;	  p0    =    p1;    	compilable	timeout	1	1	replace
351	[BUG]  [BUGGY]  p0  =  q2;  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  q2;	  p0    =    p1;    	compilable	timeout	1	1	replace
352	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  q1  =  dprev  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev  +  1;  q1  =  dprev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev    +    1;    q1  =  dprev  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	87	None	add
353	[BUG]  [BUGGY]  q1  =  q2;  (q1  =  p0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  (q1  =  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  (q1  =  p0);	  q1    =    p0;    (q1    =    p0);    	non-compiled	[CE]  not  a  statement	68	None	replace
354	[BUG]  [BUGGY]  q1  =  cN;  (q1  =  p0);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  (q1  =  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  (q1  =  p0);	  q1    =    p0;    (q1    =    p0);    	non-compiled	[CE]  not  a  statement	68	None	replace
355	[BUG]  [BUGGY]  (q1  =  p0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  (q1  =  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	(q1  =  p0);	  q1    =    p0;    (q1    =    p0);    	non-compiled	[CE]  not  a  statement	68	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN;  q1  =  q2;	  q1    =    dPrev;    q1    =    dprev;    	compilable	  [FE]  AssertionError  	39	2	replace
357	[BUG]  [BUGGY]  q1  =  cN;  q1  =  q2;  [FE]  AssertionError  [FE]            OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  q2;	  q1    =    dPrev;    q1    =    dprev;    	compilable	  [FE]  AssertionError  	39	2	replace
358	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q1;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  q1;  q2  =  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  OutOfRangeException  	49	11	replace
359	[BUG]  [BUGGY]  q2  =  q1;  q2  =  q2;  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q1;  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q1;  q2  =  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  OutOfRangeException  	49	11	replace
360	[BUG]  [BUGGY]  q2  =  qN;  q1  =  cN;  [CE]  cannot  find  symbol  qN  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  qN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  qN;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  cannot  find  symbol  qN	49	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q2;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  q2;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  AssertionError  	47	6	replace
362	[BUG]  [BUGGY]  q2  =  q2;  q1  =  cN;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q2;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q2;  q1  =  cN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	compilable	  [FE]  AssertionError  	47	6	replace
363	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q0;  [CE]  cannot  find  symbol  q0  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	99	None	replace
364	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  p0;  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	  [FE]  OutOfRangeException  	8	11	replace
365	[BUG]  [BUGGY]  q2  =  p0;  q2  =  p0;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  p0;  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    	compilable	  [FE]  OutOfRangeException  	8	11	replace
366	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q1  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
367	[BUG]  [BUGGY]  q1  =  q1  /  q2;  timeout  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q1  /  q2;	  q1    =    cN    /    q2;    timeout    	compilable	timeout	61	1	replace
368	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  (q1  =  p0;  q2  =  p0;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  (q1  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    (q1  =  p0;  q2  =  p0;	  	non-compiled	[CE]  ')'  expected	65	None	add
369	[BUG]  [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
370	[BUG]  [BUGGY]  if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
371	[BUG]  [BUGGY]  if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  0.0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
372	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  p0,  hN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(dPrev,  p0,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  p0,  hN);	  n    =    Math.min(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
373	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  p0,  cN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                      AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(epsilon,  p0,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(epsilon,  p0,  cN);	  n    =    Math.min(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
374	[BUG]  [BUGGY]  q2  =  q1;  q2  =  q1,;  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q1;  q2  =  q1,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q1;  q2  =  q1,;	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
375	[BUG]  [BUGGY]  q1  =  p0;  q1  =  q1,  q2;  [CE]  ';'  expected  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  q1  =  q1,  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  q1  =  q1,  q2;	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
376	[BUG]  [BUGGY]  q1  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	94	None	replace
377	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q1);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	94	None	replace
378	[BUG]  [BUGGY]  p0  =  dPrev;  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  int  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
379	[BUG]  [BUGGY]  p0  =  p1;  int  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  int  p0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  int  p0  =  p2;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	72	None	replace
380	[BUG]  [BUGGY]  p0  =  p1;  int  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  int  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	72	None	replace
381	[BUG]  [BUGGY]  p0  =  p;  p1  =  p2;  [CE]  cannot  find  symbol  p  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p;  p1  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p	98	None	replace
382	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  sq1  =  cN;  q1  =  cN;  [CE]  cannot  find  symbol  sq1  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  sq1  =  cN;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    sq1  =  cN;  q1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  sq1	45	None	add
383	[BUG]  [BUGGY]  q2  =  qN;  q2  =  qN;  [CE]  cannot  find  symbol  qN  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  qN;  q2  =  qN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  qN;  q2  =  qN;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	non-compiled	[CE]  cannot  find  symbol  qN	50	None	replace
384	[BUG]  [BUGGY]  n  =  Math.min(p0,  p2);  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(p0,  p2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  p2);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  cannot  find  symbol  p2	9	None	replace
385	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  this.scaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p0;  this.scaleFactor  =  scaleFactor;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p0;  this.scaleFactor  =  scaleFactor;	          p0    =    p0;    p0    =    p0;    this.scaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	43	None	replace
386	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p0;  lastScaleFactor  =  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p0;  lastScaleFactor  =  b;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	44	None	replace
387	[BUG]  [BUGGY]  n  =  Math.min(n,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(n,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(n,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
388	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(dPrev,  hN  -  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  hN  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	102	None	replace
389	[BUG]  [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
390	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  q1);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
391	[BUG]  [BUGGY]  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
392	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	90	None	add
393	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	90	None	add
394	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [CE]  illegal  start  of  type  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN;  }  p0  =  cN;	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
395	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2.;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2.;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cN  /  q2.;	  timeout    	non-compiled	[CE]  <identifier>  expected	60	None	add
396	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  int  q1  =  cN;  q2  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  int  q1  =  cN;  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    int  q1  =  cN;  q2  =  cN;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	77	None	add
397	[BUG]  [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN;  q2)  =  cN;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q2  =  cN;  q1  =  cN;  q2)  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q2    =    cN;    q1  =  cN;  q2)  =  cN;	  	non-compiled	[CE]  not  a  statement	77	None	add
398	[BUG]  [BUGGY]  n  =  Math.max(n,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(n,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
399	[BUG]  [BUGGY]  n  =  Math.max(cN,  hN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(cN,  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q1  =  q1;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  AssertionError  	53	2	replace
401	[BUG]  [BUGGY]  q1  =  q2;  q1  =  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q1  =  q1;	  q1    =    q1;    q1    =    q1;    	compilable	  [FE]  AssertionError  	53	2	replace
402	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  p0);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(p0  -  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  -  p0);	  n    =    Math.abs(p0    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
403	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  hPrev;	  p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	91	7	replace
404	[BUG]  [BUGGY]  p0  =  hPrev;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  hPrev;	  p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	91	7	replace
405	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p0  =  dprev;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	75	None	add
406	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p1  =  dPrev;	  timeout    	non-compiled	[CE]  cannot  find  symbol  p1	75	None	add
407	[BUG]  [BUGGY]  q1  =  q2;  int  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  int  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  int  q1  =  cN;	  q1    =    cN;    int    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	79	None	replace
408	[BUG]  [BUGGY]  n  =  q1;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  q1;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  q1;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
409	[BUG]  [BUGGY]  q1  =  q2;  (q1  =  q0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  (q1  =  q0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  (q1  =  q0;	  q1    =    p0;    (q1    =    p0;    	non-compiled	[CE]  ')'  expected	67	None	replace
410	[BUG]  [BUGGY]  q1  =  p0;  (q1  =  q2;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  (q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  (q1  =  q2;	  q1    =    p0;    (q1    =    p0;    	non-compiled	[CE]  ')'  expected	67	None	replace
411	[BUG]  [BUGGY]  q2  =  q0;  q1  =  q2;  [CE]  cannot  find  symbol  q0  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q0;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q0;  q1  =  q2;	  q1    =    p0;    q1    =    p0;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	non-compiled	[CE]  cannot  find  symbol  q0	7	None	replace
412	[BUG]  [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED	  q1    =    p0;    q1    =    p0;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
413	[BUG]  [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,	  q1    =    p0;    q1    =    p0;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
414	[BUG]  [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	if(q1  ==  p0)  {  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION	  q1    =    p0;    q1    =    p0;    }    else    if(n    ==    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON);    }    	non-compiled	[CE]  ')'  expected	6	None	replace
415	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p0;  lastScaleFactor  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p0;  lastScaleFactor  =  cN;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	42	None	replace
416	[BUG]  [BUGGY]  q2  =  cN;  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  double  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN;  double  q1  =  cN;	  q1    =    cN;    double    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
417	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  P0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	74	None	replace
418	[BUG]  [BUGGY]  p0  =  p2;  P0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p2;  P0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	74	None	replace
419	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q1  =  q1;  q1  =  q2);	  	non-compiled	[CE]  ';'  expected	54	None	add
420	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2,  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q1  =  q1;  q1  =  q2,	  	non-compiled	[CE]  ';'  expected	54	None	add
421	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p2;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	41	None	replace
422	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	41	None	replace
423	[BUG]  [BUGGY]  q2  =  cN;  int  q2  =  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  int  q2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    int  q2  =  cN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
424	[BUG]  [BUGGY]  q2  =  cN;  q2)  =  cN;  [CE]  not  a  statement  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2)  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2)  =  cN;	  	non-compiled	[CE]  not  a  statement	82	None	add
425	[BUG]  [BUGGY]  q2  =  cN;  q2,  cN;  [CE]  not  a  statement  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2,  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2,  cN;	  	non-compiled	[CE]  not  a  statement	82	None	add
426	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN);	  	non-compiled	[CE]  ';'  expected	82	None	add
427	[BUG]  [BUGGY]  q1  =  q2;  int  q1  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  int  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  int  q1  =  p0;	  q1    =    p0;    int    q1    =    p0;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	64	None	replace
428	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	97	None	replace
429	[BUG]  [BUGGY]  n  =  Math.max(n,  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(n,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  epsilon);	  n    =    Math.max(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
430	[BUG]  [BUGGY]  n  =  Math.max(n,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(n,  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  cN);	  n    =    Math.max(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
431	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
432	[BUG]  [BUGGY]  q2  =  q2;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	11	replace
433	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  cN  /  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	7	replace
434	[BUG]  [BUGGY]  p0  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN  /  q2;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    MAX    	compilable	  [FE]  OutOfRangeException  	50	7	replace
435	[BUG]  [BUGGY]  q1  =  p2;  (q1  =  p0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p2;  (q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p2;  (q1  =  p0;	  q1    =    p0;    (q1    =    p0;    	non-compiled	[CE]  ')'  expected	67	None	replace
436	[BUG]  [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  dPrev,  cPrev.doubleValue();	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	22	None	replace
437	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2,  scaleFactor;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q2;  q1  =  q1;  q1  =  q2,  scaleFactor;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q2;    q1  =  q1;  q1  =  q2,  scaleFactor;	  	non-compiled	[CE]  ';'  expected	54	None	add
438	[BUG]  [BUGGY]  n  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN;  q1  =  q2;  System.arraycopy(cN,  0,  q1,  0,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    q1,    0,    q2);    	non-compiled	[CE]  possible  loss  of  precision	94	None	replace
439	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
440	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q1    =    p0;    q2  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
441	[BUG]  [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q1  =  p0;  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q1    =    p0;    q2  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	3	10	add
442	[BUG]  [BUGGY]  n  =  dPrev,  cN.doubleValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  dPrev,  cN.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  dPrev,  cN.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  ';'  expected	21	None	replace
443	[BUG]  [BUGGY]  q1  =  p2;  q1  =  p0;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p2;  q1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p2;  q1  =  p0;	  q1    =    p0;    q1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	4	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  dPrev;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        cN;        q1    =    cN;    q1  =  dPrev;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	2	add
445	[BUG]  [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  dPrev;  q1  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    cN;    q1  =  cN;  q1  =  dPrev;  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        cN;        q1    =    cN;    q1  =  dPrev;  q1  =  cN;	  	compilable	  [FE]  AssertionError  	45	2	add
446	[BUG]  [BUGGY]  q2  =  q2;  (q1  =  cN;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  q2;  (q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  q2;  (q1  =  cN;	  q1    =    cN;    (q1    =    cN;    	non-compiled	[CE]  ')'  expected	81	None	replace
447	[BUG]  [BUGGY]  p0  =  cN;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p1  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	98	None	replace
448	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p1  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	98	None	replace
449	[BUG]  [BUGGY]  q1  =  q2;  }  q2  =  q0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  }  q2  =  q0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  }  q2  =  q0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
450	[BUG]  [BUGGY]  q1  =  cN;  q1  =  p0;  }  q2  =  p0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  p0;  }  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  p0;  }  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
451	[BUG]  [BUGGY]  q1  =  q2;  }  q2  =  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  }  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  }  q2  =  p0;	  q1    =    p0;    q1    =    p0;    }    q2    =    p0;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
452	[BUG]  [BUGGY]  q1  =  q2;  initializeScaleFactor();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  initializeScaleFactor();  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  initializeScaleFactor();	  q1    =    p0;    q1    =    p0;    initializeScaleFactor();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
453	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0    =    dPrev;    p0  =  cN;	  timeout    	compilable	  [FE]  OutOfRangeException  	75	7	add
454	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    dPrev;    p0  =  cN;	  timeout    	compilable	  [FE]  OutOfRangeException  	75	7	add
455	[BUG]  [BUGGY]  int  q1  =  cN  +  1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  q1  =  cN  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  q1  =  cN  +  1;	  q1    =    cN;    int    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	79	None	replace
456	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p1;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	40	None	add
457	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  p0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	41	None	replace
458	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	41	7	replace
459	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	41	7	replace
460	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN  /  q2;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  cN  /  q2;  p0  =  p0;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	compilable	  [FE]  OutOfRangeException  	48	7	replace
461	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  p0;  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN  /  q2;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN  /  q2;  p0  =  p0;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	compilable	  [FE]  OutOfRangeException  	48	7	replace
462	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN  /  q2;  p0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN  /  q2;  p0  =  p1;	  q1    =    cN;    q1    =    cN;    }    else    if(n    >=    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    DEFAULT_EPSILON,    x);    }    	non-compiled	[CE]  cannot  find  symbol  p1	48	None	replace
463	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CE]  'else'  without  'if'  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }	  timeout    	non-compiled	[CE]  'else'  without  'if'	23	None	add
464	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  'else'  without  'if'  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  timeout    	non-compiled	[CE]  'else'  without  'if'	23	None	add
465	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }  [CE]  'else'  without  'if'  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }	  timeout    	non-compiled	[CE]  'else'  without  'if'	23	None	add
466	[BUG]  [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  3);  }  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  hN;  q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  3);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    hN;    q1  =  hN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  3);  }	  timeout    	non-compiled	[CE]  'else'  without  'if'	23	None	add
467	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  p0,  q1,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
468	[BUG]  [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  System.arraycopy(cN,  0,  p0,  q2,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
469	[BUG]  [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
470	[BUG]  [BUGGY]  q1  =  p0;  System.arraycopy(cN,  0,  p0,  q2,  cN);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  p0;  System.arraycopy(cN,  0,  p0,  q2,  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p0;  System.arraycopy(cN,  0,  p0,  q2,  cN);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q2,    p0);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	95	None	replace
471	[BUG]  [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  q1    =    cN;    q1    =    cN;    System.arraycopy(cN,    0,    p0,    q1,    q2);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	96	None	replace
472	[BUG]  [BUGGY]  p0  =  epsilon;  p0  =  aScaleFactor;  [CE]  cannot  find  symbol  aScaleFactor  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  epsilon;  p0  =  aScaleFactor;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    epsilon;    p0  =  aScaleFactor;	  timeout    	non-compiled	[CE]  cannot  find  symbol  aScaleFactor	92	None	add
473	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev;  q1  =  q2;	  q1    =    dPrev;    q1    =    dprev;    	compilable	  [FE]  AssertionError  	39	2	replace
474	[BUG]  [BUGGY]  q1  =  dPrev;  q1  =  q2;  [FE]  AssertionError  [FE]            OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  q1  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev;  q1  =  q2;	  q1    =    dPrev;    q1    =    dprev;    	compilable	  [FE]  AssertionError  	39	2	replace
475	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p2;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p1;  (p0  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;  (p0  =  p2;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	73	None	replace
476	[BUG]  [BUGGY]  p0  =  dPrev;  (p0  =  p0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  dPrev;  (p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	73	None	replace
477	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  cN,  p0);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	30	None	replace
478	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  cN  +  1);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
479	[BUG]  [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1,  q2  =  q1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q2  =  q1;  q1  =  q1,  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q2    =    q1;    q1  =  q1,  q2  =  q1;	  	non-compiled	[CE]  ';'  expected	56	None	add
480	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  cPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q2    =    dPrev;    q1  =  cPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	37	11	add
481	[BUG]  [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  cPrev;  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q2  =  dPrev;  q1  =  cPrev;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q2    =    dPrev;    q1  =  cPrev;  q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	37	11	add
482	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	97	None	replace
483	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cPrev  /  dPrev,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  /  dPrev,  p0);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	28	None	replace
484	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  'else'  without  'if'  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
485	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }  [CE]  'else'  without  'if'  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  MAX_EPSILON,  maxPower);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
486	[BUG]  [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }  [CE]  'else'  without  'if'  [FE]        OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN;  q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2    =    cN;    q2  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        p0;        q2    =    p0;    q2  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	65	10	add
488	[BUG]  [BUGGY]  q1    =    p0;    q2  =  p0;  q2  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    p0;    q2  =  p0;  q2  =  p0;  q2  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        p0;        q2    =    p0;    q2  =  p0;  q2  =  p0;	  	compilable	  [FE]  AssertionError  	65	10	add
489	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN.doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	90	None	add
490	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0    =    cN;    p0  =  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	90	11	add
491	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN  +  1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  p0  =  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0    =    cN;    p0  =  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	90	11	add
492	[BUG]  [BUGGY]  p0  =  cN;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  cN;  P0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  P0	74	None	replace
493	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  p0;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        dPrev;        q1    =    dPrev;    q1  =  p0;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
494	[BUG]  [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  p0;  q1  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    dPrev;    q1  =  dPrev;  q1  =  p0;  q1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        dPrev;        q1    =    dPrev;    q1  =  p0;  q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	35	2	add
495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  q2;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	2	replace
496	[BUG]  [BUGGY]  q1  =  q2;  q2  =  dPrev;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  q2;  q2  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  q2;  q2  =  dPrev;	  q1    =    dPrev;    q2    =    dPrev;    	compilable	  [FE]  AssertionError  	38	2	replace
497	[BUG]  [BUGGY]  q1  =  cN;  q1  =  q1,;  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  q1,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  q1,;	  q1    =    q1;    q1    =    q1,;    	non-compiled	[CE]  ';'  expected	59	None	replace
498	[BUG]  [BUGGY]  q1  =  dPrev;  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  dPrev;  double  q1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev;  double  q1  =  cN;	  q1    =    cN;    double    q1    =    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
499	[BUG]  [BUGGY]  int  q1  =  dPrev  +  1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  int  q1  =  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	int  q1  =  dPrev  +  1;	  q1    =    dPrev;    int    q1    =    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
500	[BUG]  [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2,  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  /  q2;  q1  =  cN  /  q2,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    /    q2;    q1  =  cN  /  q2,	  timeout    	non-compiled	[CE]  ';'  expected	60	None	add
501	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  p0  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(dPrev  /  p0  +  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  p0  +  1);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
502	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  cN;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p2	42	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN    -    1;    q1  =  cN  -  2;	  	compilable	  [FE]  AssertionError  	62	2	add
504	[BUG]  [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN  -  1;  q1  =  cN  -  2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN    -    1;    q1  =  cN  -  2;	  	compilable	  [FE]  AssertionError  	62	2	add
505	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q2;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q1;    q1  =  q2;  q1  =  q1;	  	compilable	  [FE]  AssertionError  	52	2	add
506	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q2;  q1  =  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q1  =  q2;  q1  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q1  =  q2;  q1  =  q1;	  	compilable	  [FE]  AssertionError  	52	2	add
507	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q2  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1        =        q1;        q1    =    q1;    q2  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	52	11	add
508	[BUG]  [BUGGY]  q1    =    q1;    q1  =  q1;  q2  =  q1;  q2  =  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1    =    q1;    q1  =  q1;  q2  =  q1;  q2  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1        =        q1;        q1    =    q1;    q2  =  q1;  q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	52	11	add
509	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  cN  -  1);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
510	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  cN  /  q1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
511	[BUG]  [BUGGY]  q2  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN  /  q1;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
512	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  cN  /  q2;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
513	[BUG]  [BUGGY]  q2  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q2  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN  /  q2;	  q2    =    cN;    	compilable	  [FE]  OutOfRangeException  	83	11	replace
514	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p0;  p0  =  p2;  this.lastScaleFactor  =  b;	          p0    =    p0;    p0    =    p0;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  p2	44	None	replace
515	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cPrev  -  dPrev,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  -  dPrev,  p0);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	32	None	replace
516	[BUG]  [BUGGY]  n  =  Math.max(n,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.max(n,  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  dPrev);	  n    =    Math.max(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
517	[BUG]  [BUGGY]  q1  =  cN;  q1  =  q1);  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  q1  =  cN;  q1  =  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN;  q1  =  q1);	  q1    =    q1;    q1    =    q1);    	non-compiled	[CE]  ';'  expected	58	None	replace
518	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;      [BUGGY]  n  =  Math.abs(cN  -  dPrev,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  -  dPrev,  p0);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	33	None	replace
