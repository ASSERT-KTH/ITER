bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  p1;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p1;	      p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	6	None	replace
2	[BUG]  [BUGGY]  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  p2;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  p2;	      p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	6	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    p0;    q1  =  p0;	  	compilable	  [FE]  AssertionError  	7	2	add
4	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;	  	compilable	  [FE]  AssertionError  	7	2	add
5	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
6	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
7	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
8	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  [CE]  'else'  without  'if'  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
9	[BUG]  [BUGGY]  n  =  Math.min(p0,  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(p0,  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(p0,  dPrev);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
10	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(dPrev,  cN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  cN);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
11	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(cPrev,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cPrev,  p0);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
12	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  p0,  cN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(dPrev,  p0,  cN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  p0,  cN);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	2	None	replace
13	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(cN,  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
14	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
15	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(cN,  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
16	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(p0  -  dPrev);	      n    =    Math.abs(dPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
17	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  p0);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cPrev  -  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  -  p0);	      n    =    Math.abs(dPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
18	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  p0);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(dPrev  /  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  p0);	      n    =    Math.abs(dPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
19	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  p0);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cN  -  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  -  p0);	      n    =    Math.abs(dPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
20	[BUG]  [BUGGY]  n  =  p0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  p0.doubleValue();  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  p0.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
21	[BUG]  [BUGGY]  n  =  cN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  cN.doubleValue();  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  cN.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
22	[BUG]  [BUGGY]  n  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  dPrev.doubleValue();  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  dPrev.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
23	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  hN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  hN;	  q1    =    q0;    	compilable	timeout	17	1	replace
24	[BUG]  [BUGGY]  q1  =  hN;  timeout  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  hN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  hN;	  q1    =    q0;    	compilable	timeout	17	1	replace
25	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(cPrev,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cPrev,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
26	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(dPrev,  hN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  hN);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
27	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(cN,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(cN,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
28	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
29	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  *  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
30	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  /  cN);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
31	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
32	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cPrev  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
33	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(cN  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
34	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.abs(dPrev  -  cN);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  q1  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    dPrev;    q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	9	2	add
36	[BUG]  [BUGGY]  q1  =  dPrev;  q1  =  dPrev;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  q1  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev;    q1  =  dPrev;	  	compilable	  [FE]  AssertionError  	9	2	add
37	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    dPrev;    q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	9	11	add
38	[BUG]  [BUGGY]  q1  =  dPrev;  q2  =  dPrev;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  q2  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev;    q2  =  dPrev;	  	compilable	  [FE]  OutOfRangeException  	9	11	add
39	[BUG]  [BUGGY]  q1  =  dPrev;  q1  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  q1  =  dprev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev;    q1  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	9	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	        p0    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	5	2	add
41	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	5	2	add
42	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p0  =  p0;  this.lastScaleFactor  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	5	None	add
43	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  this.scaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p0;  this.scaleFactor  =  scaleFactor;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p0  =  p0;  this.scaleFactor  =  scaleFactor;	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	5	None	add
44	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  b;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p0  =  p0;  this.lastScaleFactor  =  b;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	5	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN;    q1  =  cN;	  	compilable	  [FE]  AssertionError  	11	2	add
46	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;	  	compilable	  [FE]  AssertionError  	11	2	add
47	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
48	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
49	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  }  else  if(n  ==  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON);  }	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
50	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX  [CE]  'else'  without  'if'  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  }  else  if(n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  MAX	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
51	[BUG]  [BUGGY]  q1  =  p2;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  p2;	  q1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	8	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    q1;    q1  =  q1;	  	compilable	  [FE]  AssertionError  	15	2	add
53	[BUG]  [BUGGY]  q1  =  q1;  q1  =  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    q1;    q1  =  q1;	  	compilable	  [FE]  AssertionError  	15	2	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    q1;    q1  =  q2;	  	compilable	  [FE]  AssertionError  	15	2	add
55	[BUG]  [BUGGY]  q1  =  q1;  q1  =  q2;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    q1;    q1  =  q2;	  	compilable	  [FE]  AssertionError  	15	2	add
56	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q2  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    q1;    q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	15	11	add
57	[BUG]  [BUGGY]  q1  =  q1;  q2  =  q1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q2  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    q1;    q2  =  q1;	  	compilable	  [FE]  OutOfRangeException  	15	11	add
58	[BUG]  [BUGGY]  q1  =  q1;  q1  =  q1);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q1);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    q1;    q1  =  q1);	  	non-compiled	[CE]  ';'  expected	15	None	add
59	[BUG]  [BUGGY]  q1  =  q1;  q1  =  q1,;  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  q1;  q1  =  q1,;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    q1;    q1  =  q1,;	  	non-compiled	[CE]  ';'  expected	15	None	add
60	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN  /  q2;	  q1    =    cN;    	compilable	timeout	12	1	replace
61	[BUG]  [BUGGY]  q1  =  cN  /  q2;  timeout  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN  /  q2;	  q1    =    cN;    	compilable	timeout	12	1	replace
62	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN  -  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  cN  -  1;	  q1    =    cN;    	compilable	  [FE]  OutOfRangeException  	12	11	replace
63	[BUG]  [BUGGY]  q1  =  cN  -  1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN  -  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  cN  -  1;	  q1    =    cN;    	compilable	  [FE]  OutOfRangeException  	12	11	replace
64	[BUG]  [BUGGY]  q1  =  p0;  int  q1  =  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  int  q1  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    int  q1  =  p0;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q2  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    p0;    q2  =  p0;	  	compilable	  [FE]  AssertionError  	7	10	add
66	[BUG]  [BUGGY]  q1  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q2  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q2  =  p0;	  	compilable	  [FE]  AssertionError  	7	10	add
67	[BUG]  [BUGGY]  q1  =  p0;  (q1  =  p0;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  (q1  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    (q1  =  p0;	  	non-compiled	[CE]  ')'  expected	7	None	add
68	[BUG]  [BUGGY]  q1  =  p0;  (q1  =  p0);  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  (q1  =  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    (q1  =  p0);	  	non-compiled	[CE]  not  a  statement	7	None	add
69	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(dPrev,  hN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(dPrev,  hN);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
70	[BUG]  [BUGGY]  n  =  Math.min(i,  p0);  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(i,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(i,  p0);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
71	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(epsilon,  cN);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(epsilon,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
72	[BUG]  [BUGGY]      p0  =  p0;  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  int  p0  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    int  p0  =  p0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
73	[BUG]  [BUGGY]      p0  =  p0;  (p0  =  p0;  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  (p0  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    (p0  =  p0;	  	non-compiled	[CE]  ')'  expected	5	None	add
74	[BUG]  [BUGGY]      p0  =  p0;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  P0  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    P0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  P0	5	None	add
75	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  dPrev;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  dPrev;	      p0    =    p0;    	compilable	timeout	6	1	replace
76	[BUG]  [BUGGY]  p0  =  dPrev;  timeout  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  dPrev;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  dPrev;	      p0    =    p0;    	compilable	timeout	6	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q2  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1    =    cN;    q2  =  cN;	  	compilable	  [FE]  AssertionError  	11	6	add
78	[BUG]  [BUGGY]  q1  =  cN;  q2  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q2  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q2  =  cN;	  	compilable	  [FE]  AssertionError  	11	6	add
79	[BUG]  [BUGGY]  q1  =  cN;  int  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  int  q1  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    int  q1  =  cN;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
80	[BUG]  [BUGGY]  q1  =  cN;  double  q1  =  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  double  q1  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    double  q1  =  cN;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
81	[BUG]  [BUGGY]  q1  =  cN;  (q1  =  cN;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  (q1  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    (q1  =  cN;	  	non-compiled	[CE]  ')'  expected	11	None	add
82	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q2  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q2  =  cN;	  q1    =    cN;    	compilable	  [FE]  OutOfRangeException  	12	11	replace
83	[BUG]  [BUGGY]  q2  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q2  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q2  =  cN;	  q1    =    cN;    	compilable	  [FE]  OutOfRangeException  	12	11	replace
84	[BUG]  [BUGGY]  q1  =  dPrev;  int  q1  =  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev;  int  q1  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    dPrev;    int  q1  =  dPrev;	  	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
85	[BUG]  [BUGGY]  n  =  Math.max(n,  p0);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(n,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(n,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
86	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  p0);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(epsilon,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(epsilon,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
87	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev  +  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	q1  =  dPrev  +  1;	  q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	10	12	replace
88	[BUG]  [BUGGY]  q1  =  dPrev  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  dPrev  +  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1  =  dPrev  +  1;	  q1    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	10	12	replace
89	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.min(cN,  p0);	      n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
90	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  cN;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  cN;	      p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	6	7	replace
91	[BUG]  [BUGGY]  p0  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  cN;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  cN;	      p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	6	7	replace
92	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  epsilon;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	p0  =  epsilon;	      p0    =    p0;    	compilable	timeout	6	1	replace
93	[BUG]  [BUGGY]  p0  =  epsilon;  timeout  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  p0  =  epsilon;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	p0  =  epsilon;	      p0    =    p0;    	compilable	timeout	6	1	replace
94	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  System.arraycopy(cN,  0,  q1,  0,  q2);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	11	None	add
95	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  System.arraycopy(cN,  0,  p0,  q2,  p0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	11	None	add
96	[BUG]  [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  cN;  q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    cN;    q1  =  cN;  System.arraycopy(cN,  0,  p0,  q1,  q2);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	11	None	add
97	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p0  =  p1;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	5	None	add
98	[BUG]  [BUGGY]      p0  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]      p0  =  p0;  p1  =  p0;  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	        p0    =    p0;    p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	5	None	add
99	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  }  q2  =  p0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  }  q2  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  }  q2  =  p0;	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
100	[BUG]  [BUGGY]  q1  =  p0;  q1  =  p0;  initializeScaleFactor();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  q1  =  p0;  q1  =  p0;  initializeScaleFactor();  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	q1    =    p0;    q1  =  p0;  initializeScaleFactor();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
101	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  cN  +  1);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
102	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;    [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [BUGGY]    q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	n  =  Math.max(dPrev,  cN  -  1);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
