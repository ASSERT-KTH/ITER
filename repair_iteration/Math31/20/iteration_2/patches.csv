bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  q2  =  dPrev  *  cN;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  cN;	  double    q2    =    cN    *    hPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hPrev;	  double    q2    =    cN    *    hPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  double  q2  =  hN  *  cN;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  hN  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  hN  *  cN;	  double    q2    =    cN    *    hPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  b  *  p0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
5	[BUG]  [BUGGY]  double  q2  =  a  *  c1  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  c1  +  b  *  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  c1  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
6	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  cN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  b  *  cN;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
7	[BUG]  [BUGGY]  double  x  =  getX(n,  dPrev);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  dPrev);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  dPrev);	  int    x    =    getX(n,    dPrev);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
8	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
9	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
10	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||  Double.  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||  Double.  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||  Double.	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  <identifier>  expected	94	None	replace
11	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)||	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
12	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  b  *  p0;	  double    q2    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  b  *  cN  +  1;	  double    q2    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
14	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  dPrev.equals(hN))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  dPrev.equals(hN))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  dPrev.equals(hN))  {	  while(n    <    maxIterations    &&    cN.equals(hN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
15	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(hN))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(hN))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  cPrev.equals(hN))  {	  while(n    <    maxIterations    &&    cN.equals(hN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
16	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(hN))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(hN))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  epsilon.equals(hN))  {	  while(n    <    maxIterations    &&    cN.equals(hN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
17	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  double  q2  =  a  *  cN;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN;	  double    q2    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
20	[BUG]  [BUGGY]  double  q2  =  a  *  hN;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hN;	  double    q2    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
21	[BUG]  [BUGGY]  double  q2  =  dPrev  *  a;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  a;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  a;	  double    q2    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
22	[BUG]  [BUGGY]  double  q2  =  dPrev  *  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  q0;	  double    q2    =    dPrev    *    q1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n!=  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	while(n!=  0)  {	  while(n    >=    0)    {    	compilable	  [FE]  AssertionError  	67	2	replace
24	[BUG]  [BUGGY]  while(n!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n!=  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n!=  0)  {	  while(n    >=    0)    {    	compilable	  [FE]  AssertionError  	67	2	replace
25	[BUG]  [BUGGY]  double  x  =  getX(n,  cPrev);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  cPrev);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  cPrev);	  int    x    =    getX(n,    cPrev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  double  cN  =  q1  *  hN;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q1  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q1  *  hN;	  double    cN    =    hN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
27	[BUG]  [BUGGY]  double  cN  =  q0  *  hN;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q0  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q0  *  hN;	  double    cN    =    hN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
28	[BUG]  [BUGGY]  double  cN  =  dPrev  *  q1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  *  q1;	  double    cN    =    hN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
29	[BUG]  [BUGGY]  while  (n  <  =  MAX_EPSILON.maxIterations)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  MAX_EPSILON.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  MAX_EPSILON.maxIterations)  {	  while    (n    <    =    epsilon.maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
30	[BUG]  [BUGGY]  while  (n  <  =  scaleFactor.maxIterations)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  scaleFactor.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  scaleFactor.maxIterations)  {	  while    (n    <    =    epsilon.maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
31	[BUG]  [BUGGY]  double  cN  =  q2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q2;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q2;	  double    cN    =    q1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
32	[BUG]  [BUGGY]  double  x  =  getX(n,  cN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  cN);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  cN);	  int    x    =    getX(n,    cN);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  int  x  =  getX(n,  cN,  p0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  int  x  =  getX(n,  cN,  p0);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	int  x  =  getX(n,  cN,  p0);	  int    x    =    getX(n,    cN);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  while(n  <  1)  {  while(n  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  while(n  <  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    while(n  <  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
35	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
36	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  cN  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  cN  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  =  getA(n,  x);  final  double  cN  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
37	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  a  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  =  getA(n,  x);  final  double  a  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  =  getA(n,  x);  final  double  a  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
38	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  =  getN(n,  x);  final  double  cN  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  =  getN(n,  x);  final  double  cN  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  =  getN(n,  x);  final  double  cN  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  3)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	while(n  <  3)  {	  while(n    <    1)    {    	compilable	  [FE]  OutOfRangeException  	97	7	replace
40	[BUG]  [BUGGY]  while(n  <  3)  {  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  3)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  3)  {	  while(n    <    1)    {    	compilable	  [FE]  OutOfRangeException  	97	7	replace
41	[BUG]  [BUGGY]  while(n  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  1)  {	  while(n    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
42	[BUG]  [BUGGY]  final  double  x  =  getA(n,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  x  =  getA(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  x  =  getA(n,  x);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  x  =  getA(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	while  (n  >  1)  {	  while    (n    >    0)    {    	compilable	  [FE]  AssertionError  	22	6	replace
45	[BUG]  [BUGGY]  while  (n  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  >  1)  {	  while    (n    >    0)    {    	compilable	  [FE]  AssertionError  	22	6	replace
46	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  c  *  p0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  c  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  c  *  p0;	  double    q2    =    a    *    q1    +    c    *    hN;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
47	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  c  *  hN  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  c  *  hN  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  c  *  hN  +  1;	  double    q2    =    a    *    q1    +    c    *    hN;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
48	[BUG]  [BUGGY]  double  cN  =  size  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  size  -  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  size  -  1;	  double    cN    =    size;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  cN  *  p0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
50	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
51	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  small.equals(epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  small.equals(epsilon))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  small.equals(epsilon))  {	  while(n    <    maxIterations    &&    epsilon.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
52	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  smaller.equals(epsilon))  {  [CE]  cannot  find  symbol  smaller  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  smaller.equals(epsilon))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  smaller.equals(epsilon))  {	  while(n    <    maxIterations    &&    epsilon.equals(small))    {    	non-compiled	[CE]  cannot  find  symbol  smaller	63	None	replace
53	[BUG]  [BUGGY]  while(n  <  epsilon  &&  epsilon.equals(maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon  &&  epsilon.equals(maxIterations))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon  &&  epsilon.equals(maxIterations))  {	  while(n    <    maxIterations    &&    epsilon.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
54	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
55	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hN  +  b  *  p0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
56	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	7	None	replace
58	[BUG]  [BUGGY]  double  cN  =  dPrev  *  hN  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  *  hN  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  *  hN  +  1;	  double    cN    =    dPrev    *    hN;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
59	[BUG]  [BUGGY]  double  cN  =  dPrev  *  p0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  *  p0;	  double    cN    =    dPrev    *    hN;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
60	[BUG]  [BUGGY]  double  x  =  getX(n,  p0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  p0);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  p0);	  int    x    =    getX(n,    p0);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  if(Double.isInfinite(cN)	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(cN)    	non-compiled	[CE]  ')'  expected	93	None	replace
62	[BUG]  [BUGGY]  double  cN  =  dPrev  *  a;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  *  a;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  *  a;	  double    cN    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
63	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  a  *  cPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  a  *  cPrev;	  double    cN    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
64	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  a  *  dPrev  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  a  *  dPrev  +  1;	  double    cN    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
65	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scaleFactor.equals(small))  {  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scaleFactor.equals(small))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scaleFactor.equals(small))  {	  while(n    <    maxIterations    &&    scale.equals(small))    {    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	64	None	replace
66	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scale.equals(maxPower))  {  [CE]  cannot  find  symbol  maxPower  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scale.equals(maxPower))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scale.equals(maxPower))  {	  while(n    <    maxIterations    &&    scale.equals(small))    {    	non-compiled	[CE]  cannot  find  symbol  maxPower	64	None	replace
67	[BUG]  [BUGGY]  double  cN  =  p0  *  dPrev  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p0  *  dPrev  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p0  *  dPrev  +  1;	  double    cN    =    hN    *    dPrev    +    1;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
68	[BUG]  [BUGGY]  double  cN  =  hN  *  p0  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  p0  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  p0  +  1;	  double    cN    =    hN    *    dPrev    +    1;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
69	[BUG]  [BUGGY]  double  cN  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  0;	  double    cN    =    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
70	[BUG]  [BUGGY]  while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
71	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	26	None	replace
72	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cPrev  *  dPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hN  +  cPrev  *  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hN  +  cPrev  *  dPrev;	  double    q2    =    a    *    q1    +    cPrev    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
73	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q2;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hPrev  +  b  *  q2;	  double    q2    =    a    *    hN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
74	[BUG]  [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(Double.isInfinite(cN)||  Double.isInfinite(	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
75	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
76	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
77	[BUG]  [BUGGY]  while  (n  <  =  q1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  q1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  q1)  {	  while    (n    <    q1)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
78	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  cN.equals(dPrev))  {  [CE]  cannot  find  symbol  cN  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  cN.equals(dPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  cN.equals(dPrev))  {	  while(n    <    maxIterations    &&    dPrev.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  cN	90	None	replace
79	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(dPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(dPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  cPrev.equals(dPrev))  {	  while(n    <    maxIterations    &&    dPrev.equals(cN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	90	None	replace
80	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
81	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  final  double  a  =  getA(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
82	[BUG]  [BUGGY]  double  cN  =  p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p1;	  double    cN    =    p0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
83	[BUG]  [BUGGY]  double  cN  =  p0  +  q1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p0  +  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p0  +  q1;	  double    cN    =    p0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
84	[BUG]  [BUGGY]  double  n  =  this.small.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  this.small.doubleValue()  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  this.small.doubleValue()  +  1;	  double    n    =    this.small.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
85	[BUG]  [BUGGY]  double  n  =  cN.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  cN.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  cN.doubleValue();	  double    n    =    this.small.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
86	[BUG]  [BUGGY]  while  (n  <  =  DEFAULT_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  DEFAULT_EPSILON)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  DEFAULT_EPSILON)  {	  while    (n    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
87	[BUG]  [BUGGY]  while  (n  <  =  MAX_EPSILON)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  MAX_EPSILON)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  MAX_EPSILON)  {	  while    (n    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
88	[BUG]  [BUGGY]  while  (n  <  =  dPrev)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  dPrev)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  dPrev)  {	  while    (n    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
89	[BUG]  [BUGGY]  double  n  =  scale.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  scale.doubleValue()  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  scale.doubleValue()  +  1;	  double    n    =    scale.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
90	[BUG]  [BUGGY]  double  n  =  scale.doubleValue()  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  scale.doubleValue()  +  2;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  scale.doubleValue()  +  2;	  double    n    =    scale.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
91	[BUG]  [BUGGY]  double  cN  =  p0  *  hN;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p0  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p0  *  hN;	  double    cN    =    hN    *    p0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
92	[BUG]  [BUGGY]  double  cN  =  a  *  p0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  a  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  a  *  p0;	  double    cN    =    hN    *    p0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
93	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	6	None	replace
95	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hPrev  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
96	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hN  +  b  *  q1;	  double    q2    =    a    *    hN    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
97	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
98	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  hN  *  p0;	  double    q2    =    a    *    cPrev    +    hN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
99	[BUG]  [BUGGY]  while  (n  <  lN)  {  [CE]  cannot  find  symbol  lN  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  lN)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  lN)  {	  while    (n    <    cN)    {    	non-compiled	[CE]  cannot  find  symbol  lN	40	None	replace
100	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  while  (n  <  dPrev)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  while  (n  <  dPrev)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    while  (n  <  dPrev)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
101	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  While  (n  <  dPrev)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  While  (n  <  dPrev)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    While  (n  <  dPrev)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
102	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  int  x  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  int  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    int  x  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
103	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  int  n  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  int  n  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    int  n  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
104	[BUG]  [BUGGY]  while  (n  <  =  hN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  hN)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  hN)  {	  while    (n    <    hN)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
105	[BUG]  [BUGGY]  while  (n  <  hN)  {  while  (n  <  hN)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  while  (n  <  hN)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    while  (n  <  hN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
106	[BUG]  [BUGGY]  while  (n  <  hN)  {  int  x  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  int  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    int  x  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
107	[BUG]  [BUGGY]  while  (n  <  hN)  {  While  (n  <  hN)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  While  (n  <  hN)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    While  (n  <  hN)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
108	[BUG]  [BUGGY]  while  (n  <  hN)  {  int  n  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  int  n  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    int  n  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
109	[BUG]  [BUGGY]  double  cN  =  dPrev  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  *  DEFAULT_EPSILON;	  double    cN    =    dPrev;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
110	[BUG]  [BUGGY]  double  cN  =  dPrev  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  +  1;	  double    cN    =    dPrev;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
111	[BUG]  [BUGGY]  double  x  =  getX(n,  q1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  q1);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  q1);	  int    x    =    getX(n,    q1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
112	[BUG]  [BUGGY]  double  cN  =  epsilon;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  epsilon;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  epsilon;	  double    cN    =    small;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  double  n  =  scaleFactor.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  scaleFactor.doubleValue()  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  scaleFactor.doubleValue()  +  1;	  double    n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
114	[BUG]  [BUGGY]  double  n  =  this.scaleFactor.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  this.scaleFactor.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  this.scaleFactor.doubleValue();	  double    n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
115	[BUG]  [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  DEFAULT_EPSILON  +  1;	  double    cN    =    hN    *    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
116	[BUG]  [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  DEFAULT_EPSILON  +  p0;	  double    cN    =    hN    *    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
117	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  small.equals(dPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  small.equals(dPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  small.equals(dPrev))  {	  while(n    <    maxIterations    &&    dPrev.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	65	None	replace
118	[BUG]  [BUGGY]  while(n  <  epsilon  &&  dPrev.equals(maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon  &&  dPrev.equals(maxIterations))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon  &&  dPrev.equals(maxIterations))  {	  while(n    <    maxIterations    &&    dPrev.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	65	None	replace
119	[BUG]  [BUGGY]  while(n  <  epsilon  &&  dPrev.equals(small))  {  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon  &&  dPrev.equals(small))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon  &&  dPrev.equals(small))  {	  while(n    <    maxIterations    &&    dPrev.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	65	None	replace
120	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  ==  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	while  (n  ==  0)  {	  while    (n    <    =    0)    {    	compilable	  [FE]  AssertionError  	20	6	replace
122	[BUG]  [BUGGY]  while  (n  ==  0)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  ==  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  ==  0)  {	  while    (n    <    =    0)    {    	compilable	  [FE]  AssertionError  	20	6	replace
123	[BUG]  [BUGGY]  double  q2  =  cN  *  cPrev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  cN  *  cPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  cN  *  cPrev;	  double    q2    =    a    *    cPrev;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
124	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  hN  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  hN  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  hN  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
125	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  cN  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  cN  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  cN  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
126	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  dPrev  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  dPrev  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  dPrev  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
127	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  scale  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  scale  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  scale  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
128	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scale.equals(dPrev))  {  [CE]  cannot  find  symbol  scale  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scale.equals(dPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scale.equals(dPrev))  {	  while(n    <    maxIterations    &&    scale.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  scale	35	None	replace
129	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scale.equals(lastScaleFactor))  {  [CE]  cannot  find  symbol  lastScaleFactor  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scale.equals(lastScaleFactor))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scale.equals(lastScaleFactor))  {	  while(n    <    maxIterations    &&    scale.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	35	None	replace
130	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scale.equals(defULT_EPSILON))  {  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scale.equals(defULT_EPSILON))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scale.equals(defULT_EPSILON))  {	  while(n    <    maxIterations    &&    scale.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	35	None	replace
131	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  cN.equals(epsilon))  {  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  cN.equals(epsilon))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  cN.equals(epsilon))  {	  while(n    <    maxIterations    &&    epsilon.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  cN	36	None	replace
132	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(dPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(dPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  epsilon.equals(dPrev))  {	  while(n    <    maxIterations    &&    epsilon.equals(cN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
133	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  hN  *  q1;	  double    q2    =    a    *    q1    +    hN    *    cPrev;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
134	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  qPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  qPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  cN  *  qPrev;	  double    q2    =    a    *    q1    +    hN    *    cPrev;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
135	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  hN  *  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  hN  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  hN  *  p0;	  double    q2    =    a    *    cN    +    hN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
136	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  cN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  hN  *  cN;	  double    q2    =    a    *    cN    +    hN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
137	[BUG]  [BUGGY]  while(n  >=  0)  {  while(n  >=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  while(n  >=  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    while(n  >=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
138	[BUG]  [BUGGY]  while(n  >=  0)  {  while(n!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  while(n!=  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    while(n!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
139	[BUG]  [BUGGY]  while(n  >=  0)  {  final  double  x  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  final  double  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    final  double  x  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
140	[BUG]  [BUGGY]  while(n  >=  0)  {  while(n  >>  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  while(n  >>  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    while(n  >>  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
141	[BUG]  [BUGGY]  while(n  >=  0)  {  while(n  ==  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  while(n  ==  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    while(n  ==  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
142	[BUG]  [BUGGY]  while  (n  >  0)  {  while  (n  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  while  (n  >  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    while  (n  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
143	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
144	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
145	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
146	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  x  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  x  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
147	[BUG]  [BUGGY]  while  (n  <  =  epsilon.maxPower)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  epsilon.maxPower)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  epsilon.maxPower)  {	  while    (n    <    epsilon.maxPower)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
148	[BUG]  [BUGGY]  while  (n  <  scaleFactor.maxPower)  {  [CE]  cannot  find  symbol  scaleFactor  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  scaleFactor.maxPower)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  scaleFactor.maxPower)  {	  while    (n    <    epsilon.maxPower)    {    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	43	None	replace
149	[BUG]  [BUGGY]  while  (n  <  epsilon.minPower)  {  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon.minPower)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon.minPower)  {	  while    (n    <    epsilon.maxPower)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	replace
150	[BUG]  [BUGGY]  double  q2  =  n  *  cN;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  n  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  n  *  cN;	  double    q2    =    n    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
151	[BUG]  [BUGGY]  double  q2  =  n  *  hN;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  n  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  n  *  hN;	  double    q2    =    n    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
152	[BUG]  [BUGGY]  double  q2  =  n  *  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  n  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  n  *  q0;	  double    q2    =    n    *    q1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
153	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  b  *  hN  +  1;	  double    q2    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
154	[BUG]  [BUGGY]  double  q2  =  cN  *  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  cN  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  cN  *  q0;	  double    q2    =    cN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
155	[BUG]  [BUGGY]  while  (n  <  scaleFactor.maxIterations)  {  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  scaleFactor.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  scaleFactor.maxIterations)  {	  while    (n    <    scale.maxIterations)    {    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	52	None	replace
156	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
157	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    x    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	27	None	replace
158	[BUG]  [BUGGY]  double  q2  =  a  *  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q0;	  double    q2    =    a    *    q1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
159	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  1;	  double    q2    =    a    *    q1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
160	[BUG]  [BUGGY]  while  (n  <  q1)  {  while  (n  <  q1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  while  (n  <  q1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    while  (n  <  q1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
161	[BUG]  [BUGGY]  while  (n  <  q1)  {  While  (n  <  q1)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  While  (n  <  q1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    While  (n  <  q1)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
162	[BUG]  [BUGGY]  while  (n  <  q1)  {  for  (n  <  q1)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  for  (n  <  q1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    for  (n  <  q1)  {	  	non-compiled	[CE]  >  expected	61	None	add
163	[BUG]  [BUGGY]  while  (n  <  q1)  {  while  (n  <  q2)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  while  (n  <  q2)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    while  (n  <  q2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
164	[BUG]  [BUGGY]  double  cN  =  d1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  d1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  d1;	  double    cN    =    d0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
165	[BUG]  [BUGGY]  double  cN  =  q1  *  dPrev  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q1  *  dPrev  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q1  *  dPrev  +  1;	  double    cN    =    q1    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
166	[BUG]  [BUGGY]  double  q2  =  dPrev  *  p0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  p0;	  double    q2    =    p0    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
167	[BUG]  [BUGGY]  double  q2  =  p0  *  q1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  p0  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  p0  *  q1;	  double    q2    =    p0    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
168	[BUG]  [BUGGY]  double  q2  =  p0  *  cN;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  p0  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  p0  *  cN;	  double    q2    =    p0    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
169	[BUG]  [BUGGY]  while(n  <  =  epsilon)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  epsilon)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  epsilon)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    int    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  while(n  <  epsilon)  {  int  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  int  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  int  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    int    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
171	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    int    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
172	[BUG]  [BUGGY]  while(n  <  0)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  0)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  0)  {  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    int    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
173	[BUG]  [BUGGY]  double  n  =  big.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  big.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  big.doubleValue();	  double    n    =    small.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
174	[BUG]  [BUGGY]  double  cN  =  hN  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  1;	  double    cN    =    hN    +    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
175	[BUG]  [BUGGY]  double  cN  =  hPrev  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hPrev  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hPrev  +  1;	  double    cN    =    hN    +    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
176	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
177	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
178	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getC(n,    x);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
179	[BUG]  [BUGGY]  double  cN  =  p0  *  q1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p0  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p0  *  q1;	  double    cN    =    p0    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
180	[BUG]  [BUGGY]  while(b  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  b  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(b  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(b  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  b	26	None	replace
181	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
182	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
183	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
184	[BUG]  [BUGGY]  double  q2  =  q1  *  cN;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  q1  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  q1  *  cN;	  double    q2    =    cN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  b);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  b);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  b);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	6	None	replace
186	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  big.equals(epsilon))  {  [CE]  cannot  find  symbol  big  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  big.equals(epsilon))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  big.equals(epsilon))  {	  while(n    <    maxIterations    &&    epsilon.equals(small))    {    	non-compiled	[CE]  cannot  find  symbol  big	63	None	replace
187	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(cPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  epsilon.equals(cPrev))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  epsilon.equals(cPrev))  {	  while(n    <    maxIterations    &&    epsilon.equals(cN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	36	None	replace
188	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	73	None	replace
189	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  q1.equals(small))  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  q1.equals(small))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  q1.equals(small))  {	  while(n    <    maxIterations    &&    cN.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None	replace
190	[BUG]  [BUGGY]  double  x  =  getX(n,  hN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  x  =  getX(n,  hN);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  x  =  getX(n,  hN);	  double    x    =    getX(n,    x);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
191	[BUG]  [BUGGY]  double  cN  =  a  *  hN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  a  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  a  *  hN;	  double    cN    =    dPrev    *    hN;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
192	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  b  *  q1;	  double    q2    =    a    *    cN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
193	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q2;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  b  *  q2;	  double    q2    =    a    *    cN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
194	[BUG]  [BUGGY]  double  cN  =  q1  *  p0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q1  *  p0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q1  *  p0;	  double    cN    =    hN    *    p0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
195	[BUG]  [BUGGY]  double  n  =  scaleFactor.doubleValue()  +  1d;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  scaleFactor.doubleValue()  +  1d;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  scaleFactor.doubleValue()  +  1d;	  double    n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
196	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  hN  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  hN  *  q0;	  double    q2    =    a    *    cPrev    +    hN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
197	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  hN);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  hN);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getC(n,    x);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
198	[BUG]  [BUGGY]  double  q2  =  q1  *  hN;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  q1  *  hN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  q1  *  hN;	  double    q2    =    cN    *    hN;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
199	[BUG]  [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y  +  1);  [CE]  cannot  find  symbol  y  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y  +  1);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  cannot  find  symbol  y	87	None	replace
200	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  if(n  >  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  if(n  >  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  if(n  >  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
201	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  ==  ')'  expected  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  ==  ')'  expected  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  ==  ')'  expected	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  ')'  expected	94	None	replace
202	[BUG]  [BUGGY]  while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  >>  ')'  expected  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  >>  ')'  expected  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations)  {  if(Double.isInfinite(cN)||  Double.isInfinite  >>  ')'  expected	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  ')'  expected	94	None	replace
203	[BUG]  [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
204	[BUG]  [BUGGY]  while  (n  <  hN)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
205	[BUG]  [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
206	[BUG]  [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
207	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  scale.equals(deFAULT_EPSILON))  {  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  scale.equals(deFAULT_EPSILON))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  scale.equals(deFAULT_EPSILON))  {	  while(n    <    maxIterations    &&    scale.equals(cN))    {    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	35	None	replace
208	[BUG]  [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  h  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  h  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  h	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  ';'  expected	92	None	replace
209	[BUG]  [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
210	[BUG]  [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(n  >  maxIterations)  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
211	[BUG]  [BUGGY]  while(n  >  maxIterations)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >  maxIterations)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  >  maxIterations)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(cN)    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
212	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(cN)    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
213	[BUG]  [BUGGY]  double  cN  =  p0  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  p0  *  DEFAULT_EPSILON;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  p0  *  DEFAULT_EPSILON;	  double    cN    =    hN    *    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
214	[BUG]  [BUGGY]  while  (n  <  size)  {  [CE]  cannot  find  symbol  size  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  size)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  size)  {	  while    (n    <    q1)    {    	non-compiled	[CE]  cannot  find  symbol  size	62	None	replace
215	[BUG]  [BUGGY]  while  (n  <  q0)  {  [CE]  cannot  find  symbol  q0  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  q0)  {	  while    (n    <    q1)    {    	non-compiled	[CE]  cannot  find  symbol  q0	62	None	replace
216	[BUG]  [BUGGY]  while  (n  <  q1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
217	[BUG]  [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    int  q1  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
218	[BUG]  [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    int  q1  =  getA(n,  x);  final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
219	[BUG]  [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  a  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  q1)  {  int  q1  =  getA(n,  x);  final  double  a  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    q1)    {    int  q1  =  getA(n,  x);  final  double  a  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
220	[BUG]  [BUGGY]  double  n  =  size.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  size.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  size.doubleValue();	  double    n    =    scale.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
221	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
222	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
223	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  x  =  getX(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  x  =  getX(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  x  =  getX(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
224	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  cN;	  double    q2    =    a    *    q1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
225	[BUG]  [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(small))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxIterations  &&  cPrev.equals(small))  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxIterations  &&  cPrev.equals(small))  {	  while(n    <    maxIterations    &&    dPrev.equals(small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	65	None	replace
226	[BUG]  [BUGGY]  While(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  While(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	While(n  <  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  ';'  expected	77	None	replace
227	[BUG]  [BUGGY]  while(n  >=  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
228	[BUG]  [BUGGY]  while(n  >=  0)  {  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
229	[BUG]  [BUGGY]  while(n  >=  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
230	[BUG]  [BUGGY]  while(n  >=  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
231	[BUG]  [BUGGY]  int  x  =  getX(n,  hN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  int  x  =  getX(n,  hN);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	int  x  =  getX(n,  hN);	  int    x    =    getX(n,    cPrev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
232	[BUG]  [BUGGY]  while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  epsilon)  {  final  double  a  =  getA(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
233	[BUG]  [BUGGY]  double  cN  =  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q0;	  double    cN    =    q1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
234	[BUG]  [BUGGY]  double  q2  =  d0  *  q1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  d0  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  d0  *  q1;	  double    q2    =    p0    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
235	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  hPrev  +  b  *  q1;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
236	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cPrev  +  b  *  q1;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
237	[BUG]  [BUGGY]  double  q2  =  n  *  q1  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  n  *  q1  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  n  *  q1  +  1;	  double    q2    =    n    *    q1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
238	[BUG]  [BUGGY]  double  cN  =  hN  *  q0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  q0;	  double    cN    =    hN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
239	[BUG]  [BUGGY]  double  cN  =  q0  *  q1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  q0  *  q1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  q0  *  q1;	  double    cN    =    hN    *    q1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
240	[BUG]  [BUGGY]  while  (n  <  maxIterations  &&  epsilon  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  maxIterations  &&  epsilon  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  maxIterations  &&  epsilon  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
241	[BUG]  [BUGGY]  while  (n  <  maxIterations  &&  small  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  maxIterations  &&  small  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  maxIterations  &&  small  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
242	[BUG]  [BUGGY]  int  x  =  getX(n,  cN  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  int  x  =  getX(n,  cN  +  1);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	int  x  =  getX(n,  cN  +  1);	  int    x    =    getX(n,    cN);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
243	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
244	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
245	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    final  double  a  =  getA(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
246	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
247	[BUG]  [BUGGY]  double  cN  =  hN  +  1d;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  +  1d;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  +  1d;	  double    cN    =    hN    +    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
248	[BUG]  [BUGGY]  double  cN  =  hN  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  +  2;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  +  2;	  double    cN    =    hN    +    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
249	[BUG]  [BUGGY]  While(n  <  0)  {  final  double  a  =  getA(n,  x);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  While(n  <  0)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	While(n  <  0)  {  final  double  a  =  getA(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  ';'  expected	76	None	replace
250	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  cPrev  *  dPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  cPrev  *  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  cPrev  *  dPrev;	  double    q2    =    a    *    q1    +    cPrev    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
251	[BUG]  [BUGGY]  double  cN  =  hN  *  q1  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  q1  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  q1  +  1;	  double    cN    =    hN    *    dPrev    +    1;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
252	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  final  double  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	77	None	replace
253	[BUG]  [BUGGY]  while(n  <  1)  {  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  a  =  getB(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  a	77	None	replace
254	[BUG]  [BUGGY]  float  x  =  getX(n,  dPrev);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  float  x  =  getX(n,  dPrev);  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	float  x  =  getX(n,  dPrev);	  int    x    =    getX(n,    dPrev);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
255	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q0;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  q1  +  cN  *  q0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
256	[BUG]  [BUGGY]  while  (n  <  =  EPENDENCY_EPSILON.maxPower)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  EPENDENCY_EPSILON.maxPower)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  EPENDENCY_EPSILON.maxPower)  {	  while    (n    <    epsilon.maxPower)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
257	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  x  =  getA(n,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  x  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  final  double  x  =  getA(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	8	None	replace
258	[BUG]  [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  if(n  >  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(cN)    	non-compiled	[CE]  ';'  expected	93	None	replace
259	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(cN))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(cN)    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
260	[BUG]  [BUGGY]  while  (n  <  =  cN)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  cN)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  cN)  {	  while    (n    <    cN)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
261	[BUG]  [BUGGY]  while  (n  <  =  DEFAULT_EPSILON.maxIterations)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  =  DEFAULT_EPSILON.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  =  DEFAULT_EPSILON.maxIterations)  {	  while    (n    <    =    epsilon.maxIterations)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
262	[BUG]  [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  a  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  a	5	None	replace
263	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  a  =  getA(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
264	[BUG]  [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  0)  {  final  double  a  =  getA(n,  x  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  0)  {  final  double  a  =  getA(n,  x  +  1);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	76	None	replace
265	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  q2  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  q2  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  q2  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
266	[BUG]  [BUGGY]  while  (n  <  epsilon  &&  q1  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  epsilon  &&  q1  <  =  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  epsilon  &&  q1  <  =  0)  {	  while    (n    <    epsilon    &&    small    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
267	[BUG]  [BUGGY]  if(cN  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(cN  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(cN  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  ';'  expected	92	None	replace
268	[BUG]  [BUGGY]  if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  d	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  ';'  expected	92	None	replace
269	[BUG]  [BUGGY]  if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  dPrev;  if  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  dPrev;  if  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(n  <  epsilon)  {  while(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  dPrev;  if	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite(    	non-compiled	[CE]  '('  expected	92	None	replace
270	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  <  1)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  <  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  <  1)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
271	[BUG]  [BUGGY]  while(n  <  1)  {  While(n  <  1)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  While(n  <  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    While(n  <  1)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
272	[BUG]  [BUGGY]  while(n  <  1)  {  int  n  =  1;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  int  n  =  1;  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    int  n  =  1;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	add
273	[BUG]  [BUGGY]  while(n  <  1)  {  for(n  <  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  for(n  <  1)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    <    1)    {    for(n  <  1)  {	  	non-compiled	[CE]  illegal  start  of  type	96	None	add
274	[BUG]  [BUGGY]  double  cN  =  DEFAULT_EPSILON  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  DEFAULT_EPSILON  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  DEFAULT_EPSILON  +  1;	  double    cN    =    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
275	[BUG]  [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
276	[BUG]  [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	if(Double.isInfinite(cN)||  Double.isInfinite(q2))  {  while(n  <  epsilon)  {  if(n  <  epsilon)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n	  while    (n    <    epsilon)    {    if(n    <    epsilon)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    double    cN    =    a    *    hPrev    +    b    *    dPrev;    if    (Double.isInfinite(cN)||    Double.isInfinite    	non-compiled	[CE]  ')'  expected	94	None	replace
277	[BUG]  [BUGGY]  double  q2  =  dPrev  *  hPrev;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  hPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  hPrev;	  double    q2    =    cN    *    hPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
278	[BUG]  [BUGGY]  double  q2  =  dPrev  *  q1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  q1  +  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  q1  +  1;	  double    q2    =    dPrev    *    q1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
279	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  q1  *  dPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  q1  *  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  q1  *  dPrev;	  double    q2    =    a    *    q1    +    cPrev    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  while(n  >=  0)  {  While(n  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  While(n  >=  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    While(n  >=  0)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
281	[BUG]  [BUGGY]  while(n  >=  0)  {  int  n  =  0;  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  >=  0)  {  int  n  =  0;  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n    >=    0)    {    int  n  =  0;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  small)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	add	while  (n  <  small)  {	  while    (n    <    q1)    {    	compilable	  [FE]  AssertionError  	62	6	replace
283	[BUG]  [BUGGY]  while  (n  <  small)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  small)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  small)  {	  while    (n    <    q1)    {    	compilable	  [FE]  AssertionError  	62	6	replace
284	[BUG]  [BUGGY]  double  n  =  dPrev.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  n  =  dPrev.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  n  =  dPrev.doubleValue();	  double    n    =    this.small.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
285	[BUG]  [BUGGY]  double  cN  =  dPrev  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev  /  DEFAULT_EPSILON;	  double    cN    =    dPrev;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
286	[BUG]  [BUGGY]  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	final  double  x  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    x    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
287	[BUG]  [BUGGY]  double  cN  =  hN  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  /  1;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  /  1;	  double    cN    =    hN    +    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
288	[BUG]  [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  cannot  find  symbol  y  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  cannot  find  symbol  y	87	None	replace
289	[BUG]  [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  cannot  find  symbol  a  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  cannot  find  symbol  a	87	None	replace
290	[BUG]  [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  =  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getC(n,    x);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
291	[BUG]  [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  a  =  getA(n,  x);  final  double  b  =  getC(n,  x);	  while    (n    <    0)    {    final    double    a    =    getA(n,    x);    final    double    b    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol  a	88	None	replace
292	[BUG]  [BUGGY]  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	int  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    int    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
293	[BUG]  [BUGGY]  while  (n  >  0)  {  int  n  >  0)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  int  n  >  0)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    int  n  >  0)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
294	[BUG]  [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  >  0)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    >    0)    {    final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
295	[BUG]  [BUGGY]  double  cN  =  a  *  cN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  a  *  cN;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  a  *  cN;	  double    cN    =    a    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
296	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  hN  *  qPrev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  a  *  cN  +  hN  *  qPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  a  *  cN  +  hN  *  qPrev;	  double    q2    =    a    *    q1    +    hN    *    cPrev;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
297	[BUG]  [BUGGY]  double  q2  =  dPrev  *  cPrev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  q2  =  dPrev  *  cPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  q2  =  dPrev  *  cPrev;	  double    q2    =    a    *    cPrev;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
298	[BUG]  [BUGGY]  while  (n  <  smaller.maxIterations)  {  [CE]  cannot  find  symbol  smaller  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  smaller.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  smaller.maxIterations)  {	  while    (n    <    small.maxIterations)    {    	non-compiled	[CE]  cannot  find  symbol  smaller	50	None	replace
299	[BUG]  [BUGGY]  double  cN  =  d0  /  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  d0  /  DEFAULT_EPSILON;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  d0  /  DEFAULT_EPSILON;	  double    cN    =    d0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
300	[BUG]  [BUGGY]  while(n  <  maxPower)  {  final  double  a  =  getA(n,  x);  [CE]  cannot  find  symbol  maxPower  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  maxPower)  {  final  double  a  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  maxPower)  {  final  double  a  =  getA(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getA(n,    x);    	non-compiled	[CE]  cannot  find  symbol  maxPower	29	None	replace
301	[BUG]  [BUGGY]  while(n  <  1)  {  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  1)  {  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  1)  {  n  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    0)    {    final    double    n    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
302	[BUG]  [BUGGY]  while(n  <  epsilon)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  a  [FE]        AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while(n  <  epsilon)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while(n  <  epsilon)  {  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	  while    (n    <    epsilon)    {    final    double    a    =    getB(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  a	73	None	replace
303	[BUG]  [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN;  n++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN;  n++)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    for(int  n  =  hN;  n  <  hN;  n++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
304	[BUG]  [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN);  n  =  getA(n,  x);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN);  n  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    for(int  n  =  hN;  n  <  hN);  n  =  getA(n,  x);	  	non-compiled	[CE]  ';'  expected	59	None	add
305	[BUG]  [BUGGY]  while  (n  <  hN)  {  for(int  n  =  0;  n  <  hN;  n++)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  for(int  n  =  0;  n  <  hN;  n++)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    for(int  n  =  0;  n  <  hN;  n++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
306	[BUG]  [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN);  n  =  getX(n,  x);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  hN)  {  for(int  n  =  hN;  n  <  hN);  n  =  getX(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    hN)    {    for(int  n  =  hN;  n  <  hN);  n  =  getX(n,  x);	  	non-compiled	[CE]  ';'  expected	59	None	add
307	[BUG]  [BUGGY]  double  cN  =  dPrev.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  dPrev.doubleValue();  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  dPrev.doubleValue();	  double    cN    =    size;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
308	[BUG]  [BUGGY]  while  (n  <  dPrev)  {  while  (n  <  dprev)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev)  {  while  (n  <  dprev)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while    (n    <    dPrev)    {    while  (n  <  dprev)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
309	[BUG]  [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  dPrev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  double  cN  =  hN  *  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	double  cN  =  hN  *  DEFAULT_EPSILON  +  dPrev;	  double    cN    =    hN    *    DEFAULT_EPSILON;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
310	[BUG]  [BUGGY]  while  (n  <  dPrev.maxIterations)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;      [BUGGY]  while  (n  <  dPrev.maxIterations)  {  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	139	139	2	replace	while  (n  <  dPrev.maxIterations)  {	  while    (n    <    size.maxIterations)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
