bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(dPrev,  hN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  hN);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
2	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  q2);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(cPrev,  q2);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cPrev,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
3	[BUG]  [BUGGY]  n  =  Math.min(p0,  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(p0,  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(p0,  dPrev);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
4	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(dPrev,  cN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  cN);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(cPrev,  p0);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cPrev,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
6	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
7	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  0;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  0;	  n    =    1;    	compilable	  [FE]  OutOfRangeException  	12	7	replace
8	[BUG]  [BUGGY]  n  =  0;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  0;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  0;	  n    =    1;    	compilable	  [FE]  OutOfRangeException  	12	7	replace
9	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  2;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  2;	  n    =    1;    	compilable	  [FE]  OutOfRangeException  	12	7	replace
10	[BUG]  [BUGGY]  n  =  2;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  2;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  2;	  n    =    1;    	compilable	  [FE]  OutOfRangeException  	12	7	replace
11	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  q2);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(cPrev,  q2);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cPrev,  q2);	      n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
12	[BUG]  [BUGGY]  n  =  Math.min(cN,  q2);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(cN,  q2);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  q2);	      n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
13	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(cPrev,  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cPrev,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
14	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(cN,  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  p0  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	        p0    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	2	2	add
16	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  p0  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	2	2	add
17	[BUG]  [BUGGY]      p0  =  p0;  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  int  p0  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    int  p0  =  p0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
18	[BUG]  [BUGGY]      p0  =  p0;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  P0  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    P0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  P0	2	None	add
19	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  p0  =  p0;  }  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    p0  =  p0;  }	  	non-compiled	[CE]  illegal  start  of  type	2	None	add
20	[BUG]  [BUGGY]  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  p1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;	      p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	3	None	replace
21	[BUG]  [BUGGY]  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  p2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;	      p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	3	None	replace
22	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cN;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	6	replace
23	[BUG]  [BUGGY]  p0  =  cN;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	6	replace
24	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  p0  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  OutOfRangeException  	17	12	replace
25	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  p0  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  OutOfRangeException  	17	12	replace
26	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
27	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
28	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  q1  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
29	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  q1  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
30	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  q1  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  ConvergenceException  	14	12	replace
31	[BUG]  [BUGGY]  p0  =  q1  /  q2;  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  q1  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  ConvergenceException  	14	12	replace
32	[BUG]  [BUGGY]  p0  =  p1  /  dPrev;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  p1  /  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1  /  dPrev;	      p0    =    p1    /    q2;    	non-compiled	[CE]  cannot  find  symbol  p1	14	None	replace
33	[BUG]  [BUGGY]  p0  =  p1  /  cN;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  p1  /  cN;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1  /  cN;	      p0    =    p1    /    q2;    	non-compiled	[CE]  cannot  find  symbol  p1	14	None	replace
34	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cPrev  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
35	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  *  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
36	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cN  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
37	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  /  cN);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
38	[BUG]  [BUGGY]  n  =  p0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  p0.doubleValue();  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
39	[BUG]  [BUGGY]  n  =  cN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  cN.doubleValue();  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cN.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
40	[BUG]  [BUGGY]  n  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  dPrev.doubleValue();  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
41	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  n  =  1;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    1;    n  =  1;	  	compilable	  [FE]  OutOfRangeException  	11	7	add
42	[BUG]  [BUGGY]  n  =  1;  n  =  1;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  n  =  1;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    1;    n  =  1;	  	compilable	  [FE]  OutOfRangeException  	11	7	add
43	[BUG]  [BUGGY]  n  =  1;  int  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  int  n  =  1;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    1;    int  n  =  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
44	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  n  =  2;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    1;    n  =  2;	  	compilable	  [FE]  ConvergenceException  	11	10	add
45	[BUG]  [BUGGY]  n  =  1;  n  =  2;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  n  =  2;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    1;    n  =  2;	  	compilable	  [FE]  ConvergenceException  	11	10	add
46	[BUG]  [BUGGY]  n  =  1;  double  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  double  n  =  1;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    1;    double  n  =  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
47	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(cN,  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
48	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(cN,  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
49	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  +  1);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
50	[BUG]  [BUGGY]  n  =  dPrev.abs(dPrev  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  dPrev.abs(dPrev  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(dPrev  -  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
51	[BUG]  [BUGGY]  n  =  cN.abs(dPrev  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  cN.abs(dPrev  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cN.abs(dPrev  -  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
52	[BUG]  [BUGGY]  n  =  p0.abs(dPrev  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  p0.abs(dPrev  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(dPrev  -  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
53	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
54	[BUG]  [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
55	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
56	[BUG]  [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
57	[BUG]  [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	16	None	add
58	[BUG]  [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2,;	  	non-compiled	[CE]  ';'  expected	16	None	add
59	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cPrev  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
60	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cN  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
61	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  -  cN);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
62	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	9	None	replace
63	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(x,  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  p0);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	9	None	replace
64	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  epsilon);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	9	None	replace
65	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  q1,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	10	None	replace
66	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	12	replace
67	[BUG]  [BUGGY]  p0  =  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  q1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	12	replace
68	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  hPrev  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hPrev  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  OutOfRangeException  	14	7	replace
69	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  hPrev  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hPrev  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  OutOfRangeException  	14	7	replace
70	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  -  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.abs(dPrev  -  p0);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  -  p0);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	13	None	replace
71	[BUG]  [BUGGY]  n  =  scaleFactor.abs(cN  -  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.abs(cN  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(cN  -  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	13	None	replace
72	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  /  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.abs(dPrev  /  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  /  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	13	None	replace
73	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p0  -  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.abs(p0  -  dPrev);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p0  -  dPrev);	      n    =    scaleFactor.abs(dPrev    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	13	None	replace
74	[BUG]  [BUGGY]  n  =  1;  int  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  1;  int  n  =  2;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    1;    int  n  =  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
75	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  3;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  3;	  n    =    1;    	compilable	  [FE]  ConvergenceException  	12	10	replace
76	[BUG]  [BUGGY]  n  =  3;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  3;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  3;	  n    =    1;    	compilable	  [FE]  ConvergenceException  	12	10	replace
77	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(dPrev,  q1);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  q1);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
78	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  hN);  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(x,  hN);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  hN);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	9	None	replace
79	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  +  1);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  +  1);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon  +  1);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	9	None	replace
80	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  q2  /  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
81	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  dPrev  =  q2  /  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;	      dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
82	[BUG]  [BUGGY]      p0  =  p0;  (p0  =  p0;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  (p0  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    (p0  =  p0;	  	non-compiled	[CE]  ')'  expected	2	None	add
83	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(dPrev,  q1);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  q1);	      n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
84	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.min(dPrev,  hN);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  hN);	      n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
85	[BUG]  [BUGGY]  n  =  this.scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  this.scaleFactor.doubleValue();  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  this.scaleFactor.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	4	None	replace
86	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
87	[BUG]  [BUGGY]  n  =  Math.max(cN,  q2);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  Math.max(cN,  q2);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
88	[BUG]  [BUGGY]      p0  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  p1  =  p0;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	2	None	add
89	[BUG]  [BUGGY]      p0  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      p0  =  p0;  p0  =  p1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        p0    =    p0;    p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	2	None	add
90	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  maxPower);  [CE]  cannot  find  symbol  maxPower  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  maxPower);  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  maxPower);	      n    =    scaleFactor.evaluate(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  maxPower	9	None	replace
91	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cN  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  OutOfRangeException  	14	7	replace
92	[BUG]  [BUGGY]  p0  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  cN  /  q2;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN  /  q2;	      p0    =    p1    /    q2;    	compilable	  [FE]  OutOfRangeException  	14	7	replace
93	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
94	[BUG]  [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]      dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
95	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  dPrev;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	12	replace
96	[BUG]  [BUGGY]  p0  =  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;    [BUGGY]  p0  =  dPrev;  [BUGGY]    n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev;	      p0    =    p0;    	compilable	  [FE]  ConvergenceException  	3	12	replace
