bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p0  =  p0;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p0;  p1  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p0;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	88	None	replace
2	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	88	None	replace
3	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p1  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	88	None	replace
4	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p0;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  p1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	88	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  q1);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cPrev,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cPrev,  q1);	  n    =    Math.min(dPrev,    q1);    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
6	[BUG]  [BUGGY]  n  =  Math.min(cN,  q1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cN,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  q1);	  n    =    Math.min(dPrev,    q1);    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
7	[BUG]  [BUGGY]  n  =  Math.min(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(hN,  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(hN,  dPrev);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
8	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cPrev,  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cPrev,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
9	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
10	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
11	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
12	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
13	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	53	None	add
14	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,	  	non-compiled	[CE]  ';'  expected	53	None	add
15	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    q1;    p0  =  q1;	  	compilable	  [FE]  ConvergenceException  	66	11	add
16	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q1;	  	compilable	  [FE]  ConvergenceException  	66	11	add
17	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    q1;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	66	11	add
18	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	66	11	add
19	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q1);	  	non-compiled	[CE]  ';'  expected	66	None	add
20	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q1,;	  	non-compiled	[CE]  ';'  expected	66	None	add
21	[BUG]  [BUGGY]  n  =  this.scaleFactor.doubleValue()  +  1;  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  this.scaleFactor.doubleValue()  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  this.scaleFactor.doubleValue()  +  1;	  n    =    this.scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	85	None	replace
22	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p0  -  cPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(p0  -  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p0  -  cPrev);	  n    =    scaleFactor.abs(p0    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	73	None	replace
23	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p1  -  dPrev);  [CE]  cannot  find  symbol  p1  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(p1  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p1  -  dPrev);	  n    =    scaleFactor.abs(p0    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  p1	73	None	replace
24	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  p0);	  n    =    scaleFactor.evaluate(dPrev,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	64	None	replace
25	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  cN);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  cN);	  n    =    scaleFactor.evaluate(dPrev,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	64	None	replace
26	[BUG]  [BUGGY]  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
27	[BUG]  [BUGGY]  p0  =  p1;  int  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  int  p0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  int  p0  =  p2;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	17	None	replace
28	[BUG]  [BUGGY]  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  p0  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  p0  =  dPrev;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
29	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(p0  -  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
30	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  cN,  p0);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	4	None	replace
31	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    0;    n  =  0;	  	compilable	  [FE]  ConvergenceException  	7	12	add
32	[BUG]  [BUGGY]  n  =  0;  n  =  0;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    n  =  0;	  	compilable	  [FE]  ConvergenceException  	7	12	add
33	[BUG]  [BUGGY]  n  =  0;  int  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  int  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    int  n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
34	[BUG]  [BUGGY]  n  =  0;  double  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  double  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    double  n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
35	[BUG]  [BUGGY]  n  =  0;  (n  =  0;  [CE]  ')'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  (n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    (n  =  0;	  	non-compiled	[CE]  ')'  expected	7	None	add
36	[BUG]  [BUGGY]  n  =  dPrev.abs(p0  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(p0  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(p0  -  dPrev);	  n    =    p0.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
37	[BUG]  [BUGGY]  n  =  dPrev.abs(p0  -  p0);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(p0  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(p0  -  p0);	  n    =    p0.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
38	[BUG]  [BUGGY]  n  =  p0.abs(cPrev  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  p0.abs(cPrev  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(cPrev  -  dPrev);	  n    =    p0.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
39	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  0,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  0,  maxIterations);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  0,  maxIterations);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	62	None	replace
40	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  3);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  3);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  3);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	62	None	replace
41	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  p0,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  p0,  maxIterations);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  p0,  maxIterations);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	62	None	replace
42	[BUG]  [BUGGY]  n  =  cPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  cPrev.doubleValue();  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cPrev.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
43	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
44	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
45	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  dPrev;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
46	[BUG]  [BUGGY]  dPrev  =  q1  /  dPrev;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  dPrev;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
47	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  q2;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  OutOfRangeException  	56	12	replace
48	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  dPrev  /  q1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  q2;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  OutOfRangeException  	56	12	replace
49	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  q2;  dPrev  =  p0  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  OutOfRangeException  	56	12	replace
50	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  q2;  dPrev  =  p0  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  OutOfRangeException  	56	12	replace
51	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  p0  +  1);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  p0  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  p0  +  1);	  n    =    scaleFactor.evaluate(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
52	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon  +  1);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  epsilon  +  1);	  n    =    scaleFactor.evaluate(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
53	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  *  1);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  *  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon  *  1);	  n    =    scaleFactor.evaluate(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
54	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  cN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	27	8	replace
55	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  cN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	27	8	replace
56	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  p0;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	27	12	replace
57	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  p0;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	27	12	replace
58	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n        =        1;        n    =    2;    n  =  1;  n  =  2;	  	compilable	  [FE]  ConvergenceException  	44	10	add
59	[BUG]  [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    2;    n  =  1;  n  =  2;	  	compilable	  [FE]  ConvergenceException  	44	10	add
60	[BUG]  [BUGGY]  n    =    1;    n  =  2;  int  n  =  1;  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  int  n  =  1;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    2;    int  n  =  1;  n  =  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	44	None	add
61	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n        =        1;        n    =    2;    n  =  1;  n  =  3;	  	compilable	  [FE]  OutOfRangeException  	44	7	add
62	[BUG]  [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  3;  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    2;    n  =  1;  n  =  3;	  	compilable	  [FE]  OutOfRangeException  	44	7	add
63	[BUG]  [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  2);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  2;  n  =  1;  n  =  2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    2;    n  =  1;  n  =  2);	  	non-compiled	[CE]  ';'  expected	44	None	add
64	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n        =        1;        n    =    1;    n  =  1;  n  =  1;	  	compilable	  [FE]  OutOfRangeException  	41	7	add
65	[BUG]  [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    1;    n  =  1;  n  =  1;	  	compilable	  [FE]  OutOfRangeException  	41	7	add
66	[BUG]  [BUGGY]  n    =    1;    n  =  1;  int  n  =  1;  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  int  n  =  1;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    1;    int  n  =  1;  n  =  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	41	None	add
67	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  2;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n        =        1;        n    =    1;    n  =  2;  n  =  1;	  	compilable	  [FE]  OutOfRangeException  	41	7	add
68	[BUG]  [BUGGY]  n    =    1;    n  =  1;  n  =  2;  n  =  1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  2;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    1;    n  =  2;  n  =  1;	  	compilable	  [FE]  OutOfRangeException  	41	7	add
69	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n        =        1;        n    =    1;    n  =  1;  n  =  2;	  	compilable	  [FE]  ConvergenceException  	41	10	add
70	[BUG]  [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  2;  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  1;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    1;    n  =  1;  n  =  2;	  	compilable	  [FE]  ConvergenceException  	41	10	add
71	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  p0,  q1,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  p0,  q1,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	65	None	replace
72	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev,  q1,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  dPrev,  q1,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	65	None	replace
73	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN,  q1,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN,  q1,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	65	None	replace
74	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cPrev,  dPrev,  q1,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cPrev,  dPrev,  q1,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	65	None	replace
75	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  *  cN);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
76	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
77	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
78	[BUG]  [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(p0  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
79	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
80	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
81	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
82	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2  +  1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
83	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q1  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  dPrev  /  q1  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
84	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q1  +  1;  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q1  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  dPrev  /  q1  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
85	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
86	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev  +  1;  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
87	[BUG]  [BUGGY]  n  =  dPrev.abs(cN  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(cN  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(cN  -  dPrev);	  n    =    cN.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
88	[BUG]  [BUGGY]  n  =  cN.abs(p0  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  cN.abs(p0  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cN.abs(p0  -  dPrev);	  n    =    cN.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
89	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(p0  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(p0  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
90	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(p0  /  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(p0  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
91	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  OutOfRangeException  	24	11	add
92	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  OutOfRangeException  	24	11	add
93	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2);	  	non-compiled	[CE]  ';'  expected	24	None	add
94	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2,;  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2,;	  	non-compiled	[CE]  ';'  expected	24	None	add
95	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p0;  p0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p0;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  cannot  find  symbol  p2	19	None	replace
96	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  cannot  find  symbol  p1	19	None	replace
97	[BUG]  [BUGGY]  n  =  dPrev.abs(dPrev  /  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(dPrev  /  scaleFactor);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(dPrev  /  scaleFactor);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
98	[BUG]  [BUGGY]  n  =  cN.abs(dPrev  /  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  cN.abs(dPrev  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cN.abs(dPrev  /  dPrev);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
99	[BUG]  [BUGGY]  n  =  p0.abs(dPrev  /  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  p0.abs(dPrev  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(dPrev  /  dPrev);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	72	None	replace
100	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p0  =  p1;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	16	None	replace
101	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cPrev  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cPrev  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  OutOfRangeException  	32	7	replace
102	[BUG]  [BUGGY]  p0  =  cPrev  /  dPrev;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cPrev  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cPrev  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  OutOfRangeException  	32	7	replace
103	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cN  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  ConvergenceException  	32	6	replace
104	[BUG]  [BUGGY]  p0  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  ConvergenceException  	32	6	replace
105	[BUG]  [BUGGY]  p0  =  dPrev  /  p1;  [CE]  cannot  find  symbol  p1  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev  /  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev  /  p1;	  p0    =    p1    /    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	32	None	replace
106	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    2;    n  =  2;	  	compilable	  [FE]  ConvergenceException  	9	10	add
107	[BUG]  [BUGGY]  n  =  2;  n  =  2;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  2;	  	compilable	  [FE]  ConvergenceException  	9	10	add
108	[BUG]  [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CE]  'else'  without  'if'  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
109	[BUG]  [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [CE]  'else'  without  'if'  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
110	[BUG]  [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CE]  'else'  without  'if'  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
111	[BUG]  [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  [CE]  'else'  without  'if'  [FE]            OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  2;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);	  	non-compiled	[CE]  'else'  without  'if'	9	None	add
112	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  dPrev;	  dPrev    =    q2    /    dPrev;    	compilable	  [FE]  ConvergenceException  	81	12	replace
113	[BUG]  [BUGGY]  dPrev  =  p0  /  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  dPrev;	  dPrev    =    q2    /    dPrev;    	compilable	  [FE]  ConvergenceException  	81	12	replace
114	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  cN);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  cN);	  n    =    scaleFactor.evaluate(x,    hN);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	78	None	replace
115	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  y);  [CE]  cannot  find  symbol  y  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  y);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  y);	  n    =    scaleFactor.evaluate(x,    hN);    	non-compiled	[CE]  cannot  find  symbol  y	78	None	replace
116	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	95	11	add
117	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	95	11	add
118	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    p1  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  p1	95	None	add
119	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    p0  =  dPrev);	  	non-compiled	[CE]  ';'  expected	95	None	add
120	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    p0  =  dPrev.;	  	non-compiled	[CE]  <identifier>  expected	95	None	add
121	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	22	7	add
122	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	22	7	add
123	[BUG]  [BUGGY]  p0  =  cN;  p1  =  cN;  [CE]  cannot  find  symbol  p1  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p1  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    p1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	22	None	add
124	[BUG]  [BUGGY]  p0  =  cN;  (p0  =  cN;  [CE]  ')'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  (p0  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    (p0  =  cN;	  	non-compiled	[CE]  ')'  expected	22	None	add
125	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    p0  =  cN);	  	non-compiled	[CE]  ';'  expected	22	None	add
126	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cPrev,  dPrev);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
127	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  P0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  P0  =  p1;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	18	None	replace
128	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  P0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  P0  =  p2;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	18	None	replace
129	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(p0  /  dPrev);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
130	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	68	7	add
131	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	68	7	add
132	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	68	7	add
133	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	68	7	add
134	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	68	None	add
135	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2,;  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2,;	  	non-compiled	[CE]  ';'  expected	68	None	add
136	[BUG]  [BUGGY]  p0  =  cN  /  p1;  [CE]  cannot  find  symbol  p1  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN  /  p1;	  p0    =    p1    /    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	33	None	replace
137	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  dPrev  /  cN;	  p0    =    p1    /    cN;    	compilable	  [FE]  ConvergenceException  	33	12	replace
138	[BUG]  [BUGGY]  p0  =  dPrev  /  cN;  [FE]  ConvergenceException  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev  /  cN;	  p0    =    p1    /    cN;    	compilable	  [FE]  ConvergenceException  	33	12	replace
139	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hPrev  /  cN;	  p0    =    p1    /    cN;    	compilable	  [FE]  ConvergenceException  	33	12	replace
140	[BUG]  [BUGGY]  p0  =  hPrev  /  cN;  [FE]  ConvergenceException  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hPrev  /  cN;	  p0    =    p1    /    cN;    	compilable	  [FE]  ConvergenceException  	33	12	replace
141	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  dPrev,  p0);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	48	None	replace
142	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cPrev,  dPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
143	[BUG]  [BUGGY]  n  =  Math.min(p0,  cPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(p0,  cPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(p0,  cPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
144	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2);	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	57	None	replace
145	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2);	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	57	None	replace
146	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2);	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	57	None	replace
147	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    cN    /    q2;    p0  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	91	7	add
148	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	91	7	add
149	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    cN    /    q2;    p0  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	91	7	add
150	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	91	7	add
151	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	91	None	add
152	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,;  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q2,;	  	non-compiled	[CE]  ';'  expected	91	None	add
153	[BUG]  [BUGGY]  double  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  double  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	double  n  =  1;	  n    =    1;    double    n    =    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	46	None	replace
154	[BUG]  [BUGGY]  n  =  0;  double  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  double  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  0;  double  n  =  1;	  n    =    1;    double    n    =    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	46	None	replace
155	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  -  cPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
156	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
157	[BUG]  [BUGGY]  n  =  Math.max(p0,  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(p0,  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(p0,  cN);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
158	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2,;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	58	None	replace
159	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2,;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	58	None	replace
160	[BUG]  [BUGGY]  n  =  dPrev.abs(cPrev  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(cPrev  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(cPrev  -  dPrev);	  n    =    dPrev.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
161	[BUG]  [BUGGY]  n  =  dPrev.abs(dPrev  -  deltaN);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(dPrev  -  deltaN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(dPrev  -  deltaN);	  n    =    dPrev.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
162	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1  /  cN;	  p0    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	92	12	replace
163	[BUG]  [BUGGY]  p0  =  q1  /  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1  /  cN;	  p0    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	92	12	replace
164	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cN  /  q1;	  p0    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	92	7	replace
165	[BUG]  [BUGGY]  p0  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN  /  q1;	  p0    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	92	7	replace
166	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  p0  *  epsilon);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  p0  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
167	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(epsilon,  cN  *  dPrev);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
168	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon  +  1);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
169	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  epsilon  *  cN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
170	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
171	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
172	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
173	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
174	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
175	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
176	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  hN);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cPrev,  hN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cPrev,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
177	[BUG]  [BUGGY]  n  =  Math.max(cN,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  hN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
178	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	26	11	add
179	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	26	11	add
180	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	26	11	add
181	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	26	11	add
182	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	26	None	add
183	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,;	  	non-compiled	[CE]  ';'  expected	26	None	add
184	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;	  	compilable	  [FE]  OutOfRangeException  	93	11	add
185	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2  +  1;	  	compilable	  [FE]  OutOfRangeException  	93	11	add
186	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2)  +  1;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2)  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2)  +  1;	  	non-compiled	[CE]  ';'  expected	93	None	add
187	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,  +  1;  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2,  +  1;	  	non-compiled	[CE]  ';'  expected	93	None	add
188	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1  +  1;	  	compilable	  [FE]  OutOfRangeException  	93	11	add
189	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1  +  1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1  +  1;	  	compilable	  [FE]  OutOfRangeException  	93	11	add
190	[BUG]  [BUGGY]  n  =  Math.min(p0,  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(p0,  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(p0,  cN);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
191	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  p0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  p0);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
192	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  cPrev);	  n    =    Math.min(cPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
193	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  p1);  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  p1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  p1);	  n    =    scaleFactor.evaluate(x,    p0);    	non-compiled	[CE]  cannot  find  symbol  p1	63	None	replace
194	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  q1);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  q1);	  n    =    scaleFactor.evaluate(x,    p0);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	63	None	replace
195	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  0;  n  =  1;	  n    =    1;    n    =    1;    	compilable	  [FE]  ConvergenceException  	42	12	replace
196	[BUG]  [BUGGY]  n  =  0;  n  =  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  0;  n  =  1;	  n    =    1;    n    =    1;    	compilable	  [FE]  ConvergenceException  	42	12	replace
197	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2;	  	compilable	  [FE]  OutOfRangeException  	28	11	add
198	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2;	  	compilable	  [FE]  OutOfRangeException  	28	11	add
199	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2);	  	non-compiled	[CE]  ';'  expected	28	None	add
200	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2,;	  	non-compiled	[CE]  ';'  expected	28	None	add
201	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    q1    /    q2;    dPrev  =  q2  /  q2;	  	compilable	  [FE]  OutOfRangeException  	28	11	add
202	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [FE]  OutOfRangeException  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q2  /  q2;	  	compilable	  [FE]  OutOfRangeException  	28	11	add
203	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1  /  hPrev;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
204	[BUG]  [BUGGY]  p0  =  q1  /  hPrev;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1  /  hPrev;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
205	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1  /  hN;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
206	[BUG]  [BUGGY]  p0  =  q1  /  hN;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1  /  hN;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
207	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cPrev;	  p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	23	7	replace
208	[BUG]  [BUGGY]  p0  =  cPrev;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cPrev;	  p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	23	7	replace
209	[BUG]  [BUGGY]  n  =  Math.max(p0,  cPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(p0,  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(p0,  cPrev);	  n    =    Math.max(cPrev,    p0);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
210	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  *  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
211	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  p0  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
212	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
213	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  +  1,  p0);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  +  1,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  +  1,  p0);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	49	None	replace
214	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  -  cN);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(dPrev  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  -  cN);	  n    =    scaleFactor.abs(cN    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	71	None	replace
215	[BUG]  [BUGGY]  n  =  p0.abs(cN  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  p0.abs(cN  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(cN  -  dPrev);	  n    =    scaleFactor.abs(cN    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	71	None	replace
216	[BUG]  [BUGGY]  int  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  n  =  2;	  n    =    1;    int    n    =    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
217	[BUG]  [BUGGY]  int  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  n  =  1;	  n    =    1;    int    n    =    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
218	[BUG]  [BUGGY]  Integer  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  Integer  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	Integer  n  =  2;	  n    =    1;    int    n    =    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
219	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    q1    /    q2;    p0  =  q1  /  q2;	  	compilable	  [FE]  ConvergenceException  	30	11	add
220	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2;	  	compilable	  [FE]  ConvergenceException  	30	11	add
221	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  epsilon;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  epsilon;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2,  epsilon;	  	non-compiled	[CE]  ';'  expected	30	None	add
222	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2);	  	non-compiled	[CE]  ';'  expected	30	None	add
223	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  cN;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2,  cN;	  	non-compiled	[CE]  ';'  expected	30	None	add
224	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p0;  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  (p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	82	None	replace
225	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p2;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  (p0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  (p0  =  p2;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	82	None	replace
226	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    3;    n  =  3;	  	compilable	  [FE]  OutOfRangeException  	75	7	add
227	[BUG]  [BUGGY]  n  =  3;  n  =  3;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;	  	compilable	  [FE]  OutOfRangeException  	75	7	add
228	[BUG]  [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	75	None	add
229	[BUG]  [BUGGY]  n  =  3;  n  =  3;  this.lastScaleFactor  =  p0;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  this.lastScaleFactor  =  p0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  this.lastScaleFactor  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	75	None	add
230	[BUG]  [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue(x);  [CE]  cannot  find  symbol  scaleFactor  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue(x);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue(x);	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	75	None	add
231	[BUG]  [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();  break;  [CE]  cannot  find  symbol  scaleFactor  [FE]            ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();  break;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  this.scaleFactor  =  scaleFactor.doubleValue();  break;	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	75	None	add
232	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  p0);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	90	None	replace
233	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  DEFAULT_EPSILON);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	90	None	replace
234	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  hN);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  hN);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	90	None	replace
235	[BUG]  [BUGGY]  n  =  Math.max(cN,  q1);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  q1);	  n    =    Math.max(dPrev,    q1);    	non-compiled	[CE]  possible  loss  of  precision	77	None	replace
236	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	55	11	add
237	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1;	  	compilable	  [FE]  OutOfRangeException  	55	11	add
238	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1);	  	non-compiled	[CE]  ';'  expected	55	None	add
239	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q1;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	55	None	add
240	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  n);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  n);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	55	None	add
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev    =    q2    /    dPrev;    dPrev  =  q2  /  dPrev;	  	compilable	  [FE]  AssertionError  	80	2	add
242	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q2    /    dPrev;    dPrev  =  q2  /  dPrev;	  	compilable	  [FE]  AssertionError  	80	2	add
243	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dprev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q2    /    dPrev;    dPrev  =  q2  /  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	80	None	add
244	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dPrev);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q2    /    dPrev;    dPrev  =  q2  /  dPrev);	  	non-compiled	[CE]  ';'  expected	80	None	add
245	[BUG]  [BUGGY]  n  =  p0.abs(dPrev  -  p0);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  p0.abs(dPrev  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(dPrev  -  p0);	  n    =    scaleFactor.abs(dPrev    -    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	70	None	replace
246	[BUG]  [BUGGY]  n  =  cN.abs(dPrev  -  p0);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  cN.abs(dPrev  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  cN.abs(dPrev  -  p0);	  n    =    scaleFactor.abs(dPrev    -    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	70	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	15	2	add
248	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	15	2	add
249	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	15	None	add
250	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	15	None	add
251	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]          AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    P0  =  p0;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  P0	15	None	add
252	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  q1;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  OutOfRangeException  	25	12	replace
253	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  q1;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  OutOfRangeException  	25	12	replace
254	[BUG]  [BUGGY]  dPrev  =  p1  /  q2;  [CE]  cannot  find  symbol  p1  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p1  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p1  /  q2;	  dPrev    =    p0    /    q2;    	non-compiled	[CE]  cannot  find  symbol  p1	25	None	replace
255	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  /  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	34	None	replace
256	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q2;	  p0    =    q1;    	compilable	  [FE]  ConvergenceException  	67	12	replace
257	[BUG]  [BUGGY]  p0  =  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q2;	  p0    =    q1;    	compilable	  [FE]  ConvergenceException  	67	12	replace
258	[BUG]  [BUGGY]  Integer  n  =  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  Integer  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	Integer  n  =  1;	  n    =    1;    int    n    =    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	43	None	replace
259	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  q1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	29	12	replace
260	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  q1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	29	12	replace
261	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  q2  +  1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	29	12	replace
262	[BUG]  [BUGGY]  dPrev  =  q1  /  q2  +  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  q2  +  1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	29	12	replace
263	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
264	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
265	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
266	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2  +  1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
267	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  /  hN);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(dPrev  /  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  /  hN);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
268	[BUG]  [BUGGY]  n  =  scaleFactor.abs(cN  /  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(cN  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(cN  /  dPrev);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
269	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p0  /  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(p0  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p0  /  dPrev);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
270	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  /  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(dPrev  /  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  /  p0);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
271	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  *  hN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
272	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  int  dPrev  =  p0  /  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  q2;  int  dPrev  =  p0  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    p0    /    q2;    int  dPrev  =  p0  /  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
273	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2  +  1;  dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2    +    1;    dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	93	None	add
274	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  hPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  hPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  hPrev);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	90	None	replace
275	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  hN  +  1);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  hN  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  hN  +  1);	  n    =    scaleFactor.evaluate(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
276	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  +  2);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon  +  2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon  +  2);	  n    =    scaleFactor.evaluate(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
277	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(q1  /  dPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	34	None	replace
278	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  p0;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	25	12	replace
279	[BUG]  [BUGGY]  dPrev  =  q2  /  p0;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  p0;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	25	12	replace
280	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  p0  /  hN;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  OutOfRangeException  	25	7	replace
281	[BUG]  [BUGGY]  dPrev  =  p0  /  hN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  p0  /  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  p0  /  hN;	  dPrev    =    p0    /    q2;    	compilable	  [FE]  OutOfRangeException  	25	7	replace
282	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  1;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  1;  n  =  3;	  n    =    1;    n    =    2;    	compilable	  [FE]  ConvergenceException  	45	10	replace
283	[BUG]  [BUGGY]  n  =  1;  n  =  3;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  1;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  1;  n  =  3;	  n    =    1;    n    =    2;    	compilable	  [FE]  ConvergenceException  	45	10	replace
284	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  dPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
285	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	16	None	replace
286	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	16	None	replace
287	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
288	[BUG]  [BUGGY]  n  =  2;  int  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  int  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    int  n  =  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
289	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    2;    n  =  3;	  	compilable	  [FE]  OutOfRangeException  	9	7	add
290	[BUG]  [BUGGY]  n  =  2;  n  =  3;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    n  =  3;	  	compilable	  [FE]  OutOfRangeException  	9	7	add
291	[BUG]  [BUGGY]  n  =  2;  (n  =  2;  [CE]  ')'  expected  [FE]        OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  (n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    (n  =  2;	  	non-compiled	[CE]  ')'  expected	9	None	add
292	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q1  /  q2  +  1;	  p0    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	31	12	replace
293	[BUG]  [BUGGY]  p0  =  q1  /  q2  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q1  /  q2  +  1;	  p0    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	31	12	replace
294	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  cN  /  dPrev;	  dPrev    =    q2    /    dPrev;    	compilable	  [FE]  ConvergenceException  	81	12	replace
295	[BUG]  [BUGGY]  dPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  cN  /  dPrev;	  dPrev    =    q2    /    dPrev;    	compilable	  [FE]  ConvergenceException  	81	12	replace
296	[BUG]  [BUGGY]  p0  =  p2;  (p0  =  p0;  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  (p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	82	None	replace
297	[BUG]  [BUGGY]  n  =  Math.min(q1,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(q1,  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(q1,  dPrev);	  n    =    Math.min(dPrev,    q1);    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
298	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2);  dPrev  =  dPrev  /  q1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2);  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2);  dPrev  =  dPrev  /  q1;	  	non-compiled	[CE]  ';'  expected	55	None	add
299	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q1;  [CE]  cannot  find  symbol  dprev  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	55	None	add
300	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
301	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
302	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
303	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
304	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2);	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2);    	non-compiled	[CE]  ';'  expected	57	None	replace
305	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  hN  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  hN  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
306	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2)  /  dPrev;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  q2)  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q2    /    dPrev;    dPrev  =  q2)  /  dPrev;	  	non-compiled	[CE]  ';'  expected	80	None	add
307	[BUG]  [BUGGY]  n  =  Math.max(cN,  hPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  hPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  hPrev);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
308	[BUG]  [BUGGY]  p0  =  p2  /  dPrev;  [CE]  cannot  find  symbol  p2  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2  /  dPrev;	  p0    =    p1    /    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p2	32	None	replace
309	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p1;  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  p0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	89	None	replace
310	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q2,;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	58	None	replace
311	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hPrev  /  q1;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  OutOfRangeException  	69	7	replace
312	[BUG]  [BUGGY]  p0  =  hPrev  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hPrev  /  q1;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  OutOfRangeException  	69	7	replace
313	[BUG]  [BUGGY]  p0  =  scaleFactor;  p1  =  scaleFactor;  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  scaleFactor;  p1  =  scaleFactor;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  scaleFactor;  p1  =  scaleFactor;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	88	None	replace
314	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hPrev;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	23	6	replace
315	[BUG]  [BUGGY]  p0  =  hPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hPrev;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	23	6	replace
316	[BUG]  [BUGGY]  n  =  Math.max(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(hN,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(hN,  dPrev);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
317	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  p0,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  p0,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	65	None	replace
318	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1,  q2,  p0);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  q1,  q2,  p0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  q1,  q2,  p0);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	65	None	replace
319	[BUG]  [BUGGY]  n  =  3;  int  n  =  3;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  int  n  =  3;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    int  n  =  3;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	75	None	add
320	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  4;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n    =    3;    n  =  4;	  	compilable	  [FE]  ConvergenceException  	75	9	add
321	[BUG]  [BUGGY]  n  =  3;  n  =  4;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  4;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  4;	  	compilable	  [FE]  ConvergenceException  	75	9	add
322	[BUG]  [BUGGY]  n  =  3;  int  n  =  4;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  int  n  =  4;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    int  n  =  4;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	75	None	add
323	[BUG]  [BUGGY]  n  =  scaleFactor.abs(cN  -  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(cN  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(cN  -  p0);	  n    =    scaleFactor.abs(dPrev    -    p0);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	70	None	replace
324	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p1  -  p0);  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(p1  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p1  -  p0);	  n    =    scaleFactor.abs(dPrev    -    p0);    	non-compiled	[CE]  cannot  find  symbol  p1	70	None	replace
325	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
326	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  cN  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
327	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
328	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
329	[BUG]  [BUGGY]  n  =  1;  int  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  1;  int  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  1;  int  n  =  0;	  n    =    1;    int    n    =    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
330	[BUG]  [BUGGY]  n  =  0;  m  =  0;  [CE]  cannot  find  symbol  m  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  m  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    m  =  0;	  	non-compiled	[CE]  cannot  find  symbol  m	7	None	add
331	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(q1  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(q1  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
332	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2,;	  	non-compiled	[CE]  ';'  expected	30	None	add
333	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q1  /  q2,  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q1  /  q2,	  	non-compiled	[CE]  ';'  expected	30	None	add
334	[BUG]  [BUGGY]  n  =  scaleFactor.abs(p0  -  p0);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(p0  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(p0  -  p0);	  n    =    scaleFactor.abs(p0    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	73	None	replace
335	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  p0);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(cN  -  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(cN  -  p0);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
336	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
337	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    p0  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	95	None	add
338	[BUG]  [BUGGY]  p0  =  dPrev;  (p0  =  dPrev;  [CE]  ')'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  (p0  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    (p0  =  dPrev;	  	non-compiled	[CE]  ')'  expected	95	None	add
339	[BUG]  [BUGGY]  n  =  dPrev.abs(dPrev  -  cN);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(dPrev  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(dPrev  -  cN);	  n    =    dPrev.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
340	[BUG]  [BUGGY]  n  =  dPrev.abs(hN  -  dPrev);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev.abs(hN  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev.abs(hN  -  dPrev);	  n    =    dPrev.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
341	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hN;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	96	7	replace
342	[BUG]  [BUGGY]  p0  =  hN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hN;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	96	7	replace
343	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  *  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  *  hN);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
344	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  n);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  n);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  n);	  n    =    scaleFactor.evaluate(x,    hN);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	78	None	replace
345	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  q2);	  n    =    Math.min(cN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
346	[BUG]  [BUGGY]  n  =  Math.min(cN,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cN,  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  q1,  q2);	  n    =    Math.min(cN,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
347	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	53	None	add
348	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(q1  /  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(q1  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
349	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p0  =  p0;  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p0  =  p0;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
350	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  P0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	18	None	replace
351	[BUG]  [BUGGY]  p0  =  p2;  P0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  P0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	18	None	replace
352	[BUG]  [BUGGY]  p0  =  p1;  int  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  int  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	17	None	replace
353	[BUG]  [BUGGY]  p0  =  p2;  int  p0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  int  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	17	None	replace
354	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  hN);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  hN);	  n    =    scaleFactor.evaluate(dPrev,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	64	None	replace
355	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(dPrev,  epsilon,  maxIterations);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(dPrev,  epsilon,  maxIterations);	  n    =    scaleFactor.evaluate(dPrev,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	64	None	replace
356	[BUG]  [BUGGY]  n  =  p0.abs(dPrev  -  cN);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  p0.abs(dPrev  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  p0.abs(dPrev  -  cN);	  n    =    p0.abs(dPrev    -    dPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
357	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  int  p0  =  p0;  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  int  p0  =  p0;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    int  p0  =  p0;  p0  =  p0;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
358	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  /  cN);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(dPrev  /  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  /  cN);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
359	[BUG]  [BUGGY]  n  =  scaleFactor.abs(dPrev  *  dPrev);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.abs(dPrev  *  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.abs(dPrev  *  dPrev);	  n    =    scaleFactor.abs(dPrev    /    dPrev);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	72	None	replace
360	[BUG]  [BUGGY]  n  =  dPrev,  cN.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev,  cN.doubleValue();  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev,  cN.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  ';'  expected	39	None	replace
361	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
362	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	54	12	replace
363	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q2  /  cN;	  p0    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	92	12	replace
364	[BUG]  [BUGGY]  p0  =  q2  /  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q2  /  cN;	  p0    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	92	12	replace
365	[BUG]  [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2,;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q2  /  dPrev;  dPrev  =  dPrev  /  q2,;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2,;    	non-compiled	[CE]  ';'  expected	58	None	replace
366	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(q2  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(q2  -  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
367	[BUG]  [BUGGY]  n  =  0;  (n  =  0);  [CE]  not  a  statement  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  (n  =  0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    0;    (n  =  0);	  	non-compiled	[CE]  not  a  statement	7	None	add
368	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  x);  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q1;  dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  x);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q1;    dPrev  =  dPrev  /  q2;  dPrev  =  dPrev  /  q1,  x);	  	non-compiled	[CE]  ';'  expected	55	None	add
369	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  q2);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  q2);	  n    =    scaleFactor.evaluate(x,    p0);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	63	None	replace
370	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,  p0);	  	non-compiled	[CE]  ';'  expected	26	None	add
371	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,  p0;	  	non-compiled	[CE]  ';'  expected	26	None	add
372	[BUG]  [BUGGY]  n  =  Math.min(cN,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cN,  hN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
373	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2  /  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  q2  /  hPrev;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
374	[BUG]  [BUGGY]  p0  =  q2  /  hPrev;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q2  /  hPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  q2  /  hPrev;	  p0    =    hPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	69	12	replace
375	[BUG]  [BUGGY]  n  =  dPrev,  cN.abs(dPrev  -  dPrev);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  dPrev,  cN.abs(dPrev  -  dPrev);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  dPrev,  cN.abs(dPrev  -  dPrev);	  n    =    cN.abs(dPrev    -    dPrev);    	non-compiled	[CE]  ';'  expected	51	None	replace
376	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q1);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(epsilon,  q1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(epsilon,  q1);	  n    =    Math.min(dPrev,    q1);    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
377	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	16	6	replace
378	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	16	6	replace
379	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p0  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	16	None	replace
380	[BUG]  [BUGGY]  p0  =  cN;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p1  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	88	None	replace
381	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  p1  =  p2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	88	None	replace
382	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(q2  -  cN);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(q2  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
383	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  1;  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  1;  n  =  0;	  n    =    1;    n    =    2;    	compilable	  [FE]  OutOfRangeException  	45	7	replace
384	[BUG]  [BUGGY]  n  =  1;  n  =  0;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  1;  n  =  0;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  1;  n  =  0;	  n    =    1;    n    =    2;    	compilable	  [FE]  OutOfRangeException  	45	7	replace
385	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	n  =  0;  n  =  2;	  n    =    1;    n    =    2;    	compilable	  [FE]  OutOfRangeException  	45	7	replace
386	[BUG]  [BUGGY]  n  =  0;  n  =  2;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  0;  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  0;  n  =  2;	  n    =    1;    n    =    2;    	compilable	  [FE]  OutOfRangeException  	45	7	replace
387	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  i);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  i);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  i);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
388	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  q2);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  q2);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxPower);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	90	None	replace
389	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
390	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2  +  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2  +  1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q2    +    1;    	compilable	  [FE]  ConvergenceException  	94	12	replace
391	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(dPrev,  cN  -  1);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
392	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p1;  p0  =  p2;  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p1;  p0  =  p2;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
393	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2;  p0  =  p0;  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2;  p0  =  p0;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
394	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p0;  p0  =  p2;  }  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p0;  p0  =  p2;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
395	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(cN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
396	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  /  cN  +  1);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
397	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.abs(dPrev  /  cN,  p0);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	37	None	replace
398	[BUG]  [BUGGY]  p0  =  p2  /  cN;  [CE]  cannot  find  symbol  p2  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  p2  /  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  p2  /  cN;	  p0    =    p1    /    cN;    	non-compiled	[CE]  cannot  find  symbol  p2	33	None	replace
399	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  dPrev;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  q1  /  dPrev;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
400	[BUG]  [BUGGY]  dPrev  =  q1  /  dPrev;  dPrev  =  dPrev  /  q2;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  dPrev;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  q1  /  dPrev;  dPrev  =  dPrev  /  q2;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
401	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
402	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q1;	          dPrev    =    dPrev    /    q2;    dPrev    =    dPrev    /    q1;    	compilable	  [FE]  ConvergenceException  	56	12	replace
403	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,  q1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,  q1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q2,  q1;	  	non-compiled	[CE]  ';'  expected	91	None	add
404	[BUG]  [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,  q2;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN  /  q2;  p0  =  cN  /  q2,  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN    /    q2;    p0  =  cN  /  q2,  q2;	  	non-compiled	[CE]  ';'  expected	91	None	add
405	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    dPrev;    dPrev  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	95	11	add
406	[BUG]  [BUGGY]  p0  =  dPrev;  dPrev  =  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    dPrev;    dPrev  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	95	11	add
407	[BUG]  [BUGGY]  n  =  Math.max(cN,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  q1,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  q1,  q2);	  n    =    Math.max(dPrev,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	65	None	replace
408	[BUG]  [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  0);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  scaleFactor.evaluate(x,  epsilon,  0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  scaleFactor.evaluate(x,  epsilon,  0);	  n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	62	None	replace
409	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  hN  /  q2;	  p0    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	31	6	replace
410	[BUG]  [BUGGY]  p0  =  hN  /  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hN  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  hN  /  q2;	  p0    =    q1    /    q2;    	compilable	  [FE]  ConvergenceException  	31	6	replace
411	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	89	None	replace
412	[BUG]  [BUGGY]  n    =    1;    n  =  1;  n  =  1,  n  =  1;  n  =  1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n    =    1;    n  =  1;  n  =  1,  n  =  1;  n  =  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n        =        1;        n    =    1;    n  =  1,  n  =  1;  n  =  1;	  	non-compiled	[CE]  ';'  expected	41	None	add
413	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,  p0);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,  p0);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2,  p0);	  	non-compiled	[CE]  ';'  expected	28	None	add
414	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p1;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	15	None	add
415	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p1  =  p0;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          p0    =    p0;    p0  =  p0;  p1  =  p0;  p0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                p0        =        p0;        p0    =    p0;    p1  =  p0;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	15	None	add
416	[BUG]  [BUGGY]  int  p0  =  cN;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  p0  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  p0  =  cN;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
417	[BUG]  [BUGGY]  int  p0  =  epsilon;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  int  p0  =  epsilon;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	int  p0  =  epsilon;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
418	[BUG]  [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [CE]  'else'  without  'if'  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
419	[BUG]  [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  'else'  without  'if'  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
420	[BUG]  [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }  [CE]  'else'  without  'if'  [FE]        ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x);  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
421	[BUG]  [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  [CE]  'else'  without  'if'  [FE]          ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  3;  n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    3;    n  =  3;  }  else  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  DEFAULT_EPSILON,  x);	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
422	[BUG]  [BUGGY]  p0  =  cN;  p2  =  cN;  [CE]  cannot  find  symbol  p2  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p2  =  cN;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    p2  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p2	22	None	add
423	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    cN;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	22	11	add
424	[BUG]  [BUGGY]  p0  =  cN;  p0  =  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  p0  =  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    cN;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	22	11	add
425	[BUG]  [BUGGY]  n  =  2;  Neighbor  n  =  2;  [CE]  cannot  find  symbol  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  2;  Neighbor  n  =  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n    =    2;    Neighbor  n  =  2;	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
426	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q2  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    q1    /    q2;    p0  =  q2  /  q2;	  	compilable	  [FE]  ConvergenceException  	30	11	add
427	[BUG]  [BUGGY]  p0  =  q1  /  q2;  p0  =  q2  /  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1  /  q2;  p0  =  q2  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1    /    q2;    p0  =  q2  /  q2;	  	compilable	  [FE]  ConvergenceException  	30	11	add
428	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(cN,  dPrev  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
429	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
430	[BUG]  [BUGGY]  p0  =  cN;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  cN;  P0  =  p0;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  cN;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  P0	18	None	replace
431	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0  =  dPrev  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  ConvergenceException  	32	12	replace
432	[BUG]  [BUGGY]  p0  =  dPrev  /  dPrev;  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  dPrev  /  dPrev;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0  =  dPrev  /  dPrev;	  p0    =    p1    /    dPrev;    	compilable	  [FE]  ConvergenceException  	32	12	replace
433	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2  +  1;	  	compilable	  [FE]  ConvergenceException  	68	11	add
434	[BUG]  [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2  +  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  hPrev  /  q2;  p0  =  hPrev  /  q2  +  1;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    hPrev    /    q2;    p0  =  hPrev  /  q2  +  1;	  	compilable	  [FE]  ConvergenceException  	68	11	add
435	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1,  q2;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1,  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q1,  q2;	  	non-compiled	[CE]  ';'  expected	66	None	add
436	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1,  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]  p0  =  q1;  p0  =  q1,  q2);  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	p0    =    q1;    p0  =  q1,  q2);	  	non-compiled	[CE]  ';'  expected	66	None	add
437	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q2;  [CE]  cannot  find  symbol  dprev  [FE]    OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  dprev  /  q2;  dPrev  =  dPrev  /  q2;	  	non-compiled	[CE]  cannot  find  symbol  dprev	53	None	add
438	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
439	[BUG]  [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;      [BUGGY]          dPrev    =    dPrev    /    q2;    dPrev  =  dPrev  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;  [BUGGY]      n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	                dPrev        =        dPrev        /        q2;        dPrev    =    dPrev    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  dPrev  /  q2;	  	compilable	  [FE]  OutOfRangeException  	53	11	add
