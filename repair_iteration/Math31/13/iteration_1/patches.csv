bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  getScaleFactor(x);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(hPrev);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  +  getScaleFactor(hPrev);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(hPrev);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(x,  epsilon);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(x,  maxIterations);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  double  b  =  getB(0,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getB(0,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  epsilon);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  double  b  =  getB(x,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getB(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(x,  epsilon);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  double  b  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(0,  x);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  double  b  =  getB(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getB(0,  x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  x,  epsilon);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!Precision.equals(small,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
10	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  If  (!Precision.equals(small,  0.0,  hPrev))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  If  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    If  (!Precision.equals(small,  0.0,  hPrev))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
11	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  1.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  1.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!Precision.equals(small,  1.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
12	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.00,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.00,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!Precision.equals(small,  0.00,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
13	[BUG]  [BUGGY]  double  n  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  n  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  double  n  =  getA(0);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  n  =  getA(0);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(0);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  double  n  =  getA0(0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  n  =  getA0(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  double  small  =  epsilon.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  small  =  epsilon.doubleValue();  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon.doubleValue();	      int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  float  small  =  epsilon.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  float  small  =  epsilon.doubleValue();  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	float  small  =  epsilon.doubleValue();	      int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon.doubleValue()  +  1;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  +  1;	      int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  double  small  =  epsilon  +  maxIterations;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  small  =  epsilon  +  maxIterations;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  maxIterations;	      int    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  int  small  =  epsilon  +  hN;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  +  hN;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  hN;	      int    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  int  small  =  epsilon  *  maxIterations;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  *  maxIterations;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  maxIterations;	      int    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  int  small  =  epsilon  +  hPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  +  hPrev;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  hPrev;	      int    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  double  small  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  small  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getA(0,  x);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  int  small  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  getA(0,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(0,  epsilon);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  getA(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(x,  epsilon);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  int  small  =  getScaleFactor(0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  getScaleFactor(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(0,  x);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
27	[BUG]  [BUGGY]  if  (cN.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cN  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (cN.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cN.equals(small,  0.0,  hPrev))  {	  if    (dPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cN	10	None	replace
28	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (dPrev.equals(small,  0.0,  hN))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  hN))  {	  if    (dPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	10	None	replace
29	[BUG]  [BUGGY]  if  (small.equals(cPrev,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (small.equals(cPrev,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(cPrev,  0.0,  hPrev))  {	  if    (dPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	10	None	replace
30	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations);	      double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);	      double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if  (small.equals(x,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (small.equals(x,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(x,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
34	[BUG]  [BUGGY]  if  (epsilon.equals(small,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (epsilon.equals(small,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (epsilon.equals(small,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
35	[BUG]  [BUGGY]  if  (hPrev.equals(small,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (hPrev.equals(small,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (hPrev.equals(small,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
36	[BUG]  [BUGGY]  if  (dPrev.equals(hPrev,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  dPrev  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (dPrev.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(hPrev,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	17	None	replace
37	[BUG]  [BUGGY]  double  dPrev  =  getD(short,  epsilon);  [CE]  '.class'  expected  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(short,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(short,  epsilon);	      double    dPrev    =    getD(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	23	None	replace
38	[BUG]  [BUGGY]  double  dPrev  =  getD(small,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(small,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(small,  epsilon);	      double    dPrev    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
39	[BUG]  [BUGGY]  double  dPrev  =  getD(y,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(y,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(y,  epsilon);	      double    dPrev    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
40	[BUG]  [BUGGY]  double  i  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  i  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0,  x);	      int    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  double  i  =  getA(0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  i  =  getA(0);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0);	      int    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  double  i  =  getA0(0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  i  =  getA0(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(0,  x);	      int    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
43	[BUG]  [BUGGY]  if(small.equals(x,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(small.equals(x,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  0.0,  hPrev))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
44	[BUG]  [BUGGY]  if(small.equals(hPrev,  0.0,  x))  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(small.equals(hPrev,  0.0,  x))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(hPrev,  0.0,  x))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
45	[BUG]  [BUGGY]  if(x.equals(small,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(x.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(small,  0.0,  hPrev))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
46	[BUG]  [BUGGY]  if(s.equals(x,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  s  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(s.equals(x,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(s.equals(x,  0.0,  hPrev))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  cannot  find  symbol  s	19	None	replace
47	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
48	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  small);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  small);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  small);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
49	[BUG]  [BUGGY]  double  dPrev  =  getD(short,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(short,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(short,  epsilon,  maxIterations);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	20	None	replace
50	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (DECIMAL.equals(small,  0.0,  cPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  cPrev))  {	  if    (DECIMAL.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	8	None	replace
51	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (cPrev.equals(small,  0.0,  hN))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  hN))  {	  if    (cPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	9	None	replace
52	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (small.equals(hPrev,  0.0,  cPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  cPrev))  {	  if    (cPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	9	None	replace
53	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(x,  epsilon);	      double    dPrev    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(small);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small);	      double    dPrev    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(short);  [CE]  '.class'  expected  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(short);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(short);	      double    dPrev    =    getScaleFactor(x);    	non-compiled	[CE]  '.class'  expected	4	None	replace
56	[BUG]  [BUGGY]  double  dPrev  =  getDistance(small,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(small,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(small,  epsilon,  maxIterations);	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  1;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  1;	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  double  dPrev  =  getDistance(y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(y,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(y,  epsilon,  maxIterations);	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  n  =  getScaleFactor(small);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(small);	      int    n    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(x,  epsilon);	      int    n    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  int  n  =  getScaleFactor(short);  [CE]  '.class'  expected  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  n  =  getScaleFactor(short);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(short);	      int    n    =    getScaleFactor(x);    	non-compiled	[CE]  '.class'  expected	14	None	replace
62	[BUG]  [BUGGY]  int  n  =  getScaleFactor(size);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  n  =  getScaleFactor(size);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(size);	      int    n    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  1.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
64	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  1.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
65	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  cPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  cPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	7	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0.0,  x))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
67	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  x))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
69	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
70	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(x,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(0,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(0,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  epsilon,  maxIterations);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  x,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  if  (short.equals(hPrev,  0.0,  hN))  {  [CE]  class  expected  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (short.equals(hPrev,  0.0,  hN))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (short.equals(hPrev,  0.0,  hN))  {	  if    (small.equals(hPrev,    0.0,    prev))    {    	non-compiled	[CE]  class  expected	16	None	replace
75	[BUG]  [BUGGY]  if(small.equals(x,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(small.equals(x,  epsilon,  maxIterations))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
76	[BUG]  [BUGGY]  if(DECIMAL.equals(small,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  DECIMAL  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(DECIMAL.equals(small,  epsilon,  maxIterations))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(DECIMAL.equals(small,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  DECIMAL	18	None	replace
77	[BUG]  [BUGGY]  if(dPrev.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  dPrev  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(dPrev.equals(x,  epsilon,  maxIterations))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(dPrev.equals(x,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	18	None	replace
78	[BUG]  [BUGGY]  if(epsilon.equals(x,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(epsilon.equals(x,  epsilon,  maxIterations))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(epsilon.equals(x,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	18	None	replace
79	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hprev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hprev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!Precision.equals(small,  0.0,  hprev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
80	[BUG]  [BUGGY]  float  i  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  float  i  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	float  i  =  getA(0,  x);	      int    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  Double  i  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  Double  i  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(0,  x);	      int    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  cPrev  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(0,  x);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  y);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(0,  y);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  y);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);	      double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	1	None	replace
85	[BUG]  [BUGGY]  double  b  =  getB(1,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getB(1,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  x);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getScaleFactor(maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(maxIterations);	      double    dPrev    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  epsilon  =  getD(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon);	      double    dPrev    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
88	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon,  maxIterations);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  getScaleFactor(x);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  +  maxIterations;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  epsilon.doubleValue()  +  maxIterations;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  +  maxIterations;	      int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  if  (DEFAULT_EPSILON.equals(small,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (DEFAULT_EPSILON.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DEFAULT_EPSILON.equals(small,  0.0,  hPrev))  {	  if    (DECIMAL.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
93	[BUG]  [BUGGY]  if  (value.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  value  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (value.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (value.equals(small,  0.0,  hPrev))  {	  if    (DECIMAL.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
94	[BUG]  [BUGGY]  if(value.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  value  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(value.equals(x,  epsilon,  maxIterations))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(value.equals(x,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  value	18	None	replace
95	[BUG]  [BUGGY]  if(small.equals(x,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(small.equals(x,  0.0,  hN))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  0.0,  hN))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  cannot  find  symbol  hN	19	None	replace
96	[BUG]  [BUGGY]  if(short.equals(x,  0.0,  hPrev))  {  [CE]  class  expected  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if(short.equals(x,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(short.equals(x,  0.0,  hPrev))  {	  if(x.equals(hPrev,    0.0,    small))    {    	non-compiled	[CE]  class  expected	19	None	replace
97	[BUG]  [BUGGY]  if  (x.equals(small,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (x.equals(small,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (x.equals(small,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
98	[BUG]  [BUGGY]  if  (short.equals(hPrev,  0.0,  epsilon))  {  [CE]  class  expected  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (short.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (short.equals(hPrev,  0.0,  epsilon))  {	  if    (small.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  class  expected	17	None	replace
99	[BUG]  [BUGGY]  int  small  =  getB(0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  getB(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getB(0,  x);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
100	[BUG]  [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations);	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
101	[BUG]  [BUGGY]  double  dPrev  =  getDistance(short,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(short,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(short,  epsilon,  maxIterations);	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	3	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(x,  0.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
103	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(x,  0.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	7	2	replace
104	[BUG]  [BUGGY]  Double  n  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  Double  n  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
105	[BUG]  [BUGGY]  float  n  =  getA(0,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  float  n  =  getA(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	float  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
106	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!precision.equals(small,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!precision.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!precision.equals(small,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
107	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Paint.equals(small,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  if  (!Paint.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    hPrev))    {    if  (!Paint.equals(small,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
108	[BUG]  [BUGGY]  int  small  =  x  +  getScaleFactor(epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  x  +  getScaleFactor(epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  getScaleFactor(epsilon);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
109	[BUG]  [BUGGY]  int  small  =  a  +  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  a  +  getScaleFactor(x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  a  +  getScaleFactor(x);	      int    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
110	[BUG]  [BUGGY]  double  dPrev  =  getDistance(scale,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getDistance(scale,  x,  epsilon,  maxIterations);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(scale,  x,  epsilon,  maxIterations);	      double    dPrev    =    getDistance(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
111	[BUG]  [BUGGY]  int  small  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  getA(0,  x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(0,  x,  epsilon);	      int    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
112	[BUG]  [BUGGY]  int  small  =  x  +  maxIterations;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  int  small  =  x  +  maxIterations;  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  maxIterations;	      int    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  DECIMAL  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (DECIMAL.equals(small,  0.0,  x))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  x))  {	  if    (DECIMAL.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  DECIMAL	8	None	replace
114	[BUG]  [BUGGY]  if  (a.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  a  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  if  (a.equals(small,  0.0,  hPrev))  {  [BUGGY]    hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (a.equals(small,  0.0,  hPrev))  {	  if    (dPrev.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  a	10	None	replace
115	[BUG]  [BUGGY]  double  n  =  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  n  =  getScaleFactor(x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(x);	      int    n    =    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
116	[BUG]  [BUGGY]  double  b  =  getB(0,  y);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  b  =  getB(0,  y);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  y);	      double    b    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
117	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getA(0,  x  +  1);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  x  +  1);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);      [BUGGY]  double  dPrev  =  getD(a,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  epsilon);	      double    dPrev    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
