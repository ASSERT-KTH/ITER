projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(Precision.equals(hPrev,0.0,small)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,prev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(hPrev,0.0,small)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128inti=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){If(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.00,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatsmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+hPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cN.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(cPrev,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(hPrev.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(s.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(short);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(size);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(hPrev,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.0,hprev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floati=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DEFAULT_EPSILON.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(short,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatn=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Paint.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=a+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(scale,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,epsilon);
