bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	26	None	add
2	[BUG]  [BUGGY]    double  dPrev  =  getA(0,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getA(0,  x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getA(0,  x);		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
3	[BUG]  [BUGGY]    double  dPrev  =  getDistance(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getDistance(x,  epsilon,  maxIterations);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getDistance(x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	26	None	add
4	[BUG]  [BUGGY]    double  dPrev  =  getScaleFactor(x);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getScaleFactor(x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getScaleFactor(x);		non-compiled	[CE]  cannot  find  symbol	26	None	add
5	[BUG]  [BUGGY]    int  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]            AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  n  =  getA(0,  x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  n  =  getA(0,  x);		non-compiled	[CE]  possible  loss  of  precision	26	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0.0,  hPrev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	compilable	  [FE]  AssertionError  	25	2	replace
7	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  hPrev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	compilable	  [FE]  AssertionError  	25	2	replace
8	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  DECIMAL  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (DECIMAL.equals(small,  0.0,  hPrev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  hPrev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  cannot  find  symbol  DECIMAL	25	None	replace
9	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (cPrev.equals(small,  0.0,  hPrev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  hPrev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  cannot  find  symbol  cPrev	25	None	replace
10	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (dPrev.equals(small,  0.0,  hPrev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  hPrev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  cannot  find  symbol  dPrev	25	None	replace
11	[BUG]  [BUGGY]    int  small  =  epsilon  +  maxIterations;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  small  =  epsilon  +  maxIterations;  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  small  =  epsilon  +  maxIterations;		non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
12	[BUG]  [BUGGY]    int  small  =  epsilon.doubleValue();  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  small  =  epsilon.doubleValue();  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  small  =  epsilon.doubleValue();		non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
13	[BUG]  [BUGGY]    int  small  =  epsilon  +  getScaleFactor(x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  small  =  epsilon  +  getScaleFactor(x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  small  =  epsilon  +  getScaleFactor(x);		non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
14	[BUG]  [BUGGY]    int  n  =  getScaleFactor(x);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  n  =  getScaleFactor(x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  n  =  getScaleFactor(x);		non-compiled	[CE]  cannot  find  symbol	26	None	add
15	[BUG]  [BUGGY]    int  small  =  getA(0,  x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  small  =  getA(0,  x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  small  =  getA(0,  x);		non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
16	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  prev))  {  [CE]  cannot  find  symbol  prev  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (small.equals(hPrev,  0.0,  prev))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  prev))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  cannot  find  symbol  prev	25	None	replace
17	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if  (small.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  epsilon))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
18	[BUG]  [BUGGY]  if(DECIMAL.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  DECIMAL  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if(DECIMAL.equals(x,  epsilon,  maxIterations))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(DECIMAL.equals(x,  epsilon,  maxIterations))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  cannot  find  symbol  DECIMAL	25	None	replace
19	[BUG]  [BUGGY]  if(x.equals(hPrev,  0.0,  small))  {  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]  if(x.equals(hPrev,  0.0,  small))  {  [BUGGY]  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(hPrev,  0.0,  small))  {	if  (Precision.equals(hPrev,  0.0,  small))  {  	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
20	[BUG]  [BUGGY]    double  dPrev  =  getD(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getD(x,  epsilon,  maxIterations);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getD(x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	26	None	add
21	[BUG]  [BUGGY]    double  b  =  getB(0,  x);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  b  =  getB(0,  x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  b  =  getB(0,  x);		non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
22	[BUG]  [BUGGY]    int  i  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    int  i  =  getA(0,  x);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    int  i  =  getA(0,  x);		non-compiled	[CE]  possible  loss  of  precision	26	None	add
23	[BUG]  [BUGGY]    double  dPrev  =  getD(x,  epsilon);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);    [BUGGY]    double  dPrev  =  getD(x,  epsilon);  [BUGGY]  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	    double  dPrev  =  getD(x,  epsilon);		non-compiled	[CE]  cannot  find  symbol	26	None	add
