projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(Precision.equals(hPrev,0.0,small)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,prev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(hPrev,0.0,small)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128inti=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){If(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.00,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatsmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+hPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cN.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(cPrev,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(hPrev.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(s.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(short);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(size);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(hPrev,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Precision.equals(small,0.0,hprev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floati=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DEFAULT_EPSILON.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(short,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatn=getA(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hPrev)){if(!Paint.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=a+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(scale,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON,small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON,big);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON,large);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=hN+epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+hN+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(DECIMAL.equals(small,0.0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getN(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,n)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(1,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(short,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128DoubledPrev=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(0,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(x,hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+hPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*hPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=hPrev+epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+maxIterations+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(big.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(epsilon,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(scaleFactor.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations,scaleFactor);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations,small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(min,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon.doubleValue()*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon.doubleValue()+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=x+getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x*getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations)/1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations)+2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,y+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cN.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=x+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=n+maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(maxIterations,x,epsilon,scaleFactor);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(deFAULT_EPSILON,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,DEFAULT_EPSILON)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(hPrev.equals(small,0.0,DEFAULT_EPSILON)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon*getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*getScaleFactor(x,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*getScaleFactor(hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations)/1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations)+2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()*1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(cPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(big.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(short,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getN(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(int,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){if(!Precision.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){If(!Precision.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){if(!Precision.equals(x,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(x,small,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)){if(!Precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)){If(!Precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,small)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(short,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(dPrev,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(hPrev,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128DoubledPrev=getDistance(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(cN,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatsmall=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x,epsilon,maxIterations,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128If(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations,DEFAULT_EPSILON,small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations,1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,epsilon,maxIterations,DEFAULT_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(hPrev.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(small);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.00,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){if(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){If(!Precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){if(!Precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cN.equals(hPrev,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Paint.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,dPrev,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,epsilon,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+getScaleFactor(x,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,epsilon+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x+1,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(short,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon+getScaleFactor(hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(scale,y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(short);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon+getScaleFactor(hPrev,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublesmall=epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()+hPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon.doubleValue()/maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(x,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){if(!Precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){If(!Precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){if(!Precision.equals(small,1.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getB(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,cPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,dPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(small,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=maxIterations*epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!precision.equals(small,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getScaleFactor(size);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(size,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=a+getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=a+getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(a);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=getScale(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getS(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y+maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,scaleFactor,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(x,epsilon,maxIterations)-1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getB(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations)-1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getEpsilon(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon/getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getC(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=n+hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,y,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(maxIterations,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(small,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(hPrev.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(x,epsilon+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(short,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA0(small,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){if(!Precision.equals(small,0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getI(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=epsilon/maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,epsilon,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,epsilon,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getS(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getB(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(hPrev,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Paint.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x,epsilon,maxIterations+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(dPrev,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,b);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){if(!Precision.equals(x,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(short.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(value.equals(x,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cPrev.equals(small,0.0,q1)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getS(0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getA(1,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=maxIterations*getScaleFactor(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(small,0.0,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,epsilon,hN)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(dPrev.equals(small,0.0,q1)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(1,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,y+maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128floatsmall=epsilon.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(short,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA0(small,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(epsilon,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getEpsilon(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getN(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(short,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=epsilon*DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(min,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,epsilon,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getB(0,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getB(0,y+1,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(1,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)&&!precision.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)||!precision.equals(x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=a+getScaleFactor(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(a.equals(hPrev,0.0,epsilon)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(x,0.0,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(small,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intepsilon=getD(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intn=getScaleFactor(small,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=maxIterations-epsilon.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getScaleFactor(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA1(0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublei=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=scaleFactor+getScaleFactor(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){if(!precision.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0.0,x)){if(!Paint.equals(small,0.0,x)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getA(0,x+1,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(min,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getB(0,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(x,epsilon,maxIterations,DEFAULT_EPSILON,a);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(small.equals(DEFAULT_EPSILON,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(short,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublesmall=x+epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,1.0,hPrev)){if(!precision.equals(small,1.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublecPrev=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128DoubledPrev=getScaleFactor(small,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intdPrev=getScaleFactor(short,x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,epsilon,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128Doublen=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(cN.equals(hPrev,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getB(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x*maxIterations;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getDistance(small,x,epsilon,maxIterations)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(small,0,hPrev)){if(!precision.equals(small,0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){if(!precision.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(!Precision.equals(x,0.0,hPrev)){if(!Paint.equals(x,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+getScaleFactor(epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getScaleFactor(small,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(x,epsilon,maxIterations,DEFAULT_EPSILON,a);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublei=getA(0,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=x+hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(short,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleepsilon=getD(y,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubleb=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doubledPrev=getD(a,y);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(epsilon.equals(small,x,epsilon,maxIterations)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128doublen=getA(0,x+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128if(x.equals(short,0.0,hPrev)){
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java128intsmall=getScaleFactor(0,x+1);
