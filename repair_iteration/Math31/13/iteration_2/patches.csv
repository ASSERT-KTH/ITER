bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
2	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
3	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
4	[BUG]  [BUGGY]  double  small  =  epsilon  +  hN;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  hN;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  hN;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  int  small  =  hN  +  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  hN  +  epsilon;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  hN  +  epsilon;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  int  small  =  epsilon  *  hN;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  hN;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  hN;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
7	[BUG]  [BUGGY]  int  small  =  epsilon  +  hN  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  +  hN  +  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  hN  +  1;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
8	[BUG]  [BUGGY]  double  n  =  getA0(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA0(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(x,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  double  n  =  getA0(1,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA0(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(1,  x);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  double  n  =  getScaleFactor(0,  x);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getScaleFactor(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(0,  x);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  double  n  =  getA0(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA0(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(0,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  double  n  =  getA(x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(x);	  double    n    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  double  n  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(0,  epsilon);	  double    n    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(x,  epsilon);	  double    n    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  DECIMAL  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (DECIMAL.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  epsilon))  {	  if    (DECIMAL.equals(small,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  DECIMAL	50	None	replace
16	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (DECIMAL.equals(small,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  hN))  {	  if    (DECIMAL.equals(small,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	50	None	replace
17	[BUG]  [BUGGY]  if  (DECIMAL.equals(small,  0.0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (DECIMAL.equals(small,  0.0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (DECIMAL.equals(small,  0.0,  dPrev))  {	  if    (DECIMAL.equals(small,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	50	None	replace
18	[BUG]  [BUGGY]  Double  n  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getA(0,  epsilon);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
19	[BUG]  [BUGGY]  Double  n  =  getN(0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getN(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getN(0,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
20	[BUG]  [BUGGY]  Double  n  =  getScaleFactor(0,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getScaleFactor(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getScaleFactor(0,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
21	[BUG]  [BUGGY]  Double  n  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getA(1,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
22	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  epsilon);	  double    dPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
23	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(short,  x,  epsilon);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(short,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(short,  x,  epsilon);	  double    dPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	53	None	replace
24	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(short,  x);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(short,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(short,  x);	  double    dPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	53	None	replace
25	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  dPrev  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (dPrev.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  epsilon))  {	  if    (dPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	28	None	replace
26	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (dPrev.equals(small,  0.0,  cPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  cPrev))  {	  if    (dPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	28	None	replace
27	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  dPrev  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (dPrev.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  x))  {	  if    (dPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	28	None	replace
28	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  n))  {  [CE]  cannot  find  symbol  n  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (dPrev.equals(small,  0.0,  n))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  n))  {	  if    (dPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  n	28	None	replace
29	[BUG]  [BUGGY]  double  small  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getA(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getA(0,  x,  epsilon);	  int    small    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
30	[BUG]  [BUGGY]  int  small  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(0,  x,  epsilon,  maxIterations);	  int    small    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
31	[BUG]  [BUGGY]  int  small  =  getScaleFactor(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getScaleFactor(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(0,  x,  epsilon);	  int    small    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
32	[BUG]  [BUGGY]  int  small  =  getA(1,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getA(1,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(1,  x,  epsilon);	  int    small    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
33	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
34	[BUG]  [BUGGY]  double  dPrev  =  getA(y,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(y,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(y,  epsilon);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
35	[BUG]  [BUGGY]  double  dPrev  =  getA(short,  x);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(short,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(short,  x);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	70	None	replace
36	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  epsilon);	  double    dPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
37	[BUG]  [BUGGY]  double  dPrev  =  getD(y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(y,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(y,  epsilon,  maxIterations);	  double    dPrev    =    getD(short,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
38	[BUG]  [BUGGY]  Double  dPrev  =  getD(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  dPrev  =  getD(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  dPrev  =  getD(x,  epsilon,  maxIterations);	  double    dPrev    =    getD(short,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
39	[BUG]  [BUGGY]  double  b  =  getB(0,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  epsilon,  maxIterations);	  double    b    =    getB(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  double  b  =  getB(1,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(1,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  epsilon);	  double    b    =    getB(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  double  i  =  getA0(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(x,  epsilon);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  double  i  =  getA0(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(0,  epsilon);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
43	[BUG]  [BUGGY]  double  i  =  getA0(1,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(1,  x);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
44	[BUG]  [BUGGY]  double  i  =  getA0(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(0,  x,  epsilon);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
45	[BUG]  [BUGGY]  double  small  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getA(0,  epsilon);	  int    small    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  int  small  =  getA(0,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getA(0,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(0,  epsilon,  maxIterations);	  int    small    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  int  small  =  getScaleFactor(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getScaleFactor(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(0,  epsilon);	  int    small    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  if  (epsilon.equals(small,  0.0,  x))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (epsilon.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (epsilon.equals(small,  0.0,  x))  {	  if    (DECIMAL.equals(small,    0.0,    x))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
49	[BUG]  [BUGGY]  if  (value.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  value  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (value.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (value.equals(small,  0.0,  x))  {	  if    (DECIMAL.equals(small,    0.0,    x))    {    	non-compiled	[CE]  cannot  find  symbol  value	113	None	replace
50	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(x,  epsilon,  maxIterations);	  int    small    =    epsilon    +    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  getScaleFactor(x,  epsilon);	  int    small    =    epsilon    +    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  hPrev);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  +  getScaleFactor(x,  hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(x,  hPrev);	  int    small    =    epsilon    +    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  double  small  =  epsilon  +  hPrev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  hPrev;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  hPrev;	  int    small    =    epsilon    +    hPrev;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
54	[BUG]  [BUGGY]  int  small  =  epsilon  *  hPrev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  hPrev;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  hPrev;	  int    small    =    epsilon    +    hPrev;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
55	[BUG]  [BUGGY]  int  small  =  hPrev  +  epsilon;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  hPrev  +  epsilon;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  hPrev  +  epsilon;	  int    small    =    epsilon    +    hPrev;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
56	[BUG]  [BUGGY]  double  small  =  getScaleFactor(0,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getScaleFactor(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getScaleFactor(0,  x);	  int    small    =    getScaleFactor(0,    x);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  int  small  =  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(x,  epsilon);	  int    small    =    getScaleFactor(0,    x);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  double  small  =  epsilon  *  maxIterations;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  *  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  *  maxIterations;	  double    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  double  small  =  epsilon  +  maxIterations  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  maxIterations  +  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  maxIterations  +  1;	  double    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  if  (big.equals(hPrev,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  big  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (big.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (big.equals(hPrev,  0.0,  epsilon))  {	  if    (dPrev.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  big	36	None	replace
61	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  cPrev  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (cPrev.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  epsilon))  {	  if    (dPrev.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	36	None	replace
62	[BUG]  [BUGGY]  if(small.equals(x,  0.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(small.equals(x,  0.0,  cPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  0.0,  cPrev))  {	  if(small.equals(x,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	95	None	replace
63	[BUG]  [BUGGY]  if(small.equals(x,  0.0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(small.equals(x,  0.0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  0.0,  dPrev))  {	  if(small.equals(x,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	95	None	replace
64	[BUG]  [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    dPrev    =    getDistance(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
65	[BUG]  [BUGGY]  if  (small.equals(epsilon,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(epsilon,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(epsilon,  0.0,  epsilon))  {	  if    (epsilon.equals(small,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	34	None	replace
66	[BUG]  [BUGGY]  if  (scaleFactor.equals(small,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (scaleFactor.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (scaleFactor.equals(small,  0.0,  epsilon))  {	  if    (epsilon.equals(small,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	34	None	replace
67	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(y);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(y);	  double    dPrev    =    getScaleFactor(short);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
68	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon,  maxIterations  +  1);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
69	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon,  maxIterations,  scaleFactor);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
70	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations,  small);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations,  small);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon,  maxIterations,  small);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
71	[BUG]  [BUGGY]  double  dPrev  =  getD(min,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(min,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(min,  epsilon);	  double    dPrev    =    getD(short,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
72	[BUG]  [BUGGY]  double  small  =  epsilon.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon.doubleValue()  +  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon.doubleValue()  +  1;	  double    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  double  small  =  epsilon.doubleValue()  *  maxIterations;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon.doubleValue()  *  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon.doubleValue()  *  maxIterations;	  double    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
74	[BUG]  [BUGGY]  double  small  =  epsilon.doubleValue()  +  maxIterations;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon.doubleValue()  +  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon.doubleValue()  +  maxIterations;	  double    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  double  small  =  x  +  getScaleFactor(epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  x  +  getScaleFactor(epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  x  +  getScaleFactor(epsilon);	  int    small    =    x    +    getScaleFactor(epsilon);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
76	[BUG]  [BUGGY]  int  small  =  x  +  getScaleFactor(hPrev);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  getScaleFactor(hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  getScaleFactor(hPrev);	  int    small    =    x    +    getScaleFactor(epsilon);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
77	[BUG]  [BUGGY]  int  small  =  x  *  getScaleFactor(epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  *  getScaleFactor(epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  *  getScaleFactor(epsilon);	  int    small    =    x    +    getScaleFactor(epsilon);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
78	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)/  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)/  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  epsilon,  maxIterations)/  1;	  double    dPrev    =    getDistance(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
79	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  2;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  epsilon,  maxIterations)+  2;	  double    dPrev    =    getDistance(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
80	[BUG]  [BUGGY]  double  b  =  getB(0,  y  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  y  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  y  +  1);	  double    b    =    getB(0,    y);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
81	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
82	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  x,  epsilon);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
83	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  small,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  small,  epsilon);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
84	[BUG]  [BUGGY]  double  dPrev  =  getD(small,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(small,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(small,  epsilon,  maxIterations);	  double    dPrev    =    getD(small,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
85	[BUG]  [BUGGY]  if(dPrev.equals(x,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(dPrev.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(dPrev.equals(x,  0.0,  hPrev))  {	  if(s.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	46	None	replace
86	[BUG]  [BUGGY]  if(epsilon.equals(x,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(epsilon.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(epsilon.equals(x,  0.0,  hPrev))  {	  if(s.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	46	None	replace
87	[BUG]  [BUGGY]  if(cN.equals(x,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cN  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(cN.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(cN.equals(x,  0.0,  hPrev))  {	  if(s.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cN	46	None	replace
88	[BUG]  [BUGGY]  double  small  =  x  +  maxIterations;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  x  +  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  x  +  maxIterations;	  int    small    =    x    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
89	[BUG]  [BUGGY]  int  small  =  x  +  epsilon;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  epsilon;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  epsilon;	  int    small    =    x    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
90	[BUG]  [BUGGY]  int  small  =  n  +  maxIterations;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  n  +  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  n  +  maxIterations;	  int    small    =    x    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
91	[BUG]  [BUGGY]  double  dPrev  =  getDistance(maxIterations,  x,  epsilon,  scaleFactor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(maxIterations,  x,  epsilon,  scaleFactor);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(maxIterations,  x,  epsilon,  scaleFactor);	  double    dPrev    =    getDistance(scale,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
92	[BUG]  [BUGGY]  Double  i  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(0,  epsilon);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
93	[BUG]  [BUGGY]  Double  i  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getA(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(0,  x,  epsilon);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
94	[BUG]  [BUGGY]  Double  i  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(x,  epsilon);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
95	[BUG]  [BUGGY]  Double  i  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(1,  x);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
96	[BUG]  [BUGGY]  if  (small.equals(deFAULT_EPSILON,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(deFAULT_EPSILON,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(deFAULT_EPSILON,  0.0,  hPrev))  {	  if    (DEFAULT_EPSILON.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	92	None	replace
97	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  DEFAULT_EPSILON))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(hPrev,  0.0,  DEFAULT_EPSILON))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  DEFAULT_EPSILON))  {	  if    (DEFAULT_EPSILON.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
98	[BUG]  [BUGGY]  if  (hPrev.equals(small,  0.0,  DEFAULT_EPSILON))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (hPrev.equals(small,  0.0,  DEFAULT_EPSILON))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (hPrev.equals(small,  0.0,  DEFAULT_EPSILON))  {	  if    (DEFAULT_EPSILON.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
99	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(a,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  epsilon,  maxIterations);	  double    dPrev    =    getD(a,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
100	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(a,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  x);	  double    dPrev    =    getD(a,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
101	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  hN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(a,  hN);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  hN);	  double    dPrev    =    getD(a,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
102	[BUG]  [BUGGY]  double  small  =  epsilon  *  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  *  getScaleFactor(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  *  getScaleFactor(x);	  int    small    =    epsilon    *    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
103	[BUG]  [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  getScaleFactor(x,  maxIterations);	  int    small    =    epsilon    *    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
104	[BUG]  [BUGGY]  int  small  =  epsilon  *  getScaleFactor(hPrev);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  getScaleFactor(hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  getScaleFactor(hPrev);	  int    small    =    epsilon    *    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
105	[BUG]  [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  getScaleFactor(x,  epsilon);	  int    small    =    epsilon    *    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
106	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)/  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)/  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations)/  1;	  double    dPrev    =    getD(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
107	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  2;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations)+  2;	  double    dPrev    =    getD(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
108	[BUG]  [BUGGY]  double  i  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0,  epsilon);	  double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
109	[BUG]  [BUGGY]  double  i  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0,  x,  epsilon);	  double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
110	[BUG]  [BUGGY]  double  i  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(x,  epsilon);	  double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
111	[BUG]  [BUGGY]  double  i  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(1,  x);	  double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
112	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon.doubleValue()  *  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  *  1;	  int    small    =    epsilon.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
113	[BUG]  [BUGGY]  if  (small.equals(cPrev,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  cPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(cPrev,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(cPrev,  0.0,  epsilon))  {	  if    (cPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	51	None	replace
114	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (cPrev.equals(small,  0.0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  dPrev))  {	  if    (cPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	51	None	replace
115	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  cPrev  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (cPrev.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  x))  {	  if    (cPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	51	None	replace
116	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(n);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(n);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(n);	  double    dPrev    =    getScaleFactor(small);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
117	[BUG]  [BUGGY]  if(cPrev.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  cPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(cPrev.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(cPrev.equals(x,  epsilon,  maxIterations))  {	  if(dPrev.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	77	None	replace
118	[BUG]  [BUGGY]  if(big.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  big  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(big.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(big.equals(x,  epsilon,  maxIterations))  {	  if(dPrev.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  big	77	None	replace
119	[BUG]  [BUGGY]  if(dPrev.equals(small,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  dPrev  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(dPrev.equals(small,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(dPrev.equals(small,  epsilon,  maxIterations))  {	  if(dPrev.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	77	None	replace
120	[BUG]  [BUGGY]  if(epsilon.equals(small,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(epsilon.equals(small,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(epsilon.equals(small,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(small,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
121	[BUG]  [BUGGY]  if(x.equals(small,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(x.equals(small,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(small,  epsilon,  maxIterations))  {	  if(DECIMAL.equals(small,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
122	[BUG]  [BUGGY]  double  n  =  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(x,  epsilon);	  int    n    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
123	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(small,  epsilon);	  int    n    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
124	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations);	  int    n    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
125	[BUG]  [BUGGY]  int  n  =  getScaleFactor(short,  x,  epsilon);  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(short,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(short,  x,  epsilon);	  int    n    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	60	None	replace
126	[BUG]  [BUGGY]  double  n  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(1,  x);	  double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  double  n  =  getN(0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getN(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getN(0,  x);	  double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
128	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(int,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(int,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(int,  x,  epsilon,  maxIterations);	  double    dPrev    =    getScaleFactor(short,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	84	None	replace
129	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    if  (!Precision.equals(x,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
130	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  If  (!Precision.equals(x,  0.0,  hPrev))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  If  (!Precision.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    If  (!Precision.equals(x,  0.0,  hPrev))  {	  	non-compiled	[CE]  ';'  expected	102	None	add
131	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  1.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    if  (!Precision.equals(x,  1.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
132	[BUG]  [BUGGY]  if(epsilon.equals(x,  small,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(epsilon.equals(x,  small,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(epsilon.equals(x,  small,  maxIterations))  {	  if(epsilon.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
133	[BUG]  [BUGGY]  double  b  =  getB(1,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(1,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  epsilon,  maxIterations);	  double    b    =    getB(1,    x);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
134	[BUG]  [BUGGY]  double  b  =  getB(1,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(1,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  x,  epsilon);	  double    b    =    getB(1,    x);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
135	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  y  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  y  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  y  +  1);	  double    dPrev    =    getA(0,    y);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
136	[BUG]  [BUGGY]  double  b  =  getB(0,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  x,  epsilon,  maxIterations);	  double    b    =    getB(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
137	[BUG]  [BUGGY]  double  b  =  getB(0,  small,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  small,  epsilon);	  double    b    =    getB(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  double  b  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getA(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(0,  x,  epsilon);	  double    b    =    getB(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  if  (a.equals(small,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (a.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (a.equals(small,  0.0,  epsilon))  {	  if    (x.equals(small,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  a	97	None	replace
140	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  if  (!Precision.equals(small,  0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  if  (!Precision.equals(small,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0,    hPrev))    {    if  (!Precision.equals(small,  0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
141	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  If  (!Precision.equals(small,  0,  hPrev))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  If  (!Precision.equals(small,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0,    hPrev))    {    If  (!Precision.equals(small,  0,  hPrev))  {	  	non-compiled	[CE]  ';'  expected	68	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0.0,  epsilon))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  AssertionError  	67	2	replace
143	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  epsilon))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  epsilon))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  AssertionError  	67	2	replace
144	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  1.0,  x))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  OutOfRangeException  	67	8	replace
145	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  x))  {  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  1.0,  x))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  OutOfRangeException  	67	8	replace
146	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  small))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(x,  0.0,  small))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  OutOfRangeException  	67	8	replace
147	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  small))  {  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  small))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(x,  0.0,  small))  {	  if    (!Precision.equals(small,    0.0,    x))    {    	compilable	  [FE]  OutOfRangeException  	67	8	replace
148	[BUG]  [BUGGY]  double  b  =  getB(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(x,  epsilon,  maxIterations);	  double    b    =    getB(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
149	[BUG]  [BUGGY]  double  b  =  getB(short,  epsilon);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(short,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(short,  epsilon);	  double    b    =    getB(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	6	None	replace
150	[BUG]  [BUGGY]  double  b  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(x,  epsilon);	  double    b    =    getB(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
151	[BUG]  [BUGGY]  double  b  =  getB(small,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(small,  epsilon);	  double    b    =    getB(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
152	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(hPrev,  0.0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  dPrev))  {	  if    (small.equals(hPrev,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	52	None	replace
153	[BUG]  [BUGGY]  if  (small.equals(dPrev,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(dPrev,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(dPrev,  0.0,  hPrev))  {	  if    (small.equals(hPrev,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	52	None	replace
154	[BUG]  [BUGGY]  if  (small.equals(hPrev,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(hPrev,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(hPrev,  0.0,  hN))  {	  if    (short.equals(hPrev,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  hN	74	None	replace
155	[BUG]  [BUGGY]  if  (short.equals(x,  0.0,  hN))  {  [CE]  class  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (short.equals(x,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (short.equals(x,  0.0,  hN))  {	  if    (short.equals(hPrev,    0.0,    hN))    {    	non-compiled	[CE]  class  expected	74	None	replace
156	[BUG]  [BUGGY]  if  (short.equals(small,  0.0,  hN))  {  [CE]  class  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (short.equals(small,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (short.equals(small,  0.0,  hN))  {	  if    (short.equals(hPrev,    0.0,    hN))    {    	non-compiled	[CE]  class  expected	74	None	replace
157	[BUG]  [BUGGY]  Double  dPrev  =  getDistance(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  dPrev  =  getDistance(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  dPrev  =  getDistance(x,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(short,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
158	[BUG]  [BUGGY]  if  (small.equals(cN,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cN  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(cN,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(cN,  0.0,  hPrev))  {	  if    (a.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cN	114	None	replace
159	[BUG]  [BUGGY]  if  (epsilon.equals(small,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (epsilon.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (epsilon.equals(small,  0.0,  hPrev))  {	  if    (cN.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
160	[BUG]  [BUGGY]  double  small  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getA(x,  epsilon);	  int    small    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
161	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(x,  epsilon,  maxIterations);	  int    small    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
162	[BUG]  [BUGGY]  float  small  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  float  small  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	float  small  =  getA(x,  epsilon);	  int    small    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
163	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    dPrev    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
164	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  epsilon);	  double    dPrev    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
165	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if(!Precision.equals(x,  epsilon,  maxIterations))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Precision.equals(small,    1.0,    hPrev))    {    	compilable	  [FE]  OutOfRangeException  	11	8	replace
166	[BUG]  [BUGGY]  if(!Precision.equals(x,  epsilon,  maxIterations))  {  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(!Precision.equals(x,  epsilon,  maxIterations))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Precision.equals(small,    1.0,    hPrev))    {    	compilable	  [FE]  OutOfRangeException  	11	8	replace
167	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(0,  epsilon);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
168	[BUG]  [BUGGY]  double  cPrev  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(x,  epsilon);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
169	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(0,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(0,  epsilon,  maxIterations);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
170	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(0,  x,  epsilon);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
171	[BUG]  [BUGGY]  double  b  =  getA(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(0,  epsilon);	  double    b    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
172	[BUG]  [BUGGY]  If  (!Precision.equals(small,  0.0,  hPrev))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  If  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	If  (!Precision.equals(small,  0.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    If    (!Precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
173	[BUG]  [BUGGY]  double  dPrev  =  getDistance(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    dPrev    =    getDistance(small,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
174	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);	  double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
175	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  1);	  double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
176	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    dPrev    =    getScaleFactor(small,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
177	[BUG]  [BUGGY]  if(hPrev.equals(small,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(hPrev.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(hPrev.equals(small,  0.0,  hPrev))  {	  if(small.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	replace
178	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(epsilon);	  double    dPrev    =    getScaleFactor(maxIterations);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
179	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(epsilon,  maxIterations);	  double    dPrev    =    getScaleFactor(maxIterations);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
180	[BUG]  [BUGGY]  if  (short.equals(x,  0.0,  epsilon))  {  [CE]  class  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (short.equals(x,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (short.equals(x,  0.0,  epsilon))  {	  if    (short.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  class  expected	98	None	replace
181	[BUG]  [BUGGY]  double  n  =  getScaleFactor(small);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getScaleFactor(small);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(small);	  int    n    =    getScaleFactor(small);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.00,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0.00,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Precision.equals(small,    0.00,    hPrev))    {    	compilable	  [FE]  AssertionError  	12	2	replace
183	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.00,  hPrev))  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.00,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.00,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Precision.equals(small,    0.00,    hPrev))    {    	compilable	  [FE]  AssertionError  	12	2	replace
184	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!Precision.equals(small,  1.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!Precision.equals(small,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    1.0,    hPrev))    {    if  (!Precision.equals(small,  1.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
185	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  If  (!Precision.equals(small,  1.0,  hPrev))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  If  (!Precision.equals(small,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    1.0,    hPrev))    {    If  (!Precision.equals(small,  1.0,  hPrev))  {	  	non-compiled	[CE]  ';'  expected	63	None	add
186	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!Precision.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    1.0,    hPrev))    {    if  (!Precision.equals(small,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
187	[BUG]  [BUGGY]  if(cN.equals(hPrev,  0.0,  x))  {  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(cN.equals(hPrev,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(cN.equals(hPrev,  0.0,  x))  {	  if(small.equals(hPrev,    0.0,    x))    {    	non-compiled	[CE]  cannot  find  symbol  cN	44	None	replace
188	[BUG]  [BUGGY]  if  (!Paint.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  Paint  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Paint.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Paint.equals(small,  0.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Paint.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  Paint	107	None	replace
189	[BUG]  [BUGGY]  if(!Precision.equals(small,  dPrev,  hPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(small,  dPrev,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(!Precision.equals(small,  dPrev,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Paint.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	107	None	replace
190	[BUG]  [BUGGY]  if(short.equals(x,  epsilon,  hPrev))  {  [CE]  class  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(short.equals(x,  epsilon,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(short.equals(x,  epsilon,  hPrev))  {	  if(short.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  class  expected	96	None	replace
191	[BUG]  [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  getScaleFactor(x,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  getScaleFactor(x,  maxIterations);	  double    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
192	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  dPrev))  {	  if    (!Precision.equals(small,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	65	None	replace
193	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0.0,  hN))  {	  if    (!Precision.equals(small,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	65	None	replace
194	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  cPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  1.0,  cPrev))  {	  if    (!Precision.equals(small,    1.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	64	None	replace
195	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  epsilon  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  epsilon  +  1);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
196	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x  +  1,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  x  +  1,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  x  +  1,  maxIterations);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
197	[BUG]  [BUGGY]  int  n  =  getScaleFactor(short,  epsilon);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(short,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(short,  epsilon);	  int    n    =    getScaleFactor(short);    	non-compiled	[CE]  '.class'  expected	61	None	replace
198	[BUG]  [BUGGY]  double  small  =  epsilon  +  getScaleFactor(hPrev);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  +  getScaleFactor(hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  +  getScaleFactor(hPrev);	  int    small    =    epsilon    +    getScaleFactor(hPrev);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
199	[BUG]  [BUGGY]  double  dPrev  =  getDistance(scale,  y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(scale,  y,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(scale,  y,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(y,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  double  n  =  getScaleFactor(short);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getScaleFactor(short);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(short);	  double    n    =    getScaleFactor(x);    	non-compiled	[CE]  '.class'  expected	115	None	replace
201	[BUG]  [BUGGY]  if(x.equals(epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(x.equals(epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(epsilon,  maxIterations))  {	  if(small.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
202	[BUG]  [BUGGY]  if(a.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(a.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(a.equals(x,  epsilon,  maxIterations))  {	  if(small.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  cannot  find  symbol  a	75	None	replace
203	[BUG]  [BUGGY]  int  small  =  epsilon  +  getScaleFactor(hPrev,  maxIterations);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  +  getScaleFactor(hPrev,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  +  getScaleFactor(hPrev,  maxIterations);	  int    small    =    epsilon    +    getScaleFactor(x,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
204	[BUG]  [BUGGY]  Double  small  =  epsilon.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  small  =  epsilon.doubleValue();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  small  =  epsilon.doubleValue();	  float    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
205	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  y,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  y,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
206	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
207	[BUG]  [BUGGY]  double  i  =  getA(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(x);	  double    i    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
208	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  *  maxIterations;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon.doubleValue()  *  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  *  maxIterations;	  int    small    =    epsilon.doubleValue()    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
209	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  +  hPrev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon.doubleValue()  +  hPrev;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  +  hPrev;	  int    small    =    epsilon.doubleValue()    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
210	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue()  /  maxIterations;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon.doubleValue()  /  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon.doubleValue()  /  maxIterations;	  int    small    =    epsilon.doubleValue()    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
211	[BUG]  [BUGGY]  if  (a.equals(x,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (a.equals(x,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (a.equals(x,  0.0,  epsilon))  {	  if    (small.equals(x,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  a	33	None	replace
212	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  0.0,  x))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    if  (!Precision.equals(small,  0.0,  x))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
213	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  If  (!Precision.equals(small,  0.0,  x))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  If  (!Precision.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    If  (!Precision.equals(small,  0.0,  x))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
214	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  1.0,  x))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  1.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    if  (!Precision.equals(small,  1.0,  x))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
215	[BUG]  [BUGGY]  double  small  =  getB(0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getB(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getB(0,  x);	  int    small    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
216	[BUG]  [BUGGY]  int  small  =  getB(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getB(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getB(0,  epsilon);	  int    small    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
217	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  cPrev))  {  [CE]  cannot  find  symbol  cPrev  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  cPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  cPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cPrev	69	None	replace
218	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  dPrev))  {  [CE]  cannot  find  symbol  dPrev  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  dPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  dPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	69	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  0,  x))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
220	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  x))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  x))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
221	[BUG]  [BUGGY]  double  epsilon  =  getD(small,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(small,  epsilon);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
222	[BUG]  [BUGGY]  double  epsilon  =  getD(y,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(y,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(y,  epsilon);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
223	[BUG]  [BUGGY]  double  epsilon  =  getD(small,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(small,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(small,  x);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
224	[BUG]  [BUGGY]  int  small  =  maxIterations  *  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  maxIterations  *  epsilon;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  maxIterations  *  epsilon;	  int    small    =    epsilon    *    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
225	[BUG]  [BUGGY]  if  (!precision.equals(small,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!precision.equals(small,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!precision.equals(small,  0.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	106	None	replace
226	[BUG]  [BUGGY]  double  n  =  getScaleFactor(size);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getScaleFactor(size);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getScaleFactor(size);	  int    n    =    getScaleFactor(size);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
227	[BUG]  [BUGGY]  int  n  =  getScaleFactor(size,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(size,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(size,  epsilon);	  int    n    =    getScaleFactor(size);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
228	[BUG]  [BUGGY]  double  small  =  a  +  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  a  +  getScaleFactor(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  a  +  getScaleFactor(x);	  int    small    =    a    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
229	[BUG]  [BUGGY]  int  small  =  a  +  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  a  +  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  a  +  getScaleFactor(x,  epsilon);	  int    small    =    a    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
230	[BUG]  [BUGGY]  int  small  =  x  +  getScaleFactor(a);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  getScaleFactor(a);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  getScaleFactor(a);	  int    small    =    a    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
231	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  1);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
232	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  hN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  hN);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  hN);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
233	[BUG]  [BUGGY]  double  small  =  getScale(0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  getScale(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  getScale(0,  x);	  double    small    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
234	[BUG]  [BUGGY]  int  small  =  getS(0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getS(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getS(0,  x);	  int    small    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
235	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  y  +  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  y  +  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  y  +  maxIterations);	  double    dPrev    =    getA(0,    y);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
236	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  y);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  y);	  double    dPrev    =    getA(0,    y);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
237	[BUG]  [BUGGY]  double  b  =  getB(y,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(y,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(y,  epsilon);	  double    b    =    getB(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
238	[BUG]  [BUGGY]  int  small  =  x  +  getScaleFactor(maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  getScaleFactor(maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  getScaleFactor(maxIterations);	  int    small    =    x    +    getScaleFactor(epsilon);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
239	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  small,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(x,  small,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  small,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(scale,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
240	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  scaleFactor,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(x,  scaleFactor,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  scaleFactor,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(scale,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
241	[BUG]  [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)-  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(x,  epsilon,  maxIterations)-  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(x,  epsilon,  maxIterations)-  1;	  double    dPrev    =    getDistance(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
242	[BUG]  [BUGGY]  Double  i  =  getB(0,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getB(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getB(0,  x);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
243	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)-  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)-  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations)-  1;	  double    dPrev    =    getD(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
244	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getEpsilon(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getEpsilon(x,  epsilon);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
245	[BUG]  [BUGGY]  double  epsilon  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getA(x,  epsilon);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
246	[BUG]  [BUGGY]  double  small  =  epsilon  /  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  /  getScaleFactor(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  /  getScaleFactor(x);	  double    small    =    epsilon    +    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
247	[BUG]  [BUGGY]  double  cPrev  =  getC(0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getC(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getC(0,  x);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
248	[BUG]  [BUGGY]  double  cPrev  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(1,  x);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(x,  0,  hPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
250	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0,  hPrev))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(x,  0,  hPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(small,  1,  hPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
252	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1,  hPrev))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  1,  hPrev))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	compilable	  [FE]  AssertionError  	69	2	replace
253	[BUG]  [BUGGY]  int  small  =  n  +  hN;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  n  +  hN;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  n  +  hN;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
254	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  y,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  y,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  y,  epsilon);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
255	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(maxIterations,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(maxIterations,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(maxIterations,  epsilon);	  double    dPrev    =    getScaleFactor(maxIterations);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
256	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  0);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  0);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
257	[BUG]  [BUGGY]  double  dPrev  =  getA(small,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(small,  epsilon);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
258	[BUG]  [BUGGY]  Double  n  =  getA(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getA(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getA(x,  epsilon);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
259	[BUG]  [BUGGY]  if(hPrev.equals(small,  0.0,  x))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(hPrev.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(hPrev.equals(small,  0.0,  x))  {	  if(small.equals(hPrev,    0.0,    x))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
260	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(x,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(x,  epsilon  +  1);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
261	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  x  +  1);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
262	[BUG]  [BUGGY]  double  i  =  getA0(short,  x);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(short,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(short,  x);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  '.class'  expected	42	None	replace
263	[BUG]  [BUGGY]  double  i  =  getA0(small,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA0(small,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA0(small,  x);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
264	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  0,  x))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Precision.equals(small,  0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    if  (!Precision.equals(small,  0,  x))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
265	[BUG]  [BUGGY]  double  i  =  getI(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getI(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getI(x);	  double    i    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
266	[BUG]  [BUGGY]  double  small  =  epsilon  /  maxIterations;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  epsilon  /  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  epsilon  /  maxIterations;	  double    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
267	[BUG]  [BUGGY]  if  (x.equals(small,  0.0,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (x.equals(small,  0.0,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (x.equals(small,  0.0,  epsilon,  maxIterations))  {	  if    (x.equals(small,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
268	[BUG]  [BUGGY]  if(small.equals(x,  epsilon,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(small.equals(x,  epsilon,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  epsilon,  epsilon))  {	  if(small.equals(x,    0.0,    hN))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	95	None	replace
269	[BUG]  [BUGGY]  if(short.equals(x,  epsilon,  hN))  {  [CE]  class  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(short.equals(x,  epsilon,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(short.equals(x,  epsilon,  hN))  {	  if(short.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  class  expected	96	None	replace
270	[BUG]  [BUGGY]  if(value.equals(x,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  value  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(value.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(value.equals(x,  0.0,  hPrev))  {	  if(short.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  value	96	None	replace
271	[BUG]  [BUGGY]  int  n  =  getScaleFactor(maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(maxIterations);	  int    n    =    getScaleFactor(small);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
272	[BUG]  [BUGGY]  double  b  =  getB(1,  hPrev);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(1,  hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  hPrev);	  double    b    =    getB(1,    x);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
273	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  x,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
274	[BUG]  [BUGGY]  int  small  =  getScaleFactor(0,  hPrev);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getScaleFactor(0,  hPrev);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(0,  hPrev);	  int    small    =    getScaleFactor(0,    x);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
275	[BUG]  [BUGGY]  int  small  =  getS(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getS(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getS(x,  epsilon);	  int    small    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
276	[BUG]  [BUGGY]  int  small  =  getB(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getB(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getB(x,  epsilon);	  int    small    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
277	[BUG]  [BUGGY]  if  (x.equals(hPrev,  0.0,  epsilon))  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (x.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (x.equals(hPrev,  0.0,  epsilon))  {	  if    (short.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	98	None	replace
278	[BUG]  [BUGGY]  if  (x.equals(hPrev,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (x.equals(hPrev,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (x.equals(hPrev,  0.0,  hN))  {	  if    (short.equals(hPrev,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  hN	74	None	replace
279	[BUG]  [BUGGY]  if  (!Paint.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  Paint  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Paint.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Paint.equals(small,  0.0,  x))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Paint.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  Paint	107	None	replace
280	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations  +  1);	  double    dPrev    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
281	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  y,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  y,  epsilon,  maxIterations);	  double    dPrev    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
282	[BUG]  [BUGGY]  if  (small.equals(dPrev,  0.0,  hN))  {  [CE]  cannot  find  symbol  dPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(dPrev,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(dPrev,  0.0,  hN))  {	  if    (small.equals(hPrev,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  dPrev	52	None	replace
283	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  b);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(a,  b);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  b);	  double    dPrev    =    getD(a,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
284	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Precision.equals(x,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    if  (!Precision.equals(x,  0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
285	[BUG]  [BUGGY]  if(short.equals(x,  epsilon,  maxIterations))  {  [CE]  class  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(short.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(short.equals(x,  epsilon,  maxIterations))  {	  if(small.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  class  expected	75	None	replace
286	[BUG]  [BUGGY]  if  (value.equals(x,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  value  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (value.equals(x,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (value.equals(x,  0.0,  epsilon))  {	  if    (small.equals(x,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  value	33	None	replace
287	[BUG]  [BUGGY]  double  b  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(1,  x);	  double    b    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
288	[BUG]  [BUGGY]  if  (cPrev.equals(small,  0.0,  q1))  {  [CE]  cannot  find  symbol  q1  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (cPrev.equals(small,  0.0,  q1))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cPrev.equals(small,  0.0,  q1))  {	  if    (cPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  q1	51	None	replace
289	[BUG]  [BUGGY]  int  small  =  getS(0,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getS(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getS(0,  epsilon);	  int    small    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
290	[BUG]  [BUGGY]  int  small  =  getA(1,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getA(1,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getA(1,  epsilon);	  int    small    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
291	[BUG]  [BUGGY]  int  small  =  maxIterations  *  getScaleFactor(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  maxIterations  *  getScaleFactor(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  maxIterations  *  getScaleFactor(x);	  int    small    =    epsilon    *    getScaleFactor(x);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
292	[BUG]  [BUGGY]  if(x.equals(small,  0.0,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(x.equals(small,  0.0,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(small,  0.0,  hN))  {	  if(x.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	45	None	replace
293	[BUG]  [BUGGY]  if  (a.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  a  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (a.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (a.equals(small,  0.0,  x))  {	  if    (a.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  a	114	None	replace
294	[BUG]  [BUGGY]  if(!Precision.equals(small,  epsilon,  hN))  {  [CE]  cannot  find  symbol  hN  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(small,  epsilon,  hN))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(!Precision.equals(small,  epsilon,  hN))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  hN	9	None	replace
295	[BUG]  [BUGGY]  if  (dPrev.equals(small,  0.0,  q1))  {  [CE]  cannot  find  symbol  q1  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (dPrev.equals(small,  0.0,  q1))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (dPrev.equals(small,  0.0,  q1))  {	  if    (dPrev.equals(small,    0.0,    hN))    {    	non-compiled	[CE]  cannot  find  symbol  q1	28	None	replace
296	[BUG]  [BUGGY]  double  b  =  getB(1,  y);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(1,  y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(1,  y);	  double    b    =    getB(0,    y);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
297	[BUG]  [BUGGY]  double  b  =  getB(0,  y  +  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  y  +  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  y  +  maxIterations);	  double    b    =    getB(0,    y);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
298	[BUG]  [BUGGY]  float  small  =  epsilon.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  float  small  =  epsilon.doubleValue()  +  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	float  small  =  epsilon.doubleValue()  +  1;	  int    small    =    epsilon.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
299	[BUG]  [BUGGY]  double  n  =  getA0(short,  x);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA0(short,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(short,  x);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  '.class'  expected	15	None	replace
300	[BUG]  [BUGGY]  double  n  =  getA0(small,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA0(small,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA0(small,  x);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
301	[BUG]  [BUGGY]  if  (small.equals(epsilon,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(epsilon,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(epsilon,  0.0,  hPrev))  {	  if    (DEFAULT_EPSILON.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
302	[BUG]  [BUGGY]  double  epsilon  =  getD(small,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(small,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(small,  x,  epsilon,  maxIterations);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
303	[BUG]  [BUGGY]  double  epsilon  =  getEpsilon(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getEpsilon(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getEpsilon(x,  epsilon,  maxIterations);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if  (!Precision.equals(x,  1.0,  hPrev))  {	  if    (!Precision.equals(small,    1.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	64	2	replace
305	[BUG]  [BUGGY]  if  (!Precision.equals(x,  1.0,  hPrev))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(x,  1.0,  hPrev))  {	  if    (!Precision.equals(small,    1.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	64	2	replace
306	[BUG]  [BUGGY]  if  (!precision.equals(small,  0.0,  x))  {  [CE]  cannot  find  symbol  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!precision.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!precision.equals(small,  0.0,  x))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	106	None	replace
307	[BUG]  [BUGGY]  if  (!precision.equals(small,  0,  hPrev))  {  [CE]  cannot  find  symbol  precision  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!precision.equals(small,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!precision.equals(small,  0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	106	None	replace
308	[BUG]  [BUGGY]  double  n  =  getA(0,  y);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(0,  y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(0,  y);	  double    n    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
309	[BUG]  [BUGGY]  double  n  =  getN(x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getN(x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getN(x);	  double    n    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
310	[BUG]  [BUGGY]  double  dPrev  =  getDistance(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(short,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(short,  x,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	100	None	replace
311	[BUG]  [BUGGY]  int  small  =  epsilon  *  DEFAULT_EPSILON;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  epsilon  *  DEFAULT_EPSILON;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  epsilon  *  DEFAULT_EPSILON;	  int    small    =    epsilon    *    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
312	[BUG]  [BUGGY]  double  dPrev  =  getDistance(min,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(min,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(min,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(short,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
313	[BUG]  [BUGGY]  if(small.equals(x,  epsilon,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(small.equals(x,  epsilon,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(small.equals(x,  epsilon,  hPrev))  {	  if(small.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	replace
314	[BUG]  [BUGGY]  int  small  =  getB(0,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getB(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getB(0,  x,  epsilon);	  int    small    =    getB(0,    x);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
315	[BUG]  [BUGGY]  double  b  =  getB(0,  y  +  1,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getB(0,  y  +  1,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getB(0,  y  +  1,  maxIterations);	  double    b    =    getB(0,    y);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
316	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(1,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(1,  x);	  double    dPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
317	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev)&&!precision.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  precision  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  hPrev)&&!precision.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  hPrev)&&!precision.equals(x,  epsilon,  maxIterations))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	69	None	replace
318	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev)||!precision.equals(x,  epsilon,  maxIterations))  {  [CE]  cannot  find  symbol  precision  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  hPrev)||!precision.equals(x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (!Precision.equals(small,  0,  hPrev)||!precision.equals(x,  epsilon,  maxIterations))  {	  if    (!Precision.equals(small,    0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	69	None	replace
319	[BUG]  [BUGGY]  int  small  =  a  +  getScaleFactor(epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  a  +  getScaleFactor(epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  a  +  getScaleFactor(epsilon);	  int    small    =    x    +    getScaleFactor(epsilon);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
320	[BUG]  [BUGGY]  if  (a.equals(hPrev,  0.0,  epsilon))  {  [CE]  cannot  find  symbol  a  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (a.equals(hPrev,  0.0,  epsilon))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (a.equals(hPrev,  0.0,  epsilon))  {	  if    (dPrev.equals(hPrev,    0.0,    epsilon))    {    	non-compiled	[CE]  cannot  find  symbol  a	36	None	replace
321	[BUG]  [BUGGY]  if  (small.equals(x,  0.0,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(x,  0.0,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(x,  0.0,  epsilon,  maxIterations))  {	  if    (small.equals(x,    0.0,    epsilon))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
322	[BUG]  [BUGGY]  double  epsilon  =  getD(small,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(small,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(small,  epsilon,  maxIterations);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
323	[BUG]  [BUGGY]  int  epsilon  =  getD(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  epsilon  =  getD(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  epsilon  =  getD(x,  epsilon,  maxIterations);	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
324	[BUG]  [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(x,  epsilon,  maxIterations)+  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(x,  epsilon,  maxIterations)+  1;	  double    epsilon    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
325	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  n  =  getScaleFactor(small,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  n  =  getScaleFactor(small,  x);	  int    n    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
326	[BUG]  [BUGGY]  double  small  =  maxIterations  -  epsilon.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  maxIterations  -  epsilon.doubleValue();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  maxIterations  -  epsilon.doubleValue();	  double    small    =    epsilon.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
327	[BUG]  [BUGGY]  double  i  =  getScaleFactor(0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getScaleFactor(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getScaleFactor(0,  x);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
328	[BUG]  [BUGGY]  double  i  =  getA1(0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA1(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA1(0,  x);	  double    i    =    getA0(0,    x);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
329	[BUG]  [BUGGY]  Double  i  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  i  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  i  =  getA(0,  x  +  1);	  Double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
330	[BUG]  [BUGGY]  int  small  =  scaleFactor  +  getScaleFactor(x,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  scaleFactor  +  getScaleFactor(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  scaleFactor  +  getScaleFactor(x,  epsilon);	  int    small    =    epsilon    +    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
331	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!precision.equals(small,  0.0,  x))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!precision.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    if  (!precision.equals(small,  0.0,  x))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
332	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Paint.equals(small,  0.0,  x))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0.0,  x))  {  if  (!Paint.equals(small,  0.0,  x))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0.0,    x))    {    if  (!Paint.equals(small,  0.0,  x))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
333	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x  +  1,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getA(0,  x  +  1,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getA(0,  x  +  1,  epsilon);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
334	[BUG]  [BUGGY]  double  dPrev  =  getDistance(min,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(min,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(min,  x,  epsilon,  maxIterations);	  double    dPrev    =    getDistance(scale,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
335	[BUG]  [BUGGY]  double  dPrev  =  getB(0,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getB(0,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getB(0,  x,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
336	[BUG]  [BUGGY]  if(!precision.equals(small,  1.0,  hPrev))  {  [CE]  cannot  find  symbol  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!precision.equals(small,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(!precision.equals(small,  1.0,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!precision.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  cannot  find  symbol  precision	106	None	replace
337	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);	  double    dPrev    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
338	[BUG]  [BUGGY]  if  (small.equals(DEFAULT_EPSILON,  0.0,  hPrev))  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (small.equals(DEFAULT_EPSILON,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (small.equals(DEFAULT_EPSILON,  0.0,  hPrev))  {	  if    (DEFAULT_EPSILON.equals(small,    0.0,    hPrev))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	92	None	replace
339	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(short,  epsilon);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(short,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(short,  epsilon);	  double    dPrev    =    getScaleFactor(short);    	non-compiled	[CE]  '.class'  expected	55	None	replace
340	[BUG]  [BUGGY]  double  small  =  x  +  epsilon;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  small  =  x  +  epsilon;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  small  =  x  +  epsilon;	  double    small    =    epsilon    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
341	[BUG]  [BUGGY]  double  dPrev  =  getD(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(short,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(short,  x,  epsilon,  maxIterations);	  double    dPrev    =    getD(short,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	49	None	replace
342	[BUG]  [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!precision.equals(small,  1.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  1.0,  hPrev))  {  if  (!precision.equals(small,  1.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    1.0,    hPrev))    {    if  (!precision.equals(small,  1.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
343	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  cPrev  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  cPrev  =  getA(0,  x  +  1);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
344	[BUG]  [BUGGY]  Double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  dPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);	  double    dPrev    =    getScaleFactor(short,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
345	[BUG]  [BUGGY]  int  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  dPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);	  double    dPrev    =    getScaleFactor(short,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	84	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(small,  epsilon,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	add	if(!Precision.equals(small,  epsilon,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Paint.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	107	2	replace
347	[BUG]  [BUGGY]  if(!Precision.equals(small,  epsilon,  hPrev))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(!Precision.equals(small,  epsilon,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(!Precision.equals(small,  epsilon,  hPrev))  {	  if    (!Precision.equals(small,    0.0,    hPrev))    {    if    (!Paint.equals(small,    0.0,    hPrev))    {    	compilable	  [FE]  AssertionError  	107	2	replace
348	[BUG]  [BUGGY]  Double  n  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  Double  n  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	Double  n  =  getA(0,  x  +  1);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
349	[BUG]  [BUGGY]  if  (cN.equals(hPrev,  0.0,  hPrev))  {  [CE]  cannot  find  symbol  cN  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (cN.equals(hPrev,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if  (cN.equals(hPrev,  0.0,  hPrev))  {	  if    (small.equals(hPrev,    0.0,    cPrev))    {    	non-compiled	[CE]  cannot  find  symbol  cN	52	None	replace
350	[BUG]  [BUGGY]  double  dPrev  =  getB(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getB(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getB(x,  epsilon,  maxIterations);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
351	[BUG]  [BUGGY]  int  small  =  x  *  maxIterations;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  *  maxIterations;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  *  maxIterations;	  int    small    =    x    +    maxIterations;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
352	[BUG]  [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations)+  1;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getDistance(small,  x,  epsilon,  maxIterations)+  1;	  double    dPrev    =    getDistance(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
353	[BUG]  [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  if  (!precision.equals(small,  0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(small,  0,  hPrev))  {  if  (!precision.equals(small,  0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(small,    0,    hPrev))    {    if  (!precision.equals(small,  0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
354	[BUG]  [BUGGY]  double  i  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0,  x  +  1);	  double    i    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
355	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!precision.equals(x,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!precision.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    if  (!precision.equals(x,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
356	[BUG]  [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Paint.equals(x,  0.0,  hPrev))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if  (!Precision.equals(x,  0.0,  hPrev))  {  if  (!Paint.equals(x,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if    (!Precision.equals(x,    0.0,    hPrev))    {    if  (!Paint.equals(x,  0.0,  hPrev))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
357	[BUG]  [BUGGY]  int  small  =  x  +  getScaleFactor(epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  getScaleFactor(epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  getScaleFactor(epsilon,  maxIterations);	  int    small    =    epsilon    +    getScaleFactor(x,    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
358	[BUG]  [BUGGY]  double  dPrev  =  getScaleFactor(small,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getScaleFactor(small,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getScaleFactor(small,  x);	  double    dPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
359	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);	  double    dPrev    =    getD(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
360	[BUG]  [BUGGY]  double  i  =  getA(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(x,  epsilon,  maxIterations);	  double    i    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
361	[BUG]  [BUGGY]  double  i  =  getA(0,  y);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  i  =  getA(0,  y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  i  =  getA(0,  y);	  double    i    =    getA(0);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
362	[BUG]  [BUGGY]  int  small  =  x  +  hN;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  x  +  hN;  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  x  +  hN;	  int    small    =    epsilon    +    hN;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
363	[BUG]  [BUGGY]  double  dPrev  =  getD(short,  x);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(short,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(short,  x);	  double    dPrev    =    getD(short,    epsilon);    	non-compiled	[CE]  '.class'  expected	37	None	replace
364	[BUG]  [BUGGY]  double  epsilon  =  getD(y,  epsilon,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  epsilon  =  getD(y,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  epsilon  =  getD(y,  epsilon,  maxIterations);	  double    epsilon    =    getD(x,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
365	[BUG]  [BUGGY]  double  b  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  b  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  b  =  getA(0,  x  +  1);	  double    b    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
366	[BUG]  [BUGGY]  double  dPrev  =  getD(a,  y);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  dPrev  =  getD(a,  y);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  dPrev  =  getD(a,  y);	  double    dPrev    =    getD(a,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
367	[BUG]  [BUGGY]  if(epsilon.equals(small,  x,  epsilon,  maxIterations))  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(epsilon.equals(small,  x,  epsilon,  maxIterations))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(epsilon.equals(small,  x,  epsilon,  maxIterations))  {	  if(epsilon.equals(x,    epsilon,    maxIterations))    {    	non-compiled	[CE]  double  cannot  be  dereferenced	78	None	replace
368	[BUG]  [BUGGY]  double  n  =  getA(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  double  n  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	double  n  =  getA(0,  x  +  1);	  double    n    =    getA(0,    x);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
369	[BUG]  [BUGGY]  if(x.equals(short,  0.0,  hPrev))  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  if(x.equals(short,  0.0,  hPrev))  {  [BUGGY]      hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	if(x.equals(short,  0.0,  hPrev))  {	  if(short.equals(x,    0.0,    hPrev))    {    	non-compiled	[CE]  '.class'  expected	96	None	replace
370	[BUG]  [BUGGY]  int  small  =  getScaleFactor(0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);        [BUGGY]  int  small  =  getScaleFactor(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	128	128	2	replace	int  small  =  getScaleFactor(0,  x  +  1);	  int    small    =    getScaleFactor(0,    x);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
