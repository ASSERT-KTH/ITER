bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  a  =  getA(n,  x)+  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  x)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  x)+  1;	  final    double    a    =    getA(n,    x)+    1;    final    int    a    =    getA(n,    x)+    1;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
2	[BUG]  [BUGGY]  final  int  a  =  getB(n,  x)+  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getB(n,  x)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getB(n,  x)+  1;	  final    double    a    =    getA(n,    x)+    1;    final    int    a    =    getA(n,    x)+    1;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
3	[BUG]  [BUGGY]  double  x  =  getX(n,  dPrev);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  dPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  dPrev);	  int    x    =    getX(n,    dPrev);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	99	None	replace
4	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
5	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
6	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  cN);  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  cN);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  cN	1	None	replace
7	[BUG]  [BUGGY]  n  =  getN(n,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x,  epsilon,  maxIterations);	  n    =    getN(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
8	[BUG]  [BUGGY]  n  =  getN(n,  x,  hN);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x,  hN);	  n    =    getN(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
9	[BUG]  [BUGGY]  n  =  getN(n,  x,  cN);  [CE]  cannot  find  symbol  cN  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x,  cN);	  n    =    getN(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  cN	98	None	replace
10	[BUG]  [BUGGY]  n  =  getN(n,  x  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x  +  1,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x  +  1,  maxIterations);	  n    =    getN(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
11	[BUG]  [BUGGY]  n  =  getN(n,  x  +  2);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x  +  2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x  +  2);	  n    =    getN(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
12	[BUG]  [BUGGY]  n  =  getN(n,  p0);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  p0);	  n    =    getN(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
13	[BUG]  [BUGGY]  n  =  getN(n,  cPrev);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  cPrev);	  n    =    getN(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
14	[BUG]  [BUGGY]  final  double  a  =  getC(n,  x);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getC(n,  x);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getC(n,  x);	  final    double    a    =    getC(n,    p0);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
15	[BUG]  [BUGGY]  final  double  a  =  getX(n,  p0);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getX(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getX(n,  p0);	  final    double    a    =    getC(n,    p0);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
16	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x,  hN,  p0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x,  hN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x,  hN,  p0);	  final    double    cN    =    getA(n,    x,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
17	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  q1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x,  p0,  q1);	  final    double    cN    =    getA(n,    x,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
18	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  hN);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x,  p0,  hN);	  final    double    cN    =    getA(n,    x,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
19	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  cN);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x,  p0,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x,  p0,  cN);	  final    double    cN    =    getA(n,    x,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
20	[BUG]  [BUGGY]  x  =  getX(n,  cPrev);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  cPrev);	  x    =    getX(n,    x1);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
21	[BUG]  [BUGGY]  x  =  getX(n,  p0);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  p0);	  x    =    getX(n,    x1);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
22	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getB(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getB(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    p0);    final  double  a  =  getB(n,  p0);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
23	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getA(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getA(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    p0);    final  double  a  =  getA(n,  p0);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
24	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0);  Final  double  a  =  getB(n,  p0);  [CE]  not  a  statement  [FE]        ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0);  Final  double  a  =  getB(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    p0);    Final  double  a  =  getB(n,  p0);	  	non-compiled	[CE]  not  a  statement	5	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  hN);	  final    double    a    =    getA(n,    hN);    	compilable	  [FE]  AssertionError  	71	9	replace
26	[BUG]  [BUGGY]  final  double  a  =  getB(n,  hN);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  hN);	  final    double    a    =    getA(n,    hN);    	compilable	  [FE]  AssertionError  	71	9	replace
27	[BUG]  [BUGGY]  final  double  a  =  getC(n,  hN);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getC(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getC(n,  hN);	  final    double    a    =    getA(n,    hN);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
28	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  x  +  2);	  final    double    a    =    getA(n,    x    +    2);    	compilable	  [FE]  ConvergenceException  	18	9	replace
29	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  2);  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x  +  2);	  final    double    a    =    getA(n,    x    +    2);    	compilable	  [FE]  ConvergenceException  	18	9	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  *  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  x  *  2);	  final    double    a    =    getA(n,    x    +    2);    	compilable	  [FE]  AssertionError  	18	2	replace
31	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  *  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  *  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x  *  2);	  final    double    a    =    getA(n,    x    +    2);    	compilable	  [FE]  AssertionError  	18	2	replace
32	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  cN);	  final    double    a    =    getA(n,    cN);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  cN	2	None	replace
33	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  x);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    cN);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
34	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  a  =  getA(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  a  =  getA(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    hN);    final  double  a  =  getA(n,  hN);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	70	None	add
35	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  a  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  a  =  getB(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    hN);    final  double  a  =  getB(n,  hN);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	70	None	add
36	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  Final  double  a  =  getA(n,  hN);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  hN);  Final  double  a  =  getA(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    hN);    Final  double  a  =  getA(n,  hN);	  	non-compiled	[CE]  not  a  statement	70	None	add
37	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  x)/  2;	  final    double    a    =    getA(n,    x)+    2;    	compilable	  [FE]  ConvergenceException  	54	8	replace
38	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x)/  2;	  final    double    a    =    getA(n,    x)+    2;    	compilable	  [FE]  ConvergenceException  	54	8	replace
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  x)+  2;	  final    double    a    =    getA(n,    x)+    2;    	compilable	  [FE]  OutOfRangeException  	54	9	replace
40	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)+  2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x)+  2;	  final    double    a    =    getA(n,    x)+    2;    	compilable	  [FE]  OutOfRangeException  	54	9	replace
41	[BUG]  [BUGGY]  double  x  =  getX(n,  x  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  x  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  x  +  1);	  x    =    getX(n,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	31	None	replace
42	[BUG]  [BUGGY]  x  =  getX(n,  x  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  x  +  1,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  x  +  1,  maxIterations);	  x    =    getX(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
43	[BUG]  [BUGGY]  int  i  =  getIterations(n,  p0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  p0);	  int    i    =    getIterations(n,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  x);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    x0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
45	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    final  double  a  =  getA(n,  x)/  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	add
46	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  2;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    final  double  a  =  getA(n,  x)/  2;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	add
47	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  Final  double  a  =  getA(n,  x)/  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  Final  double  a  =  getA(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    Final  double  a  =  getA(n,  x)/  1;	  	non-compiled	[CE]  not  a  statement	49	None	add
48	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)  *  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)  *  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    final  double  a  =  getA(n,  x)  *  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	add
49	[BUG]  [BUGGY]  final  double  a  =  getS(n,  x);  [CE]  cannot  find  symbol  [FE]              ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getS(n,  x);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getS(n,  x);	  final    double    a    =    getB(n,    x);    final    double    a    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
50	[BUG]  [BUGGY]  final  double  a  =  getS(n,  hN);  [CE]  cannot  find  symbol  [FE]                ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getS(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getS(n,  hN);	  final    double    a    =    getB(n,    x);    final    double    a    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
51	[BUG]  [BUGGY]  final  double  a  =  getS(n,  p0);  [CE]  cannot  find  symbol  [FE]                  ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getS(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getS(n,  p0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
52	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  q1);	  final    double    a    =    getA(n,    q1);    	compilable	  [FE]  ConvergenceException  	69	9	replace
53	[BUG]  [BUGGY]  final  double  a  =  getB(n,  q1);  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  q1);	  final    double    a    =    getA(n,    q1);    	compilable	  [FE]  ConvergenceException  	69	9	replace
54	[BUG]  [BUGGY]  final  double  a  =  getC(n,  q1);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getC(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getC(n,  q1);	  final    double    a    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
55	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  1,  hN);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  1,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x  +  1,  hN);	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getB(n,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	11	None	replace
56	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  epsilon,  maxIterations);	  int    i    =    getIterations(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
57	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  hN);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  hN);	  int    i    =    getIterations(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
58	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  MAX_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  MAX_EPSILON);	  int    i    =    getIterations(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	20	None	replace
59	[BUG]  [BUGGY]  Integer  b  =  getB(n,  p0  +  1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  p0  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  p0  +  1);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  incompatible  types	74	None	replace
60	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x  +  1,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x  +  1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x  +  1,  p0);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	74	None	replace
61	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x  +  2);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x  +  2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x  +  2);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  incompatible  types	74	None	replace
62	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  p0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  p0);	  int    i    =    getIterations(n,    x,    cN);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
63	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  2);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x    +    2);    final  double  a  =  getA(n,  x  +  2);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
64	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  2);  Final  double  a  =  getA(n,  x  +  2);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  2);  Final  double  a  =  getA(n,  x  +  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x    +    2);    Final  double  a  =  getA(n,  x  +  2);	  	non-compiled	[CE]  not  a  statement	17	None	add
65	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  2));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  2));  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x    +    2);    final  double  a  =  getA(n,  x  +  2));	  	non-compiled	[CE]  ';'  expected	17	None	add
66	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getA(n,  x  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x    +    2);    final  double  a  =  getA(n,  x  +  1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
67	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  1));  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  1));  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x  +  1));	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getA(n,    x    +    1));    	non-compiled	[CE]  ';'  expected	9	None	replace
68	[BUG]  [BUGGY]  double  x  =  getX(n,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  p0);	  int    x    =    getX(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	38	None	replace
69	[BUG]  [BUGGY]  final  int  a  =  getA(n,  p0);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  p0);	  final    double    a    =    getA(n,    p0);    final    int    a    =    getA(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
70	[BUG]  [BUGGY]  final  int  a  =  getA(n,  p1);  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  p1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  p1);	  final    double    a    =    getA(n,    p0);    final    int    a    =    getA(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  p1	29	None	replace
71	[BUG]  [BUGGY]  int  a  =  getA(n,  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  a  =  getA(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  a  =  getA(n,  p0);	  final    double    a    =    getA(n,    p0);    final    int    a    =    getA(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
72	[BUG]  [BUGGY]  final  double  cN  =  getC(n,  p0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getC(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getC(n,  p0);	  final    double    cN    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
73	[BUG]  [BUGGY]  final  double  cN  =  getC(n,  x,  cN);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getC(n,  x,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getC(n,  x,  cN);	  final    double    cN    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
74	[BUG]  [BUGGY]  final  double  cN  =  getC(n,  x  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getC(n,  x  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getC(n,  x  +  1);	  final    double    cN    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
75	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p1);  [CE]  cannot  find  symbol  p1  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p1);	  final    double    a    =    getA(n,    p0);    final    double    a    =    getA(n,    p1);    	non-compiled	[CE]  cannot  find  symbol  p1	78	None	replace
76	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y);  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  y);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  y);	  final    double    a    =    getA(n,    cN);    	non-compiled	[CE]  cannot  find  symbol  y	59	None	replace
77	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  x)/  1;	  final    double    a    =    getB(n,    x)+    1;    	compilable	  [FE]  ConvergenceException  	52	11	replace
78	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)/  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x)/  1;	  final    double    a    =    getB(n,    x)+    1;    	compilable	  [FE]  ConvergenceException  	52	11	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  cPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  cPrev);	  final    double    a    =    getA(n,    x1);    	compilable	  [FE]  AssertionError  	95	2	replace
80	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cPrev);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  cPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  cPrev);	  final    double    a    =    getA(n,    x1);    	compilable	  [FE]  AssertionError  	95	2	replace
81	[BUG]  [BUGGY]  final  double  x  =  getX(n,  cN,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  cN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  cN,  p0);	  final    double    x    =    getX(n,    cN);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	24	None	replace
82	[BUG]  [BUGGY]  final  double  cN  =  getX(n,  cN);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getX(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getX(n,  cN);	  final    double    x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
83	[BUG]  [BUGGY]  int  i  =  getIterations(n,  cPrev);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  cPrev);	  int    i    =    getIterations(n,    dPrev);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
84	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)+  2;  final  double  a  =  getA(n,  x)+  2;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)+  2;  final  double  a  =  getA(n,  x)+  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)+    2;    final  double  a  =  getA(n,  x)+  2;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	53	None	add
85	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)+  2;  Final  double  a  =  getA(n,  x)+  2;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)+  2;  Final  double  a  =  getA(n,  x)+  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)+    2;    Final  double  a  =  getA(n,  x)+  2;	  	non-compiled	[CE]  not  a  statement	53	None	add
86	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)+  2;  final  double  a  =  getB(n,  x)+  2;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)+  2;  final  double  a  =  getB(n,  x)+  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)+    2;    final  double  a  =  getB(n,  x)+  2;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	53	None	add
87	[BUG]  [BUGGY]  final  double  a  =  getC(n,  dPrev);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getC(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getC(n,  dPrev);	  final    double    a    =    getA(n,    dPrev);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
88	[BUG]  [BUGGY]  final  double  a  =  getD(n,  x);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getD(n,  x);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getD(n,  x);	  final    double    a    =    getA(n,    dPrev);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
89	[BUG]  [BUGGY]  double  x  =  getX(n,  cN);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  cN);	  double    x    =    getX(n,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
90	[BUG]  [BUGGY]  double  x  =  getX(n,  cPrev);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  cPrev);	  double    x    =    getX(n,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
91	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  cPrev);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  cPrev);	  final    double    x    =    getA(n,    cPrev);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
92	[BUG]  [BUGGY]  int  cN  =  getX(n,  cN);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  cN  =  getX(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  cN  =  getX(n,  cN);	  int    x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
93	[BUG]  [BUGGY]  int  x  =  getX(n,  cN,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  x  =  getX(n,  cN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  x  =  getX(n,  cN,  p0);	  int    x    =    getX(n,    cN);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	39	None	replace
94	[BUG]  [BUGGY]  final  double  a  =  getF(n,  hN);  [CE]  cannot  find  symbol  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  hN);	  final    double    a    =    getB(n,    x);    final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
95	[BUG]  [BUGGY]  final  double  a  =  getF(n,  p0);  [CE]  cannot  find  symbol  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  p0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
96	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x  +  1,  p0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x  +  1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x  +  1,  p0);	  final    double    cN    =    getA(n,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	72	None	replace
97	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  p0  +  1);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  p0  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  p0  +  1);	  final    double    cN    =    getA(n,    x    +    1);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
98	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getA(n,  q1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getA(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    q1);    final  double  a  =  getA(n,  q1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	68	None	add
99	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  Final  double  a  =  getA(n,  q1);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  Final  double  a  =  getA(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    q1);    Final  double  a  =  getA(n,  q1);	  	non-compiled	[CE]  not  a  statement	68	None	add
100	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getB(n,  q1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getB(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    q1);    final  double  a  =  getB(n,  q1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	68	None	add
101	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  int  a  =  getA(n,  q1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  final  int  a  =  getA(n,  q1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    q1);    final  int  a  =  getA(n,  q1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	68	None	add
102	[BUG]  [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getA(n,  dPrev);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getA(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    dPrev);    final  double  a  =  getA(n,  dPrev);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	add
103	[BUG]  [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getB(n,  dPrev);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getB(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    dPrev);    final  double  a  =  getB(n,  dPrev);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	add
104	[BUG]  [BUGGY]  final  double  a  =  getA(n,  dPrev);  Final  double  a  =  getA(n,  dPrev);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  dPrev);  Final  double  a  =  getA(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    dPrev);    Final  double  a  =  getA(n,  dPrev);	  	non-compiled	[CE]  not  a  statement	60	None	add
105	[BUG]  [BUGGY]  final  double  n  =  getN(n,  p0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  p0);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
106	[BUG]  [BUGGY]  final  double  n  =  getN(n,  cN);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  cN);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
107	[BUG]  [BUGGY]  final  double  n  =  getN(n,  dPrev);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  dPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  dPrev);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
108	[BUG]  [BUGGY]  final  double  cN  =  getX(n,  cPrev);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getX(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getX(n,  cPrev);	  final    double    x    =    getX(n,    cPrev);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
109	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q1);	  final    double    a    =    getA(n,    q1);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	88	None	replace
110	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q2);  [CE]  cannot  find  symbol  q2  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q2);	  final    double    a    =    getA(n,    q1);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  q2	88	None	replace
111	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q0);  [CE]  cannot  find  symbol  q0  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  q0);	  final    double    a    =    getA(n,    q1);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  q0	88	None	replace
112	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  1,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  1,  maxIterations);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x  +  1,  maxIterations);	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getA(n,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	8	None	replace
113	[BUG]  [BUGGY]  final  double  x  =  getA(n,  p0,  q1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  p0,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  p0,  q1);	  final    double    x    =    getA(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	55	None	replace
114	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  p0  +  1);	  final    double    a    =    getB(n,    x    +    1);    	compilable	  [FE]  ConvergenceException  	16	9	replace
115	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0  +  1);  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  p0  +  1);	  final    double    a    =    getB(n,    x    +    1);    	compilable	  [FE]  ConvergenceException  	16	9	replace
116	[BUG]  [BUGGY]  final  double  x  =  getA(n,  cN,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  cN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  cN,  p0);	  final    double    x    =    getA(n,    cN);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
117	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  cN);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  cN);	  final    double    x    =    getA(n,    cN);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
118	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cN);  final  double  b  =  getB(n,  hN);  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  cN);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  cN);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  cannot  find  symbol  cN	3	None	replace
119	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
120	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  cN,  epsilon);  [CE]  cannot  find  symbol  cN  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  cN,  epsilon);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  cN,  epsilon);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  cN	90	None	replace
121	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  hN,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  hN,  epsilon);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  hN,  epsilon);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	90	None	replace
122	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  p0,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  p0,  epsilon);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  p0,  epsilon);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	90	None	replace
123	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  epsilon,  maxIterations);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	90	None	replace
124	[BUG]  [BUGGY]  int  i  =  getIterations(epsilon,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(epsilon,  n);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(epsilon,  n);	  int    i    =    getIterations(n,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
125	[BUG]  [BUGGY]  int  i  =  getIterations(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(x,  epsilon);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(x,  epsilon);	  int    i    =    getIterations(n,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
126	[BUG]  [BUGGY]  final  double  a  =  getB(x,  n,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  n,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  n,  hN);	  final    double    a    =    getB(x,    n);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	84	None	replace
127	[BUG]  [BUGGY]  final  double  a  =  getB(x,  n,  cN);  [CE]  cannot  find  symbol  cN  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  n,  cN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  n,  cN);	  final    double    a    =    getB(x,    n);    	non-compiled	[CE]  cannot  find  symbol  cN	84	None	replace
128	[BUG]  [BUGGY]  final  double  a  =  getB(x,  n,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  n,  p0);	  final    double    a    =    getB(x,    n);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	84	None	replace
129	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getB(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getB(n,  x  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x    +    1);    final  double  a  =  getB(n,  x  +  1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
130	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getB(n,  x  +  1));  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getB(n,  x  +  1));  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x    +    1);    final  double  a  =  getB(n,  x  +  1));	  	non-compiled	[CE]  ';'  expected	15	None	add
131	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x    +    1);    final  double  a  =  getA(n,  x  +  1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
132	[BUG]  [BUGGY]  final  double  a  =  getB(x,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  p0);	  final    double    a    =    getB(n,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	6	None	replace
133	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  3;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  x)/  3;	  final    double    a    =    getA(n,    x)/    1;    	compilable	  [FE]  ConvergenceException  	50	9	replace
134	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  3;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  3;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x)/  3;	  final    double    a    =    getA(n,    x)/    1;    	compilable	  [FE]  ConvergenceException  	50	9	replace
135	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  4;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  x)/  4;	  final    double    a    =    getA(n,    x)/    1;    	compilable	  [FE]  ConvergenceException  	50	9	replace
136	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  4;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  4;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x)/  4;	  final    double    a    =    getA(n,    x)/    1;    	compilable	  [FE]  ConvergenceException  	50	9	replace
137	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  p0,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  p0,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  p0,  hN);	  Integer    b    =    getB(n,    x,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	62	None	replace
138	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  hN,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  hN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  hN,  p0);	  Integer    b    =    getB(n,    x,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	62	None	replace
139	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  p0,  cN);  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  p0,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  p0,  cN);	  Integer    b    =    getB(n,    x,    p0);    	non-compiled	[CE]  cannot  find  symbol  cN	62	None	replace
140	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  cN,  p0);  [CE]  cannot  find  symbol  cN  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  cN,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  cN,  p0);	  Integer    b    =    getB(n,    x,    p0);    	non-compiled	[CE]  cannot  find  symbol  cN	62	None	replace
141	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  hN,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  hN,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  hN,  maxIterations);	  Integer    b    =    getB(n,    x,    maxIterations);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	65	None	replace
142	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  p0,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  p0,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  p0,  maxIterations);	  Integer    b    =    getB(n,    x,    maxIterations);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	65	None	replace
143	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  cN,  maxIterations);  [CE]  cannot  find  symbol  cN  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  cN,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  cN,  maxIterations);	  Integer    b    =    getB(n,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  cN	65	None	replace
144	[BUG]  [BUGGY]  final  double  cN  =  getC(n,  q1);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getC(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getC(n,  q1);	  final    double    cN    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
145	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p0);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p0);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
146	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
147	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p1);  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  p1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  cannot  find  symbol  p1	100	None	replace
148	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  p0,  q1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  p0,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  p0,  q1);	  final    double    cN    =    getA(n,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	46	None	replace
149	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  y);  [CE]  cannot  find  symbol  y  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  y);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  y);	  final    double    cN    =    getA(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  y	46	None	replace
150	[BUG]  [BUGGY]  double  x  =  getX(n,  hN);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  hN);	  int    x    =    getX(n,    hN);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	76	None	replace
151	[BUG]  [BUGGY]  int  cN  =  getX(n,  cPrev);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  cN  =  getX(n,  cPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  cN  =  getX(n,  cPrev);	  int    x    =    getX(n,    cPrev);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
152	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x1);  [CE]  cannot  find  symbol  x1  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x1);	  final    double    cN    =    getA(n,    x0);    	non-compiled	[CE]  cannot  find  symbol  x1	47	None	replace
153	[BUG]  [BUGGY]  n  =  getN(n,  x1);  [CE]  cannot  find  symbol  x1  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x1);	  n    =    getN(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  x1	86	None	replace
154	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getA(n,  x)-  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getA(n,  x)-  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)-    1;    final  double  a  =  getA(n,  x)-  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	93	None	add
155	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)-  1;  Final  double  a  =  getA(n,  x)-  1;  [CE]  not  a  statement  [FE]      ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  1;  Final  double  a  =  getA(n,  x)-  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)-    1;    Final  double  a  =  getA(n,  x)-  1;	  	non-compiled	[CE]  not  a  statement	93	None	add
156	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getB(n,  x)-  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getB(n,  x)-  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)-    1;    final  double  a  =  getB(n,  x)-  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	93	None	add
157	[BUG]  [BUGGY]  final  double  cN  =  getB(n,  x);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getB(n,  x);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getB(n,  x);	  final    double    a    =    getB(n,    cN);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	replace
158	[BUG]  [BUGGY]  final  double  a  =  getB(n,  y);  [CE]  cannot  find  symbol  y  [FE]            ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  y);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  y);	  final    double    a    =    getB(n,    cN);    	non-compiled	[CE]  cannot  find  symbol  y	7	None	replace
159	[BUG]  [BUGGY]  Integer  b  =  getB(n,  p0,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  p0,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  p0,  hN);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	64	None	replace
160	[BUG]  [BUGGY]  Integer  b  =  getB(n,  p0,  q1);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  p0,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  p0,  q1);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	64	None	replace
161	[BUG]  [BUGGY]  Integer  b  =  getB(n,  p0,  cN);  [CE]  cannot  find  symbol  cN  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  p0,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  p0,  cN);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  cN	64	None	replace
162	[BUG]  [BUGGY]  final  double  a  =  getF(n,  x,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  x,  maxIterations);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  x,  maxIterations);	  final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
163	[BUG]  [BUGGY]  int  hN  =  getIterations(n,  n);  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  hN  =  getIterations(n,  n);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  hN  =  getIterations(n,  n);	  int    i    =    getIterations(n,    hN);    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	81	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)-  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  x)-  1;	  final    double    a    =    getA(n,    x)-    1;    	compilable	  [FE]  AssertionError  	94	7	replace
165	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)-  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)-  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x)-  1;	  final    double    a    =    getA(n,    x)-    1;    	compilable	  [FE]  AssertionError  	94	7	replace
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  x)-  2;	  final    double    a    =    getA(n,    x)-    1;    	compilable	  [FE]  AssertionError  	94	8	replace
167	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)-  2;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  2;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x)-  2;	  final    double    a    =    getA(n,    x)-    1;    	compilable	  [FE]  AssertionError  	94	8	replace
168	[BUG]  [BUGGY]  double  x  =  getX(n,  q1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  double  x  =  getX(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	double  x  =  getX(n,  q1);	  int    x    =    getX(n,    q1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	77	None	replace
169	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  a  =  getB(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  a  =  getB(n,  p0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  a  =  getB(n,  p0);	  final    double    a    =    getA(n,    p0);    final    double    a    =    getB(n,    p0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	27	None	replace
170	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  cN,  hN);  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  cN,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  cN,  hN);	  Integer    b    =    getB(n,    x,    hN);    	non-compiled	[CE]  cannot  find  symbol  cN	63	None	replace
171	[BUG]  [BUGGY]  Integer  b  =  getB(n,  cN,  x,  hN);  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  cN,  x,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  cN,  x,  hN);	  Integer    b    =    getB(n,    x,    hN);    	non-compiled	[CE]  cannot  find  symbol  cN	63	None	replace
172	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x  +  1,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x  +  1,  maxIterations);	  int    i    =    getIterations(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
173	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x  +  2);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x  +  2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x  +  2);	  int    i    =    getIterations(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
174	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  double  a  =  getB(n,  x)+  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  double  a  =  getB(n,  x)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x)+    1;    final  double  a  =  getB(n,  x)+  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	51	None	add
175	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)+  1;  Final  double  a  =  getB(n,  x)+  1;  [CE]  not  a  statement  [FE]      OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  1;  Final  double  a  =  getB(n,  x)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x)+    1;    Final  double  a  =  getB(n,  x)+  1;	  	non-compiled	[CE]  not  a  statement	51	None	add
176	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  int  a  =  getB(n,  x)+  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  int  a  =  getB(n,  x)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x)+    1;    final  int  a  =  getB(n,  x)+  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	51	None	add
177	[BUG]  [BUGGY]  final  double  a  =  getB(n,  y0);  [CE]  cannot  find  symbol  y0  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  y0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  y0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getB(n,    y);    	non-compiled	[CE]  cannot  find  symbol  y0	79	None	replace
178	[BUG]  [BUGGY]  final  double  n  =  getN(n,  q1);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  q1);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
179	[BUG]  [BUGGY]  final  double  n  =  getN(n,  x  +  1);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  x  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  x  +  1);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
180	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  DEFAULT_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  DEFAULT_EPSILON);	  int    i    =    getIterations(n,    x,    cN);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
181	[BUG]  [BUGGY]  final  double  a  =  getF(n,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  x,  epsilon);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  x,  epsilon);	  final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
182	[BUG]  [BUGGY]  final  double  a  =  getF(n,  x  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  x  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  x  +  1);	  final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
183	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getB(n,  x)/  1;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getB(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    final  double  a  =  getB(n,  x)/  1;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	add
184	[BUG]  [BUGGY]  final  double  x  =  getA(n,  q0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  q0);	  final    double    x    =    getA(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	55	None	replace
185	[BUG]  [BUGGY]  final  double  x  =  getA(n,  q1,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  q1,  p0);	  final    double    x    =    getA(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	55	None	replace
186	[BUG]  [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getA(n,  dprev);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  dPrev);  final  double  a  =  getA(n,  dprev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    dPrev);    final  double  a  =  getA(n,  dprev);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	add
187	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x,  q1,  p0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x,  q1,  p0);	  final    double    cN    =    getA(n,    x,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
188	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getA(n,  x)-  1);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)-  1;  final  double  a  =  getA(n,  x)-  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)-    1;    final  double  a  =  getA(n,  x)-  1);	  	non-compiled	[CE]  ';'  expected	93	None	add
189	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  q1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  q1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
190	[BUG]  [BUGGY]  int  i  =  getIterations(n,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  epsilon,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  epsilon,  maxIterations);	  int    i    =    getIterations(n,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
191	[BUG]  [BUGGY]  int  i  =  getIterations(n,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  DEFAULT_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  DEFAULT_EPSILON);	  int    i    =    getIterations(n,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
192	[BUG]  [BUGGY]  final  double  a  =  getF(n,  y0);  [CE]  cannot  find  symbol  y0  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  y0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  y0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol  y0	102	None	replace
193	[BUG]  [BUGGY]  final  double  a  =  getX(n,  cN);  [CE]  cannot  find  symbol  cN  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getX(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getX(n,  cN);	  final    double    x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol  cN	24	None	replace
194	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);  [CE]  cannot  find  symbol  x0  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  cannot  find  symbol  x0	3	None	replace
195	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
196	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y0);  [CE]  cannot  find  symbol  y0  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  y0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  y0);	  final    double    a    =    getA(n,    hN);    	non-compiled	[CE]  cannot  find  symbol  y0	71	None	replace
197	[BUG]  [BUGGY]  n  =  getN(n,  q0);  [CE]  cannot  find  symbol  q0  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  q0);	  n    =    getN(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  q0	86	None	replace
198	[BUG]  [BUGGY]  final  int  a  =  getA(n,  maxIterations);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  maxIterations);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  maxIterations);	  final    double    a    =    getA(n,    p0);    final    int    a    =    getA(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
199	[BUG]  [BUGGY]  Integer  b  =  getB(n,  q1);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  q1);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  incompatible  types	64	None	replace
200	[BUG]  [BUGGY]  Integer  b  =  getB(n,  q1,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  q1,  p0);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	64	None	replace
201	[BUG]  [BUGGY]  Integer  b  =  getB(n,  q0);  [CE]  cannot  find  symbol  q0  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  q0);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  q0	64	None	replace
202	[BUG]  [BUGGY]  n  =  getN(n,  x  +  3);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x  +  3);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x  +  3);	  n    =    getN(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
203	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  hN,  dPrev);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  hN,  dPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  hN,  dPrev);	  Integer    b    =    getB(n,    x,    hN);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	63	None	replace
204	[BUG]  [BUGGY]  final  double  a  =  getB(x,  n,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  n,  epsilon);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  n,  epsilon);	  final    double    a    =    getB(x,    n);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	84	None	replace
205	[BUG]  [BUGGY]  final  double  a  =  getB(x,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(x,  hN);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(x,  hN);	  final    double    a    =    getB(x,    n);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	84	None	replace
206	[BUG]  [BUGGY]  final  double  q1  =  getX(n,  q1);  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  q1  =  getX(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  q1  =  getX(n,  q1);	  final    double    x    =    getX(n,    q1);    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
207	[BUG]  [BUGGY]  final  double  x  =  getX(n,  q0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  q0);	  final    double    x    =    getX(n,    q1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
208	[BUG]  [BUGGY]  final  double  q0  =  getX(n,  q1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  q0  =  getX(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  q0  =  getX(n,  q1);	  final    double    x    =    getX(n,    q1);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
209	[BUG]  [BUGGY]  x  =  getX(n,  q1);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  q1);	  x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
210	[BUG]  [BUGGY]  x  =  getX(n,  hN);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  hN);	  x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
211	[BUG]  [BUGGY]  int  i  =  getIterations(n,  hN,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  hN,  maxIterations);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  hN,  maxIterations);	  int    i    =    getIterations(n,    hN);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
212	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x  *  1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x  *  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x  *  1);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  incompatible  types	74	None	replace
213	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x  +  1,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x  +  1,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x  +  1,  hN);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	74	None	replace
214	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x1);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  x1  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x1);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x1);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    x0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x1	4	None	replace
215	[BUG]  [BUGGY]  final  double  q1  =  getA(n,  q1);  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  q1  =  getA(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  q1  =  getA(n,  q1);	  final    double    x    =    getA(n,    q1);    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	66	None	replace
216	[BUG]  [BUGGY]  final  double  q0  =  getA(n,  q1);  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  q0  =  getA(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  q0  =  getA(n,  q1);	  final    double    x    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  a	66	None	replace
217	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x  +  3);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x  +  3);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x  +  3);	  int    i    =    getIterations(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
218	[BUG]  [BUGGY]  x  =  getX(n,  x  +  2);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  x  +  2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  x  +  2);	  x    =    getX(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
219	[BUG]  [BUGGY]  x  =  getX(n,  x  +  3);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  x  +  3);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  x  +  3);	  x    =    getX(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
220	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  q0  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  q0	1	None	replace
221	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  q1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  q1);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
222	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  double  a  =  getB(n,  x)+  1);  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x)+  1;  final  double  a  =  getB(n,  x)+  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x)+    1;    final  double  a  =  getB(n,  x)+  1);	  	non-compiled	[CE]  ';'  expected	51	None	add
223	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  q1,  p0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  q1,  p0);	  final    double    cN    =    getA(n,    p0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	46	None	replace
224	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  q0);  [CE]  cannot  find  symbol  q0  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  q0);	  final    double    cN    =    getA(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  q0	46	None	replace
225	[BUG]  [BUGGY]  final  double  qN  =  getA(n,  q1);  [CE]  cannot  find  symbol  a  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  qN  =  getA(n,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  qN  =  getA(n,  q1);	  final    double    cN    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  a	73	None	replace
226	[BUG]  [BUGGY]  final  double  qN  =  getA(n,  q0);  [CE]  cannot  find  symbol  q0  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  qN  =  getA(n,  q0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  qN  =  getA(n,  q0);	  final    double    cN    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  q0	73	None	replace
227	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  0);	  int    i    =    getIterations(n,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
228	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  MAX_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  epsilon,  MAX_EPSILON);	  int    i    =    getIterations(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	20	None	replace
229	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  epsilon,  DEFAULT_EPSILON);	  int    i    =    getIterations(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
230	[BUG]  [BUGGY]  final  double  x  =  getX(n,  q1,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  q1,  p0);	  final    double    x    =    getX(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	22	None	replace
231	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getB(n,  p1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  p0);  final  double  a  =  getB(n,  p1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    p0);    final  double  a  =  getB(n,  p1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
232	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x  +  2);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x  +  2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x  +  2);	  final    double    cN    =    getA(n,    x    +    1);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
233	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getC(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x  +  1);  final  double  a  =  getC(n,  x  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getB(n,    x    +    1);    final  double  a  =  getC(n,  x  +  1);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
234	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getB(n,  x  +  2);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  2);  final  double  a  =  getB(n,  x  +  2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x    +    2);    final  double  a  =  getB(n,  x  +  2);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  DEFAULT_EPSILON);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getA(n,  DEFAULT_EPSILON);	  final    double    a    =    getA(n,    cN);    	compilable	  [FE]  AssertionError  	59	2	replace
236	[BUG]  [BUGGY]  final  double  a  =  getA(n,  DEFAULT_EPSILON);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  DEFAULT_EPSILON);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  DEFAULT_EPSILON);	  final    double    a    =    getA(n,    cN);    	compilable	  [FE]  AssertionError  	59	2	replace
237	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x  -  1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x  -  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x  -  1);	  Integer    b    =    getB(n,    x    +    1);    	non-compiled	[CE]  incompatible  types	74	None	replace
238	[BUG]  [BUGGY]  n  =  getN(n,  x,  epsilon,  MAX_EPSILON);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x,  epsilon,  MAX_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x,  epsilon,  MAX_EPSILON);	  n    =    getN(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	98	None	replace
239	[BUG]  [BUGGY]  n  =  getN(n,  x,  epsilon,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x,  epsilon,  DEFAULT_EPSILON);	  n    =    getN(n,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
240	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  hN,  cN);  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  hN,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  hN,  cN);	  Integer    b    =    getB(n,    x,    hN);    	non-compiled	[CE]  cannot  find  symbol  cN	63	None	replace
241	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x0  +  1);  [CE]  cannot  find  symbol  x0  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x0  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x0  +  1);	  final    double    cN    =    getA(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  x0	72	None	replace
242	[BUG]  [BUGGY]  final  double  cN  =  getA(n,  x)+  1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getA(n,  x)+  1;  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getA(n,  x)+  1;	  final    double    cN    =    getA(n,    x    +    1);    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
243	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  3;  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x)/  1;  final  double  a  =  getA(n,  x)/  3;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    x)/    1;    final  double  a  =  getA(n,  x)/  3;	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	add
244	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getA(n,  q2);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  a  =  getA(n,  q2);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final    double    a    =    getA(n,    q1);    final  double  a  =  getA(n,  q2);	  	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	68	None	add
245	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x0  +  1);  [CE]  cannot  find  symbol  x0  [FE]    ConvergenceException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x0  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x0  +  1);	  final    double    a    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  x0	16	None	replace
246	[BUG]  [BUGGY]  x  =  getX(n,  x2);  [CE]  cannot  find  symbol  x2  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  x2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  x2);	  x    =    getX(n,    x1);    	non-compiled	[CE]  cannot  find  symbol  x2	103	None	replace
247	[BUG]  [BUGGY]  final  double  qN  =  getA(n,  x);  [CE]  cannot  find  symbol  a  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  qN  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  qN  =  getA(n,  x);	  final    double    cN    =    getA(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  a	73	None	replace
248	[BUG]  [BUGGY]  x  =  getX(n,  dPrev);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  dPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  dPrev);	  x    =    getX(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
249	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x  +  1,  n);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x  +  1,  n);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x  +  1,  n);	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getA(n,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	8	None	replace
250	[BUG]  [BUGGY]  final  double  dPrev  =  getA(n,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  dPrev  =  getA(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  dPrev  =  getA(n,  x);	  final    double    x    =    getA(n,    dPrev);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	58	None	replace
251	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
252	[BUG]  [BUGGY]  final  double  x  =  getX(n,  x1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  x1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  x1);	  final    double    x    =    getX(n,    x0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	104	None	replace
253	[BUG]  [BUGGY]  final  double  x  =  getX(n,  x2);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  x2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  x2);	  final    double    x    =    getX(n,    x0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	104	None	replace
254	[BUG]  [BUGGY]  final  double  x  =  getX(n,  x0,  q1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getX(n,  x0,  q1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getX(n,  x0,  q1);	  final    double    x    =    getX(n,    x0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	104	None	replace
255	[BUG]  [BUGGY]  final  double  dPrev  =  getA(n,  p0);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  dPrev  =  getA(n,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  dPrev  =  getA(n,  p0);	  final    double    x    =    getA(n,    p0);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	55	None	replace
256	[BUG]  [BUGGY]  final  double  x  =  getA(n,  x1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  x1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  x1);	  final    double    x    =    getA(n,    x0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	106	None	replace
257	[BUG]  [BUGGY]  final  double  x  =  getA(n,  x2);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  x  =  getA(n,  x2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  x  =  getA(n,  x2);	  final    double    x    =    getA(n,    x0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	106	None	replace
258	[BUG]  [BUGGY]  final  double  a  =  getC(n,  x0);  [CE]  cannot  find  symbol  x0  [FE]            ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getC(n,  x0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getC(n,  x0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x0	35	None	replace
259	[BUG]  [BUGGY]  int  cN  =  getIterations(n,  cN);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  cN  =  getIterations(n,  cN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  cN  =  getIterations(n,  cN);	  int    i    =    getIterations(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
260	[BUG]  [BUGGY]  x  =  getX(n,  x  *  1);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  x  =  getX(n,  x  *  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	x  =  getX(n,  x  *  1);	  x    =    getX(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
261	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  q1,  p0);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  q1,  p0);	  Integer    b    =    getB(n,    x,    p0);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	62	None	replace
262	[BUG]  [BUGGY]  final  int  a  =  getA(n,  x)/  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  x)/  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  x)/  1;	  final    double    a    =    getA(n,    x)+    1;    final    int    a    =    getA(n,    x)+    1;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
263	[BUG]  [BUGGY]  n  =  getN(n,  x2);  [CE]  cannot  find  symbol  x2  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x2);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x2);	  n    =    getN(n,    q1);    	non-compiled	[CE]  cannot  find  symbol  x2	86	None	replace
264	[BUG]  [BUGGY]  n  =  getN(n,  dPrev);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  dPrev);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  dPrev);	  n    =    getN(n,    cN);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
265	[BUG]  [BUGGY]  final  double  a  =  getS(n,  x0);  [CE]  cannot  find  symbol  x0  [FE]              ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getS(n,  x0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getS(n,  x0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x0	36	None	replace
266	[BUG]  [BUGGY]  final  double  a  =  getS(n,  y);  [CE]  cannot  find  symbol  y  [FE]                ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getS(n,  y);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getS(n,  y);	  final    double    a    =    getB(n,    x);    final    double    a    =    getS(n,    x);    	non-compiled	[CE]  cannot  find  symbol  y	36	None	replace
267	[BUG]  [BUGGY]  n  =  getN(n,  x  *  1);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  n  =  getN(n,  x  *  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	n  =  getN(n,  x  *  1);	  n    =    getN(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
268	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getA(n,    x    +    1));    	non-compiled	[CE]  ';'  expected	9	None	replace
269	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	if(n  <  maxIterations)  {  final  double  a  =  getA(n,  x  +  1);  final  double  a  =  getA(n,  x  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    double    a    =    getA(n,    x    +    1);    final    double    a    =    getA(n,    x    +    1));    	non-compiled	[CE]  	9	None	replace
270	[BUG]  [BUGGY]  final  double  a  =  getF(n,  x0);  [CE]  cannot  find  symbol  x0  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getF(n,  x0);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getF(n,  x0);	  final    double    a    =    getB(n,    x);    final    double    a    =    getF(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x0	102	None	replace
271	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x  +  1,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x  +  1,  epsilon);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x  +  1,  epsilon);	  int    i    =    getIterations(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
272	[BUG]  [BUGGY]  int  i  =  getIterations(n,  x,  n  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  i  =  getIterations(n,  x,  n  +  1);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  i  =  getIterations(n,  x,  n  +  1);	  int    i    =    getIterations(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
273	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x0)+  1;  [CE]  cannot  find  symbol  x0  [FE]    OutOfRangeException    [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x0)+  1;  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x0)+  1;	  final    double    a    =    getB(n,    x)+    1;    	non-compiled	[CE]  cannot  find  symbol  x0	52	None	replace
274	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x0  +  1);  [CE]  cannot  find  symbol  x0  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x0  +  1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x0  +  1);	  final    double    a    =    getA(n,    x    +    1);    Final    double    a    =    getA(n,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  x0	10	None	replace
275	[BUG]  [BUGGY]  final  double  cN  =  getC(n,  x0);  [CE]  cannot  find  symbol  x0  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  cN  =  getC(n,  x0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  cN  =  getC(n,  x0);	  final    double    cN    =    getC(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x0	92	None	replace
276	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  hN);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  hN);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  epsilon,  hN);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	90	None	replace
277	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  DEFAULT_EPSILON);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x,  epsilon,  DEFAULT_EPSILON);	  Integer    b    =    getB(n,    x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	90	None	replace
278	[BUG]  [BUGGY]  Integer  b  =  getB(n,  x0);  [CE]  cannot  find  symbol  x0  [FE]                AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  Integer  b  =  getB(n,  x0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	Integer  b  =  getB(n,  x0);	  Integer    b    =    getB(n,    p0);    	non-compiled	[CE]  cannot  find  symbol  x0	64	None	replace
279	[BUG]  [BUGGY]  int  x  =  getX(n,  q1,  p0);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  int  x  =  getX(n,  q1,  p0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	int  x  =  getX(n,  q1,  p0);	  int    x    =    getX(n,    p0);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	38	None	replace
280	[BUG]  [BUGGY]  final  double  n  =  getN(n,  x0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  n  =  getN(n,  x0);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  n  =  getN(n,  x0);	  final    double    n    =    getN(n,    x);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	42	None	replace
281	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x1);  [CE]  cannot  find  symbol  x1  [FE]        ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  x1);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  x1);	  final    double    a    =    getB(n,    x0);    	non-compiled	[CE]  cannot  find  symbol  x1	105	None	replace
282	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	add	final  double  a  =  getB(n,  dPrev);	  final    double    a    =    getB(n,    x0);    	compilable	  [FE]  ConvergenceException  	105	14	replace
283	[BUG]  [BUGGY]  final  double  a  =  getB(n,  dPrev);  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getB(n,  dPrev);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getB(n,  dPrev);	  final    double    a    =    getB(n,    x0);    	compilable	  [FE]  ConvergenceException  	105	14	replace
284	[BUG]  [BUGGY]  final  int  a  =  getA(n,  x);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  int  a  =  getA(n,  x);  [BUGGY]      final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  int  a  =  getA(n,  x);	  final    double    a    =    getA(n,    p0);    final    int    a    =    getA(n,    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
285	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x2);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  x2  [FE]                  AssertionError      [CONTEXT]      }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {      [BUGGY]  final  double  a  =  getA(n,  x2);  final  double  b  =  getB(n,  x);  [BUGGY]      final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	140	140	2	replace	final  double  a  =  getA(n,  x2);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    x0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  x2	4	None	replace
