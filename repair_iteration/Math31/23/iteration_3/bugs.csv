bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cN  =  a  *  b  +  hN  *  p0;  [CE]  cannot  find  symbol  cN  [FE]              OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	24	None	replace
2	[BUG]  [BUGGY]  int  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p0;  [CE]  possible  loss  of  precision  [FE]                OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  int  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	int  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
3	[BUG]  [BUGGY]  cN  =  a  *  b  +  hN  *  dPrev;  [CE]  cannot  find  symbol  cN  [FE]                  OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  b  +  hN  *  dPrev;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	24	None	replace
4	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  cN;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  cN;	  double    cN    =    a    *    p0    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	29	None	replace
5	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    p0    +    b    *    cN;    	compilable	  [FE]  ConvergenceException  	29	12	replace
6	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  DEFAULT_EPSILON;  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    p0    +    b    *    cN;    	compilable	  [FE]  ConvergenceException  	29	12	replace
7	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  dPrev;  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	29	None	replace
8	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  final    double    a    =    getA(n,    cPrev);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
9	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cPrev);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cPrev);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cPrev);	  final    double    a    =    getA(n,    cPrev);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
10	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    cPrev);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
11	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    double  cN  =  a  *  p0  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	27	None	add
12	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  Double  cN  =  a  *  p0  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  Double  cN  =  a  *  p0  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    Double  cN  =  a  *  p0  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	27	None	add
13	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1);  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    double  cN  =  a  *  p0  +  b  *  q1);	  	non-compiled	[CE]  ';'  expected	27	None	add
14	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q2;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    double  cN  =  a  *  p0  +  b  *  q2;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	27	None	add
15	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  double  cN  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    dPrev;    double  cN  =  a  *  hN  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
16	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  Double  cN  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  Double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    dPrev;    Double  cN  =  a  *  hN  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
17	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  double  cN  =  a  *  hN  +  b  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  double  cN  =  a  *  hN  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    dPrev;    double  cN  =  a  *  hN  +  b  *  dprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
18	[BUG]  [BUGGY]  final  double  b  =  getB(n,  p0);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  p0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  p0);	  final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	43	None	replace
19	[BUG]  [BUGGY]  final  double  b  =  getB(n,  cN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  cN);	  final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	43	None	replace
20	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    Double    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	18	11	replace
21	[BUG]  [BUGGY]  Double  cN  =  a  *  hN  +  b  *  p0;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    Double    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	18	11	replace
22	[BUG]  [BUGGY]  b  =  getB(n,  cPrev);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  cPrev);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  cPrev);	  b    =    getB(n,    x0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	89	None	replace
23	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dPrev  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dPrev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    dPrev    +    b    *    q1;    double  cN  =  a  *  dPrev  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
24	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  Double  cN  =  a  *  dPrev  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  Double  cN  =  a  *  dPrev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    dPrev    +    b    *    q1;    Double  cN  =  a  *  dPrev  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
25	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dPrev  +  b  *  q1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dPrev  +  b  *  q1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    dPrev    +    b    *    q1;    double  cN  =  a  *  dPrev  +  b  *  q1);	  	non-compiled	[CE]  ';'  expected	62	None	add
26	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  cN  =  a  *  dPrev  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  cN  =  a  *  dPrev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    dPrev    +    b    *    q1;    cN  =  a  *  dPrev  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	8	6	replace
28	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	8	6	replace
29	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  cPrev  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	58	11	replace
30	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  DEFAULT_EPSILON;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cPrev  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	58	11	replace
31	[BUG]  [BUGGY]  double  cN  =  a  *  c  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  c  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  c  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  c  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  c	58	None	replace
32	[BUG]  [BUGGY]  b  =  getB(n,  cPrev  +  1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  cPrev  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  cPrev  +  1);	  b    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	88	None	replace
33	[BUG]  [BUGGY]  b  =  getB(n,  p0  +  1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  p0  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  p0  +  1);	  b    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	88	None	replace
34	[BUG]  [BUGGY]  b  =  getB(n,  q1  +  1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  q1  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  q1  +  1);	  b    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	88	None	replace
35	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  double  cN  =  a  *  b  +  q1  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  double  cN  =  a  *  b  +  q1  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    q1    *    dPrev;    double  cN  =  a  *  b  +  q1  *  dPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
36	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  Double  cN  =  a  *  b  +  q1  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  Double  cN  =  a  *  b  +  q1  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    q1    *    dPrev;    Double  cN  =  a  *  b  +  q1  *  dPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
37	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  double  cN  =  a  *  b  +  q1  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  q1  *  dPrev;  double  cN  =  a  *  b  +  q1  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    q1    *    dPrev;    double  cN  =  a  *  b  +  q1  *  dprev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
38	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  cN  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cN  +  b  *  dPrev;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  might  not  have  been  initialized	4	None	replace
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  cPrev  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	4	7	replace
40	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cPrev  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	4	7	replace
41	[BUG]  [BUGGY]  b  =  getB(n,  c);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  c);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  c);	  b    =    getB(n,    cN);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	32	None	replace
42	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  double  cN  =  a  *  b  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  double  cN  =  a  *  b  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    dPrev;    double  cN  =  a  *  b  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
43	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  Double  cN  =  a  *  b  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  Double  cN  =  a  *  b  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    dPrev;    Double  cN  =  a  *  b  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
44	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  cN  =  a  *  b  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  cN  =  a  *  b  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    dPrev;    cN  =  a  *  b  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
45	[BUG]  [BUGGY]  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  cannot  find  symbol  cN  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  p0  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	42	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  p0  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	42	6	replace
47	[BUG]  [BUGGY]  Double  cN  =  a  *  p0  +  b  *  dPrev;  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  p0  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	42	6	replace
48	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    Double    cN    =    a    *    q1    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	54	9	replace
49	[BUG]  [BUGGY]  Double  cN  =  a  *  q1  +  b  *  p0;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    Double    cN    =    a    *    q1    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	54	9	replace
50	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	12	12	replace
51	[BUG]  [BUGGY]  double  cN  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	12	12	replace
52	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  b  *  cPrev;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	72	14	replace
53	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  cPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  b  *  cPrev;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	72	14	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  dPrev  +  b  *  hPrev;	  double    cN    =    a    *    cN    +    b    *    hPrev;    	compilable	  [FE]  AssertionError  	38	12	replace
55	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hPrev;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  dPrev  +  b  *  hPrev;	  double    cN    =    a    *    cN    +    b    *    hPrev;    	compilable	  [FE]  AssertionError  	38	12	replace
56	[BUG]  [BUGGY]  b  =  getB(n,  p1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  p1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  p1);	  b    =    getB(n,    p0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	31	None	replace
57	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  double  cN  =  a  *  q1  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  double  cN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hN;    double  cN  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	78	None	add
58	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  Double  cN  =  a  *  q1  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  Double  cN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hN;    Double  cN  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	78	None	add
59	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  int  cN  =  a  *  q1  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  int  cN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hN;    int  cN  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	78	None	add
60	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  cN  =  a  *  q1  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  cN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hN;    cN  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	78	None	add
61	[BUG]  [BUGGY]  cN  =  a  *  q1  +  b  *  p0;  [CE]  cannot  find  symbol  cN  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	53	None	replace
62	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    Double    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  OutOfRangeException  	22	10	replace
63	[BUG]  [BUGGY]  Double  cN  =  a  *  b  +  hN  *  p0;  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    Double    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  OutOfRangeException  	22	10	replace
64	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
65	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  Double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  Double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    Double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
66	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  double  cN  =  A  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  double  cN  =  A  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    double  cN  =  A  *  hN  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
67	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
68	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  b;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    b;    double  cN  =  a  *  p0  +  b  *  b;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
69	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  Double  cN  =  a  *  p0  +  b  *  b;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  Double  cN  =  a  *  p0  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    b;    Double  cN  =  a  *  p0  +  b  *  b;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
70	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    b;    double  cN  =  a  *  p0  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
71	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  b);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  double  cN  =  a  *  p0  +  b  *  b);  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    b;    double  cN  =  a  *  p0  +  b  *  b);	  	non-compiled	[CE]  ';'  expected	13	None	add
72	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  dPrev  +  b  *  hN;	  double    cN    =    a    *    q1    +    b    *    hN;    	compilable	  [FE]  ConvergenceException  	79	13	replace
73	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  dPrev  +  b  *  hN;	  double    cN    =    a    *    q1    +    b    *    hN;    	compilable	  [FE]  ConvergenceException  	79	13	replace
74	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  hN);	  double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
75	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);	  double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
76	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  p0  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  p0  +  b  *  hPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    Double    cN    =    a    *    p0    +    b    *    hPrev;    	compilable	  [FE]  ConvergenceException  	41	12	replace
77	[BUG]  [BUGGY]  Double  cN  =  a  *  p0  +  b  *  hPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  p0  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  p0  +  b  *  hPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    Double    cN    =    a    *    p0    +    b    *    hPrev;    	compilable	  [FE]  ConvergenceException  	41	12	replace
78	[BUG]  [BUGGY]  cN  =  a  *  p0  +  b  *  hPrev;  [CE]  cannot  find  symbol  cN  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  p0  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  p0  +  b  *  hPrev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    Double    cN    =    a    *    p0    +    b    *    hPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	41	None	replace
79	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hPrev;    double  cN  =  a  *  q1  +  b  *  hPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
80	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  Double  cN  =  a  *  q1  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  Double  cN  =  a  *  q1  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hPrev;    Double  cN  =  a  *  q1  +  b  *  hPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
81	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hPrev;    double  cN  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  q1  +  b  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	55	6	replace
83	[BUG]  [BUGGY]  Double  cN  =  a  *  q1  +  b  *  dPrev;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  q1  +  b  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	55	6	replace
84	[BUG]  [BUGGY]  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  cN  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  q1  +  b  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	55	None	replace
85	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	69	None	add
86	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  Double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  Double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    Double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	69	None	add
87	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  double  cN  =  A  *  b  +  hN  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  double  cN  =  A  *  b  +  hN  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    double  cN  =  A  *  b  +  hN  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	69	None	add
88	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	69	None	add
89	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  p1;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  p1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  p1;	  double    cN    =    a    *    p0    +    b    *    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	39	None	replace
90	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  d0;  [CE]  cannot  find  symbol  d0  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  d0;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    d0;    	non-compiled	[CE]  cannot  find  symbol  d0	64	None	replace
91	[BUG]  [BUGGY]  Double  cN  =  a  *  hN  +  b  *  d0;  [CE]  cannot  find  symbol  d0  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  hN  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  hN  +  b  *  d0;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    d0;    	non-compiled	[CE]  cannot  find  symbol  d0	64	None	replace
92	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
93	[BUG]  [BUGGY]  final  double  a  =  getB(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  p0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  p0);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
94	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  x,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  x,  hN);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
95	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
96	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  *  b;  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
97	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
98	[BUG]  [BUGGY]  double  cN  =  a  *  p0  *  b;  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
99	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  +  b  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	11	replace
100	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  b;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	11	replace
101	[BUG]  [BUGGY]  int  cN  =  a  *  hN  +  b  *  p0;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  int  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	int  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    int    cN    =    a    *    hN    +    b    *    p0;    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
102	[BUG]  [BUGGY]  int  cN  =  a  *  hN  +  b  *  dPrev;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  int  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	int  cN  =  a  *  hN  +  b  *  dPrev;	  double    cN    =    a    *    hN    +    b    *    p0;    int    cN    =    a    *    hN    +    b    *    p0;    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
103	[BUG]  [BUGGY]  double  cN  =  a  *  c1  +  b  *  p0;  [CE]  cannot  find  symbol  c1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  c1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  c1  +  b  *  p0;	  double    cN    =    a    *    cPrev    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  c1	6	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  cPrev  +  b  *  dPrev;	  double    cN    =    a    *    cPrev    +    b    *    p0;    	compilable	  [FE]  AssertionError  	6	6	replace
105	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cPrev  +  b  *  dPrev;	  double    cN    =    a    *    cPrev    +    b    *    p0;    	compilable	  [FE]  AssertionError  	6	6	replace
106	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  +  b  *  cPrev;	  double    cN    =    a    *    cPrev    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	6	12	replace
107	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  cPrev;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  cPrev;	  double    cN    =    a    *    cPrev    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	6	12	replace
108	[BUG]  [BUGGY]  cN  =  a  *  hN  +  b  *  p0;  [CE]  cannot  find  symbol  cN  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	20	None	replace
109	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
110	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  p0;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
111	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  OutOfRangeException  	20	7	replace
112	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  hN;  [FE]  OutOfRangeException  [FE]                  ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  hN  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  OutOfRangeException  	20	7	replace
113	[BUG]  [BUGGY]  b  =  getB(n,  y);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  y);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  y);	  b    =    getB(n,    hN);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	66	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  hN  +  b  *  dPrev;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	19	6	replace
115	[BUG]  [BUGGY]  Double  cN  =  a  *  hN  +  b  *  dPrev;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  hN  +  b  *  dPrev;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	19	6	replace
116	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hprev;  [CE]  cannot  find  symbol  hprev  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  hprev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    hprev;    	non-compiled	[CE]  cannot  find  symbol  hprev	61	None	replace
117	[BUG]  [BUGGY]  cN  =  a  *  p0  +  b  *  hprev;  [CE]  cannot  find  symbol  cN  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  p0  +  b  *  hprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  p0  +  b  *  hprev;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    hprev;    	non-compiled	[CE]  cannot  find  symbol  cN	61	None	replace
118	[BUG]  [BUGGY]  double  cN  =  a  *  b  *  hN;  double  cN  =  a  *  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  *  hN;  double  cN  =  a  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    *    hN;    double  cN  =  a  *  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	add
119	[BUG]  [BUGGY]  double  cN  =  a  *  b  *  hN;  Double  cN  =  a  *  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  *  hN;  Double  cN  =  a  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    *    hN;    Double  cN  =  a  *  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	add
120	[BUG]  [BUGGY]  double  cN  =  a  *  b  *  hN;  int  cN  =  a  *  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  *  hN;  int  cN  =  a  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    *    hN;    int  cN  =  a  *  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	add
121	[BUG]  [BUGGY]  double  cN  =  a  *  b  *  hN;  cN  =  a  *  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  *  hN;  cN  =  a  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    *    hN;    cN  =  a  *  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	add
122	[BUG]  [BUGGY]  final  int  cN  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  int  cN  =  getA(n,  x);  final  double  b  =  getB(n,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  int  cN  =  getA(n,  x);  final  double  b  =  getB(n,  cN);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    cN);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
123	[BUG]  [BUGGY]  n  =  getA(a,  x);  final  double  b  =  getB(b,  cN);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  n  =  getA(a,  x);  final  double  b  =  getB(b,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	n  =  getA(a,  x);  final  double  b  =  getB(b,  cN);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    cN);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	92	None	replace
124	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  p1;  [CE]  cannot  find  symbol  p1  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  p1;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	65	None	replace
125	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    dPrev;    double  cN  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	25	None	add
126	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  Double  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  Double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    dPrev;    Double  cN  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	25	None	add
127	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    dPrev;    cN  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	25	None	add
128	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    double  cN  =  a  *  b  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
129	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  Double  cN  =  a  *  b  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  Double  cN  =  a  *  b  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    Double  cN  =  a  *  b  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
130	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    double  cN  =  a  *  b  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
131	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  cN  =  a  *  b  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  cN  =  a  *  b  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    cN  =  a  *  b  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
132	[BUG]  [BUGGY]  final  double  b  =  getB(n,  q1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  q1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  q1);	  final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
133	[BUG]  [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  y0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  y0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  p0);  final  double  b  =  getB(n,  y0);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
134	[BUG]  [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  y0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  y0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  y0);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
135	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y0);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
136	[BUG]  [BUGGY]  b  =  getB(a,  b);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(a,  b);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(a,  b);	  b    =    getB(a,    x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	33	None	replace
137	[BUG]  [BUGGY]  b  =  getB(a,  p0);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                          AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(a,  p0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(a,  p0);	  b    =    getB(a,    x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	33	None	replace
138	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  double  cN  =  a  *  b  +  hN  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  double  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    dPrev;    double  cN  =  a  *  b  +  hN  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
139	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  Double  cN  =  a  *  b  +  hN  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  Double  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    dPrev;    Double  cN  =  a  *  b  +  hN  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
140	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  double  cN  =  a  *  b  +  hN  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  double  cN  =  a  *  b  +  hN  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    dPrev;    double  cN  =  a  *  b  +  hN  *  dprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
141	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    double  cN  =  a  *  cPrev  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
142	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  Double  cN  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  Double  cN  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    Double  cN  =  a  *  cPrev  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
143	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  A  *  cPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  A  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    double  cN  =  A  *  cPrev  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
144	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
145	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  Double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  Double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    Double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
146	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  double  cN  =  A  *  b  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  double  cN  =  A  *  b  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    double  cN  =  A  *  b  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
147	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
148	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  b;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  b;	  double    cN    =    a    *    p0    +    b    *    b;    	non-compiled	[CE]  cannot  find  symbol  p1	14	None	replace
149	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  q1  +  b  *  b;	  double    cN    =    a    *    p0    +    b    *    b;    	compilable	  [FE]  ConvergenceException  	14	12	replace
150	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  b;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  +  b  *  b;	  double    cN    =    a    *    p0    +    b    *    b;    	compilable	  [FE]  ConvergenceException  	14	12	replace
151	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  +  b  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  OutOfRangeException  	85	7	replace
152	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  OutOfRangeException  	85	7	replace
153	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  *  b  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  ConvergenceException  	85	14	replace
154	[BUG]  [BUGGY]  double  cN  =  a  *  p0  *  b  *  hN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  b  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  *  b  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  ConvergenceException  	85	14	replace
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  AssertionError  	85	6	replace
156	[BUG]  [BUGGY]  double  cN  =  a  *  p0  *  hN;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  *  hN;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  *  hN;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  AssertionError  	85	6	replace
157	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  p1;  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  hN  *  p1;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	81	None	replace
158	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  p0;  [CE]  cannot  find  symbol  cN  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  qN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  qN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	75	None	replace
159	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  cN  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  qN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  qN  =  a  *  q1  +  b  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	75	None	replace
160	[BUG]  [BUGGY]  qN  =  a  *  q1  +  b  *  p0;  [CE]  cannot  find  symbol  qN  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  qN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	qN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  qN	75	None	replace
161	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  cPrev;  [CE]  cannot  find  symbol  cN  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  qN  =  a  *  q1  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  qN  =  a  *  q1  +  b  *  cPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	75	None	replace
162	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  +  b  *  q1;	  double    cN    =    a    *    dPrev    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	63	11	replace
163	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  q1;	  double    cN    =    a    *    dPrev    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	63	11	replace
164	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  q0;	  double    cN    =    a    *    q0    +    b    *    hPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	68	None	replace
165	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  p0;  double  cN  =  a  *  hN  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  p0;  double  cN  =  a  *  hN  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    *    p0;    double  cN  =  a  *  hN  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
166	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  p0;  Double  cN  =  a  *  hN  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  p0;  Double  cN  =  a  *  hN  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    *    p0;    Double  cN  =  a  *  hN  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
167	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  p0;  int  cN  =  a  *  hN  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  p0;  int  cN  =  a  *  hN  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    *    p0;    int  cN  =  a  *  hN  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
168	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  p0;  cN  =  a  *  hN  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  p0;  cN  =  a  *  hN  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    *    p0;    cN  =  a  *  hN  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
169	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  hN;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  hN;	  double    cN    =    a    *    p0    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  p1	2	None	replace
170	[BUG]  [BUGGY]  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [CE]  cannot  assign  a  value  to  final  variable  a  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	a  =  getA(n,  cPrev);  final  double  b  =  getB(n,  hN);	  a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  a	44	None	replace
171	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  q1  +  b  *  cPrev;	  double    cN    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  ConvergenceException  	26	11	replace
172	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  cPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  +  b  *  cPrev;	  double    cN    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  ConvergenceException  	26	11	replace
173	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  q1;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  q1;	  double    cN    =    a    *    p0    +    b    *    q1;    	non-compiled	[CE]  cannot  find  symbol  p1	28	None	replace
174	[BUG]  [BUGGY]  cN  =  a  *  p0  +  b  *  q1;  [CE]  cannot  find  symbol  cN  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  a  *  p0  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  a  *  p0  +  b  *  q1;	  double    cN    =    a    *    q1    +    b    *    p0;    cN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	56	None	replace
175	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  double  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    dPrev;    double  cN  =  a  *  p0  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
176	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  Double  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  Double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    dPrev;    Double  cN  =  a  *  p0  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
177	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    dPrev;    cN  =  a  *  p0  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
178	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    double  cN  =  a  *  p0  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
179	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  Double  cN  =  a  *  p0  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  Double  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    Double  cN  =  a  *  p0  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
180	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  int  cN  =  a  *  p0  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  int  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    int  cN  =  a  *  p0  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
181	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  p0  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    cN  =  a  *  p0  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
182	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x0);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	48	None	replace
183	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p0);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
184	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  p1);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
185	[BUG]  [BUGGY]  final  double  b  =  getB(n,  y  +  1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  y  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  y  +  1);	  final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	86	None	replace
186	[BUG]  [BUGGY]  final  double  b  =  getB(a,  x);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(a,  x);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(a,  x);	  final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
187	[BUG]  [BUGGY]  final  double  b  =  getB(n,  x,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  x,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  x,  hN);	  final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
188	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  y);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
189	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  p0);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  p0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  p0);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
190	[BUG]  [BUGGY]  n  =  getA(x,  n);  final  double  b  =  getB(n,  hN);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  n  =  getA(x,  n);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	n  =  getA(x,  n);  final  double  b  =  getB(n,  hN);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	45	None	replace
191	[BUG]  [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  cPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  cPrev);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	n  =  getA(n,  x);  final  double  b  =  getB(n,  cPrev);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
192	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dPrev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    double  cN  =  a  *  b  +  dPrev  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
193	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  Double  cN  =  a  *  b  +  dPrev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  Double  cN  =  a  *  b  +  dPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    Double  cN  =  a  *  b  +  dPrev  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
194	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  A  *  b  +  dPrev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  A  *  b  +  dPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    double  cN  =  A  *  b  +  dPrev  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
195	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dPrev  *  p1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dPrev  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    double  cN  =  a  *  b  +  dPrev  *  p1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
196	[BUG]  [BUGGY]  double  pN  =  a  *  p0  +  b  *  p1;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  pN  =  a  *  p0  +  b  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  pN  =  a  *  p0  +  b  *  p1;	  double    cN    =    a    *    p1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	30	None	replace
197	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    hPrev;    double  cN  =  a  *  cPrev  +  b  *  hPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
198	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  Double  cN  =  a  *  cPrev  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  Double  cN  =  a  *  cPrev  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    hPrev;    Double  cN  =  a  *  cPrev  +  b  *  hPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
199	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  cN  =  a  *  cPrev  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  cN  =  a  *  cPrev  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    hPrev;    cN  =  a  *  cPrev  +  b  *  hPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
200	[BUG]  [BUGGY]  int  cN  =  a  *  b  +  hN  *  p0;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  int  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	int  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    int    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
201	[BUG]  [BUGGY]  int  cN  =  a  *  b  +  hN  *  dPrev;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  int  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	int  cN  =  a  *  b  +  hN  *  dPrev;	  double    cN    =    a    *    b    +    hN    *    p0;    int    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
202	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1.;  [CE]  <identifier>  expected  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1.;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    double  cN  =  a  *  p0  +  b  *  q1.;	  	non-compiled	[CE]  <identifier>  expected	27	None	add
203	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	Double  cN  =  a  *  b  +  hN  *  dPrev;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	23	13	replace
204	[BUG]  [BUGGY]  Double  cN  =  a  *  b  +  hN  *  dPrev;  [FE]  ConvergenceException  [FE]            OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  Double  cN  =  a  *  b  +  hN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	Double  cN  =  a  *  b  +  hN  *  dPrev;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	23	13	replace
205	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  dPrev  *  DEFAULT_EPSILON;	  double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	70	14	replace
206	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  DEFAULT_EPSILON;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  dPrev  *  DEFAULT_EPSILON;	  double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	70	14	replace
207	[BUG]  [BUGGY]  final  double  b  =  getB(n,  y1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  y1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  y1);	  final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
208	[BUG]  [BUGGY]  final  double  b  =  getB(n,  y0  -  1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  y0  -  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  y0  -  1);	  final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
209	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  b;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  ConvergenceException  	85	11	replace
210	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  b;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  b;	  double    cN    =    a    *    b    *    hN;    	compilable	  [FE]  ConvergenceException  	85	11	replace
211	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  double  qN  =  a  *  q1  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  double  qN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hN;    double  qN  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	78	None	add
212	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dprev  +  b  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  q1;  double  cN  =  a  *  dprev  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    dPrev    +    b    *    q1;    double  cN  =  a  *  dprev  +  b  *  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
213	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  OutOfRangeException  	20	7	replace
214	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  hN;  [FE]  OutOfRangeException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  OutOfRangeException  	20	7	replace
215	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  double  cN  =  a  *  b  +  b  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  double  cN  =  a  *  b  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    dPrev;    double  cN  =  a  *  b  +  b  *  dprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
216	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  q  *  dPrev;  [CE]  cannot  find  symbol  q  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  q  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  q  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  q	79	None	replace
217	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  d0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    double  cN  =  a  *  b  +  b  *  d0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
218	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  p1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  double  cN  =  a  *  b  +  b  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    double  cN  =  a  *  b  +  b  *  p1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
219	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  +  b  *  q0;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	53	None	replace
220	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  d0;  [CE]  cannot  find  symbol  d0  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  b  *  d0;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    d0;    	non-compiled	[CE]  cannot  find  symbol  d0	64	None	replace
221	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  x);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
222	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  x);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
223	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dprev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  double  cN  =  a  *  b  +  dprev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    double  cN  =  a  *  b  +  dprev  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
224	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p1;  [CE]  cannot  find  symbol  p1  [FE]              OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  hN  *  p0;  cN  =  a  *  b  +  hN  *  p1;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	24	None	replace
225	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  double  cN  =  a  *  p0  +  b  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  double  cN  =  a  *  p0  +  b  *  dprev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    dPrev;    double  cN  =  a  *  p0  +  b  *  dprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
226	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    cN    =    a    *    q1    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	56	9	replace
227	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  p0;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  +  b  *  dPrev;  cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    p0;    cN    =    a    *    q1    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	56	9	replace
228	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  cN  =  a  *  q1  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]                ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  cN  =  a  *  q1  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  q1;  cN  =  a  *  q1  +  b  *  q0;	  double    cN    =    a    *    q1    +    b    *    p0;    cN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	56	None	replace
229	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  cN  =  a  *  q1  +  b  *  q2;  [CE]  cannot  find  symbol  q2  [FE]                  ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  cN  =  a  *  q1  +  b  *  q2;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  +  b  *  p0;  cN  =  a  *  q1  +  b  *  q2;	  double    cN    =    a    *    q1    +    b    *    p0;    cN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  q2	56	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  *  q1;	  double    cN    =    a    *    hN    *    p0;    	compilable	  [FE]  AssertionError  	83	6	replace
231	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  *  q1;	  double    cN    =    a    *    hN    *    p0;    	compilable	  [FE]  AssertionError  	83	6	replace
232	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  q1  *  p0;	  double    cN    =    a    *    hN    *    p0;    	compilable	timeout	83	1	replace
233	[BUG]  [BUGGY]  double  cN  =  a  *  q1  *  p0;  timeout  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  *  p0;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  *  p0;	  double    cN    =    a    *    hN    *    p0;    	compilable	timeout	83	1	replace
234	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  q0;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	17	None	replace
235	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  hPrev;	  double    cN    =    a    *    q1    +    b    *    hPrev;    	compilable	timeout	37	1	replace
236	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  hPrev;  timeout  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  hPrev;	  double    cN    =    a    *    q1    +    b    *    hPrev;    	compilable	timeout	37	1	replace
237	[BUG]  [BUGGY]  final  int  b  =  getB(n,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  int  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  int  b  =  getB(n,  hN);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
238	[BUG]  [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	n  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
239	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  y);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  y);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q0);  final  double  b  =  getB(n,  y);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
240	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  qN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  qN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    dPrev;    double  qN  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	25	None	add
241	[BUG]  [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  hN);  final  double  b  =  getB(n,  hN);	  double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
242	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  q0;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p1  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p1  +  b  *  q0;	  double    cN    =    a    *    p0    +    b    *    q1;    	non-compiled	[CE]  cannot  find  symbol  p1	28	None	replace
243	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  dPrev  *  b;	  double    cN    =    a    *    b    +    q1    *    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	77	14	replace
244	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  b;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  dPrev  *  b;	  double    cN    =    a    *    b    +    q1    *    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	77	14	replace
245	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  p0  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  p0  *  dPrev;	  double    cN    =    a    *    b    +    q1    *    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	77	14	replace
246	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  p0  *  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  p0  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  p0  *  dPrev;	  double    cN    =    a    *    b    +    q1    *    dPrev;    timeout    	compilable	  [FE]  ConvergenceException  	77	14	replace
247	[BUG]  [BUGGY]  b  =  getB(a,  hN);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(a,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(a,  hN);	  b    =    getB(a,    x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	33	None	replace
248	[BUG]  [BUGGY]  double  cN  =  a  *  q0  +  b  *  q1;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q0  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q0  +  b  *  q1;	  double    cN    =    a    *    dPrev    +    b    *    q1;    	non-compiled	[CE]  cannot  find  symbol  q0	63	None	replace
249	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  q1;	  double    cN    =    a    *    dPrev    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	63	11	replace
250	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  q1;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  q1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  q1;	  double    cN    =    a    *    dPrev    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	63	11	replace
251	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hn;  [CE]  cannot  find  symbol  hn  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hn;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  hn;	  double    cN    =    a    *    p0    +    b    *    hPrev;    double    cN    =    a    *    p0    +    b    *    hprev;    	non-compiled	[CE]  cannot  find  symbol  hn	61	None	replace
252	[BUG]  [BUGGY]  final  double  a  =  getB(n,  b);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  b);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  b);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
253	[BUG]  [BUGGY]  final  double  a  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  hN);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
254	[BUG]  [BUGGY]  final  double  a  =  getB(n,  q1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  q1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  q1);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
255	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  p0  +  b  *  hN  +  1;	  double    cN    =    a    *    p0    +    b    *    hN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
256	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  p0  +  b  *  hN  +  1;	  double    cN    =    a    *    p0    +    b    *    hN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
257	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  int  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  int  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    DEFAULT_EPSILON;    int  cN  =  a  *  b  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	add
258	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  p1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  p1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    double  cN  =  a  *  cPrev  +  b  *  p1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
259	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  d0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  double  cN  =  a  *  cPrev  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    double  cN  =  a  *  cPrev  +  b  *  d0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
260	[BUG]  [BUGGY]  final  int  b  =  getB(n,  cN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  int  b  =  getB(n,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  int  b  =  getB(n,  cN);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    cN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	92	None	replace
261	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  p0;  double  cN  =  a  *  hN  *  p1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  p0;  double  cN  =  a  *  hN  *  p1;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    *    p0;    double  cN  =  a  *  hN  *  p1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	82	None	add
262	[BUG]  [BUGGY]  b  =  getB(n,  q0);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  q0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  q0);	  b    =    getB(n,    q1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	67	None	replace
263	[BUG]  [BUGGY]  b  =  getB(n,  q2);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  q2);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  q2);	  b    =    getB(n,    q1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	67	None	replace
264	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  int  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  int  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    hN    *    DEFAULT_EPSILON;    int  cN  =  a  *  b  +  hN  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	69	None	add
265	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  int  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  int  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    int  cN  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
266	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hPrev  +  b  *  hPrev;	  double    cN    =    a    *    q0    +    b    *    hPrev;    	compilable	  [FE]  OutOfRangeException  	68	7	replace
267	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hPrev;  [FE]  OutOfRangeException  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hPrev;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hPrev  +  b  *  hPrev;	  double    cN    =    a    *    q0    +    b    *    hPrev;    	compilable	  [FE]  OutOfRangeException  	68	7	replace
268	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  cPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  cPrev  *  p0;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  OutOfRangeException  	72	10	replace
269	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  cPrev  *  p0;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  cPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  cPrev  *  p0;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  OutOfRangeException  	72	10	replace
270	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  dPrev  *  hN;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	72	13	replace
271	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  hN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  dPrev  *  hN;	  double    cN    =    a    *    b    +    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	72	13	replace
272	[BUG]  [BUGGY]  b  =  getB(n,  x  +  2);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  x  +  2);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  x  +  2);	  b    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	88	None	replace
273	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  hprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  double  cN  =  a  *  q1  +  b  *  hprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    hPrev;    double  cN  =  a  *  q1  +  b  *  hprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
274	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y0);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  y0);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  y0);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
275	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  hN);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  hN);  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    double  cN  =  a  *  p0  +  b  *  hN);	  	non-compiled	[CE]  ';'  expected	1	None	add
276	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
277	[BUG]  [BUGGY]  double  cN  =  a  *  hN  *  b;  [FE]  ConvergenceException  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  ConvergenceException  	47	14	replace
278	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  q1  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  OutOfRangeException  	47	14	replace
279	[BUG]  [BUGGY]  double  cN  =  a  *  q1  *  b;  [FE]  OutOfRangeException  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  *  b;  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q1  *  b;	  double    cN    =    a    *    p1    *    b;    	compilable	  [FE]  OutOfRangeException  	47	14	replace
280	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  hN;  [CE]  cannot  find  symbol  cN  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  qN  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  qN  =  a  *  q1  +  b  *  hN;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	75	None	replace
281	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  int  cN  =  a  *  p0  +  b  *  b;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  b;  int  cN  =  a  *  p0  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    b;    int  cN  =  a  *  p0  +  b  *  b;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
282	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  hprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  hprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    hPrev;    double  cN  =  a  *  cPrev  +  b  *  hprev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
283	[BUG]  [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  hN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  q1);  final  double  b  =  getB(n,  hN);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	48	None	replace
284	[BUG]  [BUGGY]  cN  =  getB(n,  b);  [CE]  cannot  find  symbol  cN  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  cN  =  getB(n,  b);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	cN  =  getB(n,  b);	  b    =    getB(n,    cN);    	non-compiled	[CE]  cannot  find  symbol  cN	32	None	replace
285	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  hN;  [CE]  variable  cN  might  not  have  been  initialized  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cN  +  b  *  hN;	  double    cN    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  variable  cN  might  not  have  been  initialized	79	None	replace
286	[BUG]  [BUGGY]  double  cN  =  a  *  c1  +  b  *  hN;  [CE]  cannot  find  symbol  c1  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  c1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  c1  +  b  *  hN;	  double    cN    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  c1	79	None	replace
287	[BUG]  [BUGGY]  double  cN  =  a  *  cn  +  b  *  dPrev;  [CE]  cannot  find  symbol  cn  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cn  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cn  +  b  *  dPrev;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cn	4	None	replace
288	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  cPrev;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	4	7	replace
289	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  cPrev;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  cPrev;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	4	7	replace
290	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  int  cN  =  a  *  b  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  int  cN  =  a  *  b  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    b    *    p0;    int  cN  =  a  *  b  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
291	[BUG]  [BUGGY]  double  pN  =  a  *  p0  +  b  *  b;  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  pN  =  a  *  p0  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  pN  =  a  *  p0  +  b  *  b;	  double    cN    =    a    *    p1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	30	None	replace
292	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1,  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  q1;  double  cN  =  a  *  p0  +  b  *  q1,  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    q1;    double  cN  =  a  *  p0  +  b  *  q1,  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	27	None	add
293	[BUG]  [BUGGY]  double  cN  =  a  *  c1  +  b  *  dPrev;  [CE]  cannot  find  symbol  c1  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  c1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  c1  +  b  *  dPrev;	  double    cN    =    a    *    b    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  c1	10	None	replace
294	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  hN  *  q0;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    p0;    	non-compiled	[CE]  cannot  find  symbol  q0	21	None	replace
295	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  hN  *  q1;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  ConvergenceException  	21	11	replace
296	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  q1;  [FE]  ConvergenceException  [FE]          OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  hN  *  q1;	  double    cN    =    a    *    b    +    hN    *    p0;    double    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  ConvergenceException  	21	11	replace
297	[BUG]  [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  n  =  getA(n,  x);  final  double  b  =  getB(n,  cN  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	n  =  getA(n,  x);  final  double  b  =  getB(n,  cN  +  1);	  n    =    getA(n,    x);    final    double    b    =    getB(n,    cN);    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
298	[BUG]  [BUGGY]  b  =  getB(a,  cN);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(a,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(a,  cN);	  b    =    getB(a,    x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	33	None	replace
299	[BUG]  [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cN);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  y);  final  double  b  =  getB(n,  cN);	  final    double    a    =    getA(n,    cPrev);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
300	[BUG]  [BUGGY]  b  =  getB(n,  x  *  1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  x  *  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  x  *  1);	  b    =    getB(n,    x    +    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	88	None	replace
301	[BUG]  [BUGGY]  final  double  b  =  getB(n,  y2);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  y2);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  y2);	  final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
302	[BUG]  [BUGGY]  a  =  getB(n,  hN);  [CE]  cannot  assign  a  value  to  final  variable  a  [FE]                    AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  a  =  getB(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	a  =  getB(n,  hN);	  b    =    getB(n,    hN);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  a	66	None	replace
303	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	48	None	replace
304	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  dprev;	  double    cN    =    a    *    hN    +    b    *    p0;    double    cN    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dprev	19	None	replace
305	[BUG]  [BUGGY]  b  =  getB(n,  x1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  x1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  x1);	  b    =    getB(n,    x0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	89	None	replace
306	[BUG]  [BUGGY]  b  =  getB(n,  x2);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                        AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  x2);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  x2);	  b    =    getB(n,    x0);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	89	None	replace
307	[BUG]  [BUGGY]  final  double  a  =  getB(n,  x  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getB(n,  x  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getB(n,  x  +  1);	  final    double    a    =    getB(n,    x);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
308	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    p0    +    b    *    hN;    double  cN  =  a  *  p0  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
309	[BUG]  [BUGGY]  final  double  b  =  getB(n,  x  +  1);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  x  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  x  +  1);	  final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
310	[BUG]  [BUGGY]  final  double  b  =  getB(n,  x,  epsilon);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  x,  epsilon);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  x,  epsilon);	  final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
311	[BUG]  [BUGGY]  final  double  b  =  getB(n,  x0);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getB(n,  x0);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getB(n,  x0);	  final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
312	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y1);	  final    double    a    =    getA(n,    x);    final    double    b    =    getB(n,    y0);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
313	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  cN  =  a  *  q1  +  b  *  dprev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  double  cN  =  a  *  q1  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    q1    +    b    *    dPrev;    double  cN  =  a  *  q1  +  b  *  dprev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	25	None	add
314	[BUG]  [BUGGY]  b  =  getB(n,  y1);  [CE]  cannot  assign  a  value  to  final  variable  b  [FE]                      AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  b  =  getB(n,  y1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	b  =  getB(n,  y1);	  b    =    getB(n,    q1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  b	67	None	replace
315	[BUG]  [BUGGY]  final  double  b  =  getA(n,  hN);  [CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  b  =  getA(n,  hN);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  b  =  getA(n,  hN);	  final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  b  is  already  defined  in  method  evaluate(double,double,int)	43	None	replace
316	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  b  +  hN  *  dPrev;  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  OutOfRangeException  	24	10	replace
317	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  cN  =  a  *  b  +  hN  *  p0;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  hN  *  dPrev;  cN  =  a  *  b  +  hN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  b  +  hN  *  dPrev;  cN  =  a  *  b  +  hN  *  p0;	  double    cN    =    a    *    b    +    hN    *    p0;    cN    =    a    *    b    +    hN    *    p0;    	compilable	  [FE]  OutOfRangeException  	24	10	replace
318	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  b;  [CE]  variable  cN  might  not  have  been  initialized  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cN  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cN  +  b  *  b;	  double    cN    =    a    *    p0    +    b    *    b;    	non-compiled	[CE]  variable  cN  might  not  have  been  initialized	14	None	replace
319	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  int  cN  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  int  cN  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    p0;    int  cN  =  a  *  cPrev  +  b  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
320	[BUG]  [BUGGY]  final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  y);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    y);    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
321	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  cN  might  not  have  been  initialized  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cN  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  cN  might  not  have  been  initialized	58	None	replace
322	[BUG]  [BUGGY]  double  cN  =  a  *  cn  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  cn  [FE]      ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cn  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  cn  +  b  *  DEFAULT_EPSILON;	  double    cN    =    a    *    hN    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  cn	58	None	replace
323	[BUG]  [BUGGY]  double  cN  =  a  *  q0  +  b  *  dPrev;  [CE]  cannot  find  symbol  q0  [FE]            ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  q0  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  q0  +  b  *  dPrev;	  double    cN    =    a    *    q1    +    b    *    p0;    double    cN    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	55	None	replace
324	[BUG]  [BUGGY]  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  +  1);	  double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
325	[BUG]  [BUGGY]  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN  -  1);	  double    a    =    getA(n,    x);    final    double    b    =    getB(n,    hN);    	non-compiled	[CE]  variable  a  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
326	[BUG]  [BUGGY]  final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  p1);  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  p1);  [BUGGY]      double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	final  double  p0  =  getA(n,  x);  final  double  b  =  getB(n,  p1);	  final    double    a    =    getA(n,    p0);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
327	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  cN  [FE]        ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  qN  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  qN  =  a  *  q1  +  b  *  cN;	  double    cN    =    a    *    q1    +    b    *    p0;    double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  cN	75	None	replace
328	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  dPrev;  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
329	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  cN  =  a  *  hN  +  b  *  p0;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  dPrev;  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
330	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	add	double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  cN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
331	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  cN;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double  cN  =  a  *  hN  +  b  *  p0;  cN  =  a  *  hN  +  b  *  cN;	  double    cN    =    a    *    hN    +    b    *    p0;    cN    =    a    *    hN    +    b    *    p0;    	compilable	  [FE]  ConvergenceException  	20	11	replace
332	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  hPrev;  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    cPrev    +    b    *    hPrev;    double  cN  =  a  *  cPrev  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	34	None	add
333	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  int  cN  =  a  *  b  +  dPrev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);      [BUGGY]  double  cN  =  a  *  b  +  dPrev  *  p0;  int  cN  =  a  *  b  +  dPrev  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	143	143	2	replace	double    cN    =    a    *    b    +    dPrev    *    p0;    int  cN  =  a  *  b  +  dPrev  *  p0;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	add
