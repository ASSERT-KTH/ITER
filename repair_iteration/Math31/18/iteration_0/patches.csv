bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
2	[BUG]  [BUGGY]  double  cPrev  =  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  DEFAULT_EPSILON;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
4	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  DEFAULT_EPSILON  +  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
6	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  +  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
7	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);	double  cPrev  =  hPrev;  	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  cPrev  [FE]            AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	  	double  cPrev  =  hPrev;  	non-compiled	[CE]  cannot  find  symbol  cPrev	35	None	replace
9	[BUG]  [BUGGY]    double  cN  =  hN;  [CE]  cannot  find  symbol  hN  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  cN  =  hN;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  cN  =  hN;		non-compiled	[CE]  cannot  find  symbol  hN	36	None	add
10	[BUG]  [BUGGY]    double  cN  =  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  cN  =  hPrev;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  cN  =  hPrev;		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
11	[BUG]  [BUGGY]    double  dPrev  =  0.0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  dPrev  =  0.0;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  dPrev  =  0.0;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
12	[BUG]  [BUGGY]    double  cN  =  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  cN  =  p0;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  cN  =  p0;		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
13	[BUG]  [BUGGY]    Double  cN  =  hN;  [CE]  cannot  find  symbol  hN  [FE]            AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    Double  cN  =  hN;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    Double  cN  =  hN;		non-compiled	[CE]  cannot  find  symbol  hN	36	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  p0;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
15	[BUG]  [BUGGY]  double  cPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  p0;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0;	double  cPrev  =  hPrev;  	compilable	  [FE]  AssertionError  	35	2	replace
16	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  0;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  0;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
17	[BUG]  [BUGGY]  double  cPrev  =  0;  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  0;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  0;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
18	[BUG]  [BUGGY]    double  q2  =  1.0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q2  =  1.0;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q2  =  1.0;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
19	[BUG]  [BUGGY]    double  q1  =  1.0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q1  =  1.0;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q1  =  1.0;		non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
20	[BUG]  [BUGGY]    double  dPrev  =  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  dPrev  =  dPrev;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  dPrev  =  dPrev;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
21	[BUG]  [BUGGY]    double  q2  =  0.0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q2  =  0.0;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q2  =  0.0;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
22	[BUG]  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q2  =  a  *  q1  +  b  *  dPrev;		non-compiled	[CE]  cannot  find  symbol  a	36	None	add
23	[BUG]  [BUGGY]    double  q2  =  a  *  q0  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q2  =  a  *  q0  +  b  *  dPrev;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q2  =  a  *  q0  +  b  *  dPrev;		non-compiled	[CE]  cannot  find  symbol  a	36	None	add
24	[BUG]  [BUGGY]    double  q2  =  a  *  q1;  [CE]  cannot  find  symbol  a  [FE]        AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]    double  q2  =  a  *  q1;  [BUGGY]  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	    double  q2  =  a  *  q1;		non-compiled	[CE]  cannot  find  symbol  a	36	None	add
25	[BUG]  [BUGGY]  double  cPrev  =  defULT_EPSILON;  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]    AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  defULT_EPSILON;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  defULT_EPSILON;	double  cPrev  =  hPrev;  	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	35	None	replace
26	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  dPrev  +  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  +  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
27	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [BUGGY]  double  cPrev  =  dPrev  +  dPrev;  [BUGGY]  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  dPrev;	double  cPrev  =  hPrev;  	compilable	  [FE]  ConvergenceException  	35	14	replace
