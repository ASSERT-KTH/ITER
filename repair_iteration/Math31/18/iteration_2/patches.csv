bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  n  *  dPrev;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  ConvergenceException  	68	14	replace
2	[BUG]  [BUGGY]  double  cPrev  =  n  *  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  n  *  dPrev;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  ConvergenceException  	68	14	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  n  +  p0;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  AssertionError  	68	2	replace
4	[BUG]  [BUGGY]  double  cPrev  =  n  +  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  n  +  p0;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  AssertionError  	68	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  +  n;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  AssertionError  	68	2	replace
6	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  n;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  n;	  double    cPrev    =    n    +    dPrev;    	compilable	  [FE]  AssertionError  	68	2	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  +  q1;	  double    cPrev    =    p0    +    dPrev;    	compilable	  [FE]  AssertionError  	34	2	replace
8	[BUG]  [BUGGY]  double  cPrev  =  p0  +  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  +  q1;	  double    cPrev    =    p0    +    dPrev;    	compilable	  [FE]  AssertionError  	34	2	replace
9	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  *  dPrev;	  double    cPrev    =    p0    +    dPrev;    	compilable	  [FE]  ConvergenceException  	34	14	replace
10	[BUG]  [BUGGY]  double  cPrev  =  p0  *  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  *  dPrev;	  double    cPrev    =    p0    +    dPrev;    	compilable	  [FE]  ConvergenceException  	34	14	replace
11	[BUG]  [BUGGY]  double  cPrev  =  p1  +  dPrev;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p1  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p1  +  dPrev;	  double    cPrev    =    p0    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	34	None	replace
12	[BUG]  [BUGGY]  Double  cN  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  dPrev.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  dPrev.doubleValue();	  Double    cN    =    dPrev;    	non-compiled	[CE]  double  cannot  be  dereferenced	70	None	replace
13	[BUG]  [BUGGY]  double  q1  =  1.0  +  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q1  =  1.0  +  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q1  =  1.0  +  p0;	  double    q1    =    1.0    +    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
14	[BUG]  [BUGGY]  double  q1  =  1.0  +  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q1  =  1.0  +  cN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q1  =  1.0  +  cN;	  double    q1    =    1.0    +    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
15	[BUG]  [BUGGY]  double  q1  =  1.0  +  hN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q1  =  1.0  +  hN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q1  =  1.0  +  hN;	  double    q1    =    1.0    +    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
16	[BUG]  [BUGGY]  double  cPrev  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dprev;	  double    cPrev    =    dPrev;    double    cPrev    =    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	107	None	replace
17	[BUG]  [BUGGY]  double  cPrev  =  d0;  [CE]  cannot  find  symbol  d0  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  d0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  d0;	  double    cPrev    =    dPrev;    double    cPrev    =    dprev;    	non-compiled	[CE]  cannot  find  symbol  d0	107	None	replace
18	[BUG]  [BUGGY]  cPrev  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  cPrev  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    double    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  cPrev	52	None	replace
19	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  ||  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    double    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	52	None	replace
20	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  double  cPrev  =  DEFAULT_EPSILON  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  double  cPrev  =  DEFAULT_EPSILON  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    +    p0;    double  cPrev  =  DEFAULT_EPSILON  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
21	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  Double  cPrev  =  DEFAULT_EPSILON  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  Double  cPrev  =  DEFAULT_EPSILON  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    +    p0;    Double  cPrev  =  DEFAULT_EPSILON  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
22	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  int  cPrev  =  DEFAULT_EPSILON  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  int  cPrev  =  DEFAULT_EPSILON  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    +    p0;    int  cPrev  =  DEFAULT_EPSILON  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
23	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  cPrev  =  DEFAULT_EPSILON  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  p0;  cPrev  =  DEFAULT_EPSILON  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    +    p0;    cPrev  =  DEFAULT_EPSILON  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
24	[BUG]  [BUGGY]  double  cN  =  dPrev  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev  *  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev  *  p0;	  double    cN    =    a    *    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	98	None	replace
25	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  a  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  a  *  dPrev;	  double    cN    =    a    *    p0;    	non-compiled	[CE]  cannot  find  symbol  a	98	None	replace
26	[BUG]  [BUGGY]  double  cN  =  p0  *  a;  [CE]  cannot  find  symbol  a  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  p0  *  a;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  p0  *  a;	  double    cN    =    a    *    p0;    	non-compiled	[CE]  cannot  find  symbol  a	98	None	replace
27	[BUG]  [BUGGY]  double  q2  =  a  *  p0  +  b  *  q1;  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  p0  +  b  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  p0  +  b  *  q1;	  double    q2    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  a	47	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  +  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	32	2	replace
29	[BUG]  [BUGGY]  double  cPrev  =  p0  +  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  +  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	32	2	replace
30	[BUG]  [BUGGY]  double  p0  =  1.0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  p0  =  1.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  p0  =  1.0;	  double    p0    =    0.0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	79	None	replace
31	[BUG]  [BUGGY]  double  q0  =  0.0;  [CE]  cannot  find  symbol  cPrev  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q0  =  0.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q0  =  0.0;	  double    p0    =    0.0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	79	None	replace
32	[BUG]  [BUGGY]  double  q2  =  dPrev  *  q0;  [CE]  cannot  find  symbol  q0  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  dPrev  *  q0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  dPrev  *  q0;	  double    q2    =    a    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	93	None	replace
33	[BUG]  [BUGGY]  double  q2  =  p0  *  q0;  [CE]  cannot  find  symbol  q0  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  p0  *  q0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  p0  *  q0;	  double    q2    =    a    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	93	None	replace
34	[BUG]  [BUGGY]  double  q2  =  n  *  q0;  [CE]  cannot  find  symbol  q0  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  n  *  q0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  n  *  q0;	  double    q2    =    a    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	93	None	replace
35	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    double  cPrev  =  dPrev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
36	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    Double  cPrev  =  dPrev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
37	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    cPrev  =  dPrev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
38	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  int  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  int  cPrev  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    int  cPrev  =  dPrev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
39	[BUG]  [BUGGY]  double  dPrev  =  0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  0;	  double    dPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
40	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0);  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  p0);	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dPrev);    	non-compiled	[CE]  ';'  expected	27	None	replace
41	[BUG]  [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  0.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  0.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    double  cPrev  =  0.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
42	[BUG]  [BUGGY]  double  cPrev  =  0.0;  Double  cPrev  =  0.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  Double  cPrev  =  0.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    Double  cPrev  =  0.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
43	[BUG]  [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  1.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  1.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    double  cPrev  =  1.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
44	[BUG]  [BUGGY]  double  cPrev  =  0.0;  cPrev  =  0.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  cPrev  =  0.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    cPrev  =  0.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
45	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dPrev);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  +  dPrev);	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dPrev);    	non-compiled	[CE]  ';'  expected	106	None	replace
46	[BUG]  [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [CE]  cannot  find  symbol  cPrev  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dPrev);    	non-compiled	[CE]  cannot  find  symbol  cPrev	106	None	replace
47	[BUG]  [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dPrev);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  DEFAULT_EPSILON  +  dPrev);	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dPrev);    	non-compiled	[CE]  ';'  expected	106	None	replace
48	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  dPrev  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  ConvergenceException  	26	14	replace
49	[BUG]  [BUGGY]  Double  cPrev  =  dPrev  +  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  ConvergenceException  	26	14	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  dPrev  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  AssertionError  	26	2	replace
51	[BUG]  [BUGGY]  Double  cPrev  =  dPrev  +  p0;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  AssertionError  	26	2	replace
52	[BUG]  [BUGGY]  double  cPrev  =  hPrev.equals(DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev.equals(DEFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hPrev.equals(DEFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(hPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
53	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  hPrev);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  hPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  hPrev);	  double    cPrev    =    DEFAULT_EPSILON.equals(hPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
54	[BUG]  [BUGGY]  double  cPrev  =  hPrev.equals(deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev.equals(deFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hPrev.equals(deFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(hPrev);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	16	None	replace
55	[BUG]  [BUGGY]  double  cPrev  =  dprev  +  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dprev  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dprev  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dprev    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dprev	85	None	replace
56	[BUG]  [BUGGY]  double  cPrev  =  dprev  *  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dprev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dprev  *  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dprev    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dprev	85	None	replace
57	[BUG]  [BUGGY]  double  q2  =  1.0  +  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  p0;	  double    q2    =    1.0    +    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
58	[BUG]  [BUGGY]  double  q2  =  1.0  +  cN;  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  cN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  cN;	  double    q2    =    1.0    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	74	None	replace
59	[BUG]  [BUGGY]  double  q2  =  1.0  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  *  dPrev;	  double    q2    =    1.0    +    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
60	[BUG]  [BUGGY]  double  cN  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev  *  DEFAULT_EPSILON;	  double    cN    =    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
61	[BUG]  [BUGGY]  double  cN  =  dPrev  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev  *  q1;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	97	None	replace
62	[BUG]  [BUGGY]  double  qN  =  a  *  q1;  [CE]  cannot  find  symbol  a  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  qN  =  a  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  qN  =  a  *  q1;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  cannot  find  symbol  a	97	None	replace
63	[BUG]  [BUGGY]  double  cN  =  p0  *  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  p0  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  p0  *  q1;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	97	None	replace
64	[BUG]  [BUGGY]  int  cPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  p0;	  double    cPrev    =    p0;    int    cPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
65	[BUG]  [BUGGY]  double  cPrev  =  dPrev;  int  cPrev  =  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev;  int  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev;  int  cPrev  =  p0;	  double    cPrev    =    p0;    int    cPrev    =    p0;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
66	[BUG]  [BUGGY]  double  q2  =  0.5  +  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  0.5  +  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  0.5  +  dPrev;	  double    q2    =    0.5;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
67	[BUG]  [BUGGY]  Double  hN  =  DEFAULT_EPSILON;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  hN  =  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  hN  =  DEFAULT_EPSILON;	  Double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	109	None	replace
68	[BUG]  [BUGGY]  Double  hN  =  hN;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  hN  =  hN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  hN  =  hN;	  Double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	109	None	replace
69	[BUG]  [BUGGY]  Double  hN  =  hPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  hN  =  hPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  hN  =  hPrev;	  Double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	109	None	replace
70	[BUG]  [BUGGY]  double  dPrev  =  hN  +  1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  hN  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  hN  +  1;	  double    dPrev    =    hN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
71	[BUG]  [BUGGY]  double  dPrev  =  n;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  n;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  n;	  double    dPrev    =    hN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
72	[BUG]  [BUGGY]  double  cPrev  =  1.0;  double  cPrev  =  1.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1.0;  double  cPrev  =  1.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1.0;    double  cPrev  =  1.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
73	[BUG]  [BUGGY]  double  cPrev  =  1.0;  Double  cPrev  =  1.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1.0;  Double  cPrev  =  1.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1.0;    Double  cPrev  =  1.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
74	[BUG]  [BUGGY]  double  cPrev  =  1.0;  int  cPrev  =  1.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1.0;  int  cPrev  =  1.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1.0;    int  cPrev  =  1.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
75	[BUG]  [BUGGY]  double  cPrev  =  1.0;  cPrev  =  1.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1.0;  cPrev  =  1.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1.0;    cPrev  =  1.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
76	[BUG]  [BUGGY]  cPrev  =  dPrev;  [CE]  cannot  find  symbol  cPrev  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  dPrev;	  double    cPrev    =    dPrev;    cPrev    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cPrev	46	None	replace
77	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0;  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0;  cPrev  =  dPrev;	  double    cPrev    =    dPrev;    cPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	46	14	replace
78	[BUG]  [BUGGY]  double  cPrev  =  p0;  cPrev  =  dPrev;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0;  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0;  cPrev  =  dPrev;	  double    cPrev    =    dPrev;    cPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	46	14	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  DEFAULT_EPSILON  *  p0;	  double    cPrev    =    DEFAULT_EPSILON    +    p0;    	compilable	  [FE]  AssertionError  	38	2	replace
80	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  *  p0;	  double    cPrev    =    DEFAULT_EPSILON    +    p0;    	compilable	  [FE]  AssertionError  	38	2	replace
81	[BUG]  [BUGGY]  double  q2  =  dPrev  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  dPrev  *  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  dPrev  *  p0;	  double    q2    =    dPrev    *    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
82	[BUG]  [BUGGY]  double  q2  =  hN  *  q1;  [CE]  cannot  find  symbol  hN  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  hN  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  hN  *  q1;	  double    q2    =    dPrev    *    q1;    	non-compiled	[CE]  cannot  find  symbol  hN	49	None	replace
83	[BUG]  [BUGGY]  cPrev  =  p0;  [CE]  cannot  find  symbol  cPrev  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  p0;	  double    cPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	4	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev;  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev;  cPrev  =  p0;	  double    cPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  AssertionError  	4	2	replace
85	[BUG]  [BUGGY]  double  cPrev  =  dPrev;  cPrev  =  p0;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev;  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev;  cPrev  =  p0;	  double    cPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  AssertionError  	4	2	replace
86	[BUG]  [BUGGY]  double  cN  =  p0  +  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  p0  +  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  p0  +  q1;	  double    cN    =    p0    +    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	102	None	replace
87	[BUG]  [BUGGY]  double  cN  =  dPrev  +  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev  +  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev  +  p0;	  double    cN    =    p0    +    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	102	None	replace
88	[BUG]  [BUGGY]  double  cN  =  hN  +  dPrev;  [CE]  cannot  find  symbol  hN  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  hN  +  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  hN  +  dPrev;	  double    cN    =    p0    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  hN	102	None	replace
89	[BUG]  [BUGGY]  double  q2  =  10.0  +  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  10.0  +  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  10.0  +  dPrev;	  double    q2    =    10.0;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
90	[BUG]  [BUGGY]  int  cPrev  =  0;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  0;	  double    cPrev    =    0;    int    cPrev    =    0;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
91	[BUG]  [BUGGY]  cPrev  =  0;  [CE]  cannot  find  symbol  cPrev  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  0;	  double    cPrev    =    0;    int    cPrev    =    0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	20	None	replace
92	[BUG]  [BUGGY]  double  q1  =  10.0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q1  =  10.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q1  =  10.0;	  double    q1    =    0.0;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  p0;	  double    cPrev    =    p0;    Double    cPrev    =    p0;    	compilable	  [FE]  AssertionError  	2	2	replace
94	[BUG]  [BUGGY]  Double  cPrev  =  p0;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  p0;	  double    cPrev    =    p0;    Double    cPrev    =    p0;    	compilable	  [FE]  AssertionError  	2	2	replace
95	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  n  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  n  =  DEFAULT_EPSILON;  n  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	n  =  DEFAULT_EPSILON;  n  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
96	[BUG]  [BUGGY]  double  cPrev  =  dPrev.equals(p0);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev.equals(p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev.equals(p0);	  double    cPrev    =    dPrev.equals(deFAULT_EPSILON);    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
97	[BUG]  [BUGGY]  double  cPrev  =  hN.equals(deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hN.equals(deFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hN.equals(deFAULT_EPSILON);	  double    cPrev    =    dPrev.equals(deFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	15	None	replace
98	[BUG]  [BUGGY]  double  cPrev  =  hN.equals(dPrev);  [CE]  cannot  find  symbol  hN  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hN.equals(dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hN.equals(dPrev);	  double    cPrev    =    dPrev.equals(deFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  hN	15	None	replace
99	[BUG]  [BUGGY]  double  dPrev  =  0.01;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  0.01;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  0.01;	  double    dPrev    =    10.0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	77	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    Double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	compilable	  [FE]  AssertionError  	40	2	replace
101	[BUG]  [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    Double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	compilable	  [FE]  AssertionError  	40	2	replace
102	[BUG]  [BUGGY]  double  cN  =  1.0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  1.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  1.0;	  double    dPrev    =    1.0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	76	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.5;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  0.5;	  double    cPrev    =    1.0;    	compilable	  [FE]  AssertionError  	10	2	replace
104	[BUG]  [BUGGY]  double  cPrev  =  0.5;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.5;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  0.5;	  double    cPrev    =    1.0;    	compilable	  [FE]  AssertionError  	10	2	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  10.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  10.0;	  double    cPrev    =    1.0;    	compilable	  [FE]  AssertionError  	10	2	replace
106	[BUG]  [BUGGY]  double  cPrev  =  10.0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  10.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  10.0;	  double    cPrev    =    1.0;    	compilable	  [FE]  AssertionError  	10	2	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    Double    cPrev    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	53	2	replace
108	[BUG]  [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    Double    cPrev    =    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	53	2	replace
109	[BUG]  [BUGGY]  double  cPrev  =  p0.equals(dPrev,  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0.equals(dPrev,  DEFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0.equals(dPrev,  DEFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
110	[BUG]  [BUGGY]  double  cPrev  =  dPrev.equals(deFAULT_EPSILON,  p0);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev.equals(deFAULT_EPSILON,  p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev.equals(deFAULT_EPSILON,  p0);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	17	None	replace
111	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  p0);  [CE]  double  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  p0);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
112	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  p1);  [CE]  cannot  find  symbol  p1  [FE]                              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  p1);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(dPrev,  p1);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  cannot  find  symbol  p1	17	None	replace
113	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  +  dprev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	81	None	replace
114	[BUG]  [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dprev;  [CE]  cannot  find  symbol  cPrev  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  cPrev  =  DEFAULT_EPSILON  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	cPrev  =  DEFAULT_EPSILON  +  dprev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  cPrev	81	None	replace
115	[BUG]  [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON  +  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  DEFAULT_EPSILON  +  dprev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	81	None	replace
116	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  cPrev  =  dPrev  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    double  cPrev  =  dPrev  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
117	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  Double  cPrev  =  dPrev  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  Double  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    Double  cPrev  =  dPrev  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
118	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  int  cPrev  =  dPrev  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  int  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    int  cPrev  =  dPrev  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
119	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  cPrev  =  dPrev  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    cPrev  =  dPrev  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
120	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  dprev;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	105	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  /  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	115	2	replace
122	[BUG]  [BUGGY]  double  cPrev  =  p0  /  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  /  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	115	2	replace
123	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  2;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  /  2;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
124	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  2;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  2;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
125	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  3;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  /  3;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
126	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  3;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  3;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  3;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
127	[BUG]  [BUGGY]  double  q2  =  p0  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  p0  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  p0  *  dPrev;	  double    q2    =    p0    *    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
128	[BUG]  [BUGGY]  double  q2  =  n  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  n  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  n  *  q1;	  double    q2    =    p0    *    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	50	None	replace
129	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    double  cPrev  =  dPrev  /  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	94	None	add
130	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  Double  cPrev  =  dPrev  /  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  Double  cPrev  =  dPrev  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    Double  cPrev  =  dPrev  /  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	94	None	add
131	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dPrev);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    double  cPrev  =  dPrev  /  dPrev);	  	non-compiled	[CE]  ';'  expected	94	None	add
132	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  int  cPrev  =  dPrev  /  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  int  cPrev  =  dPrev  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    int  cPrev  =  dPrev  /  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	94	None	add
133	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    double  cPrev  =  dPrev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
134	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    Double  cPrev  =  dPrev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
135	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  int  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  int  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    int  cPrev  =  dPrev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
136	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  cPrev  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    cPrev  =  dPrev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
137	[BUG]  [BUGGY]  double  cPrev  =  n  +  dPrev;  double  cPrev  =  n  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  dPrev;  double  cPrev  =  n  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    n    +    dPrev;    double  cPrev  =  n  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	67	None	add
138	[BUG]  [BUGGY]  double  cPrev  =  n  +  dPrev;  Double  cPrev  =  n  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  dPrev;  Double  cPrev  =  n  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    n    +    dPrev;    Double  cPrev  =  n  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	67	None	add
139	[BUG]  [BUGGY]  double  cPrev  =  n  +  dPrev;  int  cPrev  =  n  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  dPrev;  int  cPrev  =  n  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    n    +    dPrev;    int  cPrev  =  n  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	67	None	add
140	[BUG]  [BUGGY]  double  cPrev  =  n  +  dPrev;  double  cPrev  =  n  +  dPrev);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  dPrev;  double  cPrev  =  n  +  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    n    +    dPrev;    double  cPrev  =  n  +  dPrev);	  	non-compiled	[CE]  ';'  expected	67	None	add
141	[BUG]  [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    double  cPrev  =  hPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	35	None	add
142	[BUG]  [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  Double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  Double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    Double  cPrev  =  hPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	35	None	add
143	[BUG]  [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  int  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  int  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    int  cPrev  =  hPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	35	None	add
144	[BUG]  [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  cPrev  =  hPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    cPrev  =  hPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	35	None	add
145	[BUG]  [BUGGY]  double  cPrev  =  hN.equals(DeFAULT_EPSILON);  [CE]  cannot  find  symbol  DeFAULT_EPSILON  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hN.equals(DeFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hN.equals(DeFAULT_EPSILON);	  double    cPrev    =    dPrev.equals(DeFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  DeFAULT_EPSILON	103	None	replace
146	[BUG]  [BUGGY]  double  cPrev  =  p0.equals(DeFAULT_EPSILON);  [CE]  cannot  find  symbol  DeFAULT_EPSILON  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0.equals(DeFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0.equals(DeFAULT_EPSILON);	  double    cPrev    =    dPrev.equals(DeFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  DeFAULT_EPSILON	103	None	replace
147	[BUG]  [BUGGY]  double  cPrev  =  1;  double  cPrev  =  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  double  cPrev  =  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1;    double  cPrev  =  1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
148	[BUG]  [BUGGY]  double  cPrev  =  1;  Double  cPrev  =  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  Double  cPrev  =  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1;    Double  cPrev  =  1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
149	[BUG]  [BUGGY]  double  cPrev  =  1;  int  cPrev  =  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  int  cPrev  =  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1;    int  cPrev  =  1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
150	[BUG]  [BUGGY]  double  cPrev  =  1;  cPrev  =  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  cPrev  =  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1;    cPrev  =  1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
151	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    double  cPrev  =  dPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
152	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  Double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    Double  cPrev  =  dPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
153	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  int  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  int  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    int  cPrev  =  dPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
154	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  cPrev  =  dPrev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    cPrev  =  dPrev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
155	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  /  dPrev;	  double    cPrev    =    dPrev    /    dPrev;    	compilable	  [FE]  ConvergenceException  	95	14	replace
156	[BUG]  [BUGGY]  double  cPrev  =  p0  /  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  /  dPrev;	  double    cPrev    =    dPrev    /    dPrev;    	compilable	  [FE]  ConvergenceException  	95	14	replace
157	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  /  p0;	  double    cPrev    =    dPrev    /    dPrev;    	compilable	  [FE]  ConvergenceException  	95	14	replace
158	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  p0;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  p0;	  double    cPrev    =    dPrev    /    dPrev;    	compilable	  [FE]  ConvergenceException  	95	14	replace
159	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  hN;  [CE]  cannot  find  symbol  hN  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  hN;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  hN;	  double    cPrev    =    dPrev    /    dPrev;    	non-compiled	[CE]  cannot  find  symbol  hN	95	None	replace
160	[BUG]  [BUGGY]  Double  cPrev  =  0;  [CE]  incompatible  types  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  0;	  double    cPrev    =    0;    Double    cPrev    =    0;    	non-compiled	[CE]  incompatible  types	19	None	replace
161	[BUG]  [BUGGY]  double  cN  =  hN.doubleValue();  [CE]  cannot  find  symbol  hN  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  hN.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  hN.doubleValue();	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  hN	101	None	replace
162	[BUG]  [BUGGY]  double  cN  =  hPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  hPrev.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  hPrev.doubleValue();	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
163	[BUG]  [BUGGY]  double  cN  =  p0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  p0.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  p0.doubleValue();	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
164	[BUG]  [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    int    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
165	[BUG]  [BUGGY]  Integer  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Integer  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Integer  cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    int    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  incompatible  types	41	None	replace
166	[BUG]  [BUGGY]  double  dPrev  =  hPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  hPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  hPrev;	  double    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
167	[BUG]  [BUGGY]  double  dPrev  =  q1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  q1;	  double    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
168	[BUG]  [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    p0    +    dPrev;    double  cPrev  =  p0  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	33	None	add
169	[BUG]  [BUGGY]  double  cPrev  =  p0  +  dPrev;  Double  cPrev  =  p0  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  dPrev;  Double  cPrev  =  p0  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    p0    +    dPrev;    Double  cPrev  =  p0  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	33	None	add
170	[BUG]  [BUGGY]  double  cPrev  =  p0  +  dPrev;  int  cPrev  =  p0  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  dPrev;  int  cPrev  =  p0  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    p0    +    dPrev;    int  cPrev  =  p0  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	33	None	add
171	[BUG]  [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dPrev);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    p0    +    dPrev;    double  cPrev  =  p0  +  dPrev);	  	non-compiled	[CE]  ';'  expected	33	None	add
172	[BUG]  [BUGGY]  int  cPrev  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    int    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
173	[BUG]  [BUGGY]  Integer  cPrev  =  DEFAULT_EPSILON;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Integer  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Integer  cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    int    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	54	None	replace
174	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev0;  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  q1  +  b  *  dPrev0;	  double    q2    =    a    *    q1    +    b    *    q0;    	non-compiled	[CE]  cannot  find  symbol  a	116	None	replace
175	[BUG]  [BUGGY]  int  cPrev  =  dPrev  +  dPrev;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  dPrev  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  dPrev  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    int    cPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
176	[BUG]  [BUGGY]  int  cPrev  =  dPrev  +  p0;  [CE]  possible  loss  of  precision  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  dPrev  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    int    cPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
177	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dPrev  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dPrev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    dPrev;    double  cPrev  =  dPrev  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
178	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  Double  cPrev  =  dPrev  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  Double  cPrev  =  dPrev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    dPrev;    Double  cPrev  =  dPrev  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
179	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  cPrev  =  dPrev  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  cPrev  =  dPrev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    dPrev;    cPrev  =  dPrev  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
180	[BUG]  [BUGGY]  double  cPrev  =  q1;  double  cPrev  =  q1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  q1;  double  cPrev  =  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    q1;    double  cPrev  =  q1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
181	[BUG]  [BUGGY]  double  cPrev  =  q1;  Double  cPrev  =  q1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  q1;  Double  cPrev  =  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    q1;    Double  cPrev  =  q1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
182	[BUG]  [BUGGY]  double  cPrev  =  q1;  int  cPrev  =  q1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  q1;  int  cPrev  =  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    q1;    int  cPrev  =  q1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
183	[BUG]  [BUGGY]  double  cPrev  =  q1;  cPrev  =  q1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  q1;  cPrev  =  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    q1;    cPrev  =  q1;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	add
184	[BUG]  [BUGGY]  double  q1  =  0.5  +  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q1  =  0.5  +  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q1  =  0.5  +  dPrev;	  double    q1    =    0.5;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	58	None	replace
185	[BUG]  [BUGGY]  Double  cN  =  0;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  0;	  Double    cN    =    DEFAULT_EPSILON;    	non-compiled	[CE]  incompatible  types	71	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  n  +  DEFAULT_EPSILON;	  double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	36	2	replace
187	[BUG]  [BUGGY]  double  cPrev  =  n  +  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  n  +  DEFAULT_EPSILON;	  double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	36	2	replace
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  hPrev  *  DEFAULT_EPSILON;	  double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	36	2	replace
189	[BUG]  [BUGGY]  double  cPrev  =  hPrev  *  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  hPrev  *  DEFAULT_EPSILON;	  double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	36	2	replace
190	[BUG]  [BUGGY]  int  cPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  dPrev;	  double    cPrev    =    dPrev;    int    cPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
191	[BUG]  [BUGGY]  double  cN  =  defULT_EPSILON;  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  defULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  defULT_EPSILON;	  double    cN    =    cN;    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	108	None	replace
192	[BUG]  [BUGGY]  double  cN  =  defult_EPSILON;  [CE]  cannot  find  symbol  defult_EPSILON  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  defult_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  defult_EPSILON;	  double    cN    =    cN;    	non-compiled	[CE]  cannot  find  symbol  defult_EPSILON	108	None	replace
193	[BUG]  [BUGGY]  double  qPrev  =  1.0;  [CE]  cannot  find  symbol  cPrev  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  qPrev  =  1.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  qPrev  =  1.0;	  double    qPrev    =    0.0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	104	None	replace
194	[BUG]  [BUGGY]  double  cN  =  0.0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  0.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  0.0;	  double    qPrev    =    0.0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	104	None	replace
195	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    *    dPrev;    double  cPrev  =  DEFAULT_EPSILON  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
196	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  Double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  Double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    *    dPrev;    Double  cPrev  =  DEFAULT_EPSILON  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
197	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  cPrev  =  DEFAULT_EPSILON  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    *    dPrev;    cPrev  =  DEFAULT_EPSILON  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
198	[BUG]  [BUGGY]  double  cN  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  0;	  double    cN    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	22	None	replace
199	[BUG]  [BUGGY]  double  q2  =  a  *  p0  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  p0  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  p0  +  b  *  DEFAULT_EPSILON;	  double    q2    =    a    *    q1    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  a	89	None	replace
200	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  deFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  deFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  q1  +  b  *  deFAULT_EPSILON;	  double    q2    =    a    *    q1    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  a	89	None	replace
201	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  double    q2    =    a    *    q1    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  a	89	None	replace
202	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  *  p0;	  double    cPrev    =    dPrev    +    p0;    	compilable	  [FE]  ConvergenceException  	66	14	replace
203	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  p0;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  p0;	  double    cPrev    =    dPrev    +    p0;    	compilable	  [FE]  ConvergenceException  	66	14	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  +  q1;	  double    cPrev    =    dPrev    +    p0;    	compilable	  [FE]  AssertionError  	66	2	replace
205	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  q1;	  double    cPrev    =    dPrev    +    p0;    	compilable	  [FE]  AssertionError  	66	2	replace
206	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p1;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  p1;	  double    cPrev    =    dPrev    +    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	66	None	replace
207	[BUG]  [BUGGY]  double  q2  =  1.0  +  p0  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  p0  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  p0  *  dPrev;	  double    q2    =    1.0    +    b    *    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
208	[BUG]  [BUGGY]  double  q2  =  1.0  +  cN  *  dPrev;  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  cN  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  cN  *  dPrev;	  double    q2    =    1.0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	82	None	replace
209	[BUG]  [BUGGY]  double  q2  =  1.0  +  a  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  a  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  a  *  dPrev;	  double    q2    =    1.0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	82	None	replace
210	[BUG]  [BUGGY]  Double  q2  =  1.0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  q2  =  1.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  q2  =  1.0;	  double    q2    =    1.0d;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	111	None	replace
211	[BUG]  [BUGGY]  double  dPrev  =  dPrev  +  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  dPrev  +  cN;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  dPrev  +  cN;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
212	[BUG]  [BUGGY]  double  dPrev  =  n  +  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  n  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  n  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
213	[BUG]  [BUGGY]  double  dPrev  =  dPrev  +  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  dPrev  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
214	[BUG]  [BUGGY]  double  dPrev  =  dPrev  +  n;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  dPrev  +  n;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
215	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  cN;  [CE]  cannot  find  symbol  cN  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  cN;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  cN;	  double    cPrev    =    dPrev    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cN	64	None	replace
216	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  hN;  [CE]  cannot  find  symbol  hN  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  hN;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  hN;	  double    cPrev    =    dPrev    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  hN	64	None	replace
217	[BUG]  [BUGGY]  double  cPrev  =  DFAULT_EPSILON.equals(dPrev);  [CE]  cannot  find  symbol  DFAULT_EPSILON  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DFAULT_EPSILON.equals(dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DFAULT_EPSILON.equals(dPrev);	  double    cPrev    =    dPrev.equals(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  DFAULT_EPSILON	14	None	replace
218	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(deFAULT_EPSILON);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(deFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(deFAULT_EPSILON);	  double    cPrev    =    dPrev.equals(DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	14	None	replace
219	[BUG]  [BUGGY]  double  q2  =  a  *  p1  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  p1  +  b  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  p1  +  b  *  dPrev;	  double    q2    =    a    *    p0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	24	None	replace
220	[BUG]  [BUGGY]  double  hN  =  hN;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hN  =  hN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hN  =  hN;	  double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
221	[BUG]  [BUGGY]  double  hN  =  hPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hN  =  hPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hN  =  hPrev;	  double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
222	[BUG]  [BUGGY]  double  hN  =  p0;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hN  =  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hN  =  p0;	  double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
223	[BUG]  [BUGGY]  double  hN  =  dPrev  +  1;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hN  =  dPrev  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hN  =  dPrev  +  1;	  double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	100	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  p0  *  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	113	2	replace
225	[BUG]  [BUGGY]  double  cPrev  =  p0  *  DEFAULT_EPSILON;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0  *  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	113	2	replace
226	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON  +  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  *  DEFAULT_EPSILON  +  1;	  double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	113	2	replace
227	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON  +  1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON  +  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  DEFAULT_EPSILON  +  1;	  double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    	compilable	  [FE]  AssertionError  	113	2	replace
228	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  dPrev;	  double    cPrev    =    dPrev;    Double    cPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	44	14	replace
229	[BUG]  [BUGGY]  Double  cPrev  =  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev;	  double    cPrev    =    dPrev;    Double    cPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	44	14	replace
230	[BUG]  [BUGGY]  Double  q2  =  a  *  q1  +  b  *  p0;  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  q2  =  a  *  q1  +  b  *  p0;	  Double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	110	None	replace
231	[BUG]  [BUGGY]  Double  q2  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  q2  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  q2  =  a  *  q1  +  b  *  cN;	  Double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	110	None	replace
232	[BUG]  [BUGGY]  double  cPrev  =  p0;  cPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0;  cPrev  =  p1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0;  cPrev  =  p1;	  double    cPrev    =    dPrev;    cPrev    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	46	None	replace
233	[BUG]  [BUGGY]  double  cPrev  =  a;  cPrev  =  b;  [CE]  cannot  find  symbol  a  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  a;  cPrev  =  b;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  a;  cPrev  =  b;	  double    cPrev    =    dPrev;    cPrev    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	46	None	replace
234	[BUG]  [BUGGY]  double  cN  =  dPrev  +  1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev  +  1;	  double    cN    =    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
235	[BUG]  [BUGGY]  double  cPrev  =  n  +  dPrev;  cPrev  =  n  +  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  n  +  dPrev;  cPrev  =  n  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    n    +    dPrev;    cPrev  =  n  +  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	67	None	add
236	[BUG]  [BUGGY]  double  cPrev  =  0.0;  int  cPrev  =  0.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  int  cPrev  =  0.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    int  cPrev  =  0.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
237	[BUG]  [BUGGY]  double  dPrev  =  p0;  cPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  p0;  cPrev  =  p0;	  double    cPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
238	[BUG]  [BUGGY]  double  q2  =  1.0  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  b  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0  +  b  *  DEFAULT_EPSILON;	  double    q2    =    1.0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  b	82	None	replace
239	[BUG]  [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dprev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0  +  dPrev;  double  cPrev  =  p0  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    p0    +    dPrev;    double  cPrev  =  p0  +  dprev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	33	None	add
240	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.doubleValue();	  double    cPrev    =    DEFAULT_EPSILON;    Double    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
241	[BUG]  [BUGGY]  double  cN  =  0;  int  cPrev  =  0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  0;  int  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  0;  int  cPrev  =  0;	  double    cPrev    =    0;    int    cPrev    =    0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	20	None	replace
242	[BUG]  [BUGGY]  double  cN  =  q0;  [CE]  cannot  find  symbol  q0  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  q0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  q0;	  double    cN    =    q1;    	non-compiled	[CE]  cannot  find  symbol  q0	99	None	replace
243	[BUG]  [BUGGY]  double  cPrev  =  a  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  a  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  a  *  dPrev;	  double    cPrev    =    dPrev    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	64	None	replace
244	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  *  q1;	  double    cPrev    =    dPrev    *    dPrev;    	compilable	  [FE]  ConvergenceException  	64	14	replace
245	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  q1;	  double    cPrev    =    dPrev    *    dPrev;    	compilable	  [FE]  ConvergenceException  	64	14	replace
246	[BUG]  [BUGGY]  Double  q2  =  a  *  q1  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  q2  =  a  *  q1  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  q2  =  a  *  q1  +  b  *  DEFAULT_EPSILON;	  Double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	110	None	replace
247	[BUG]  [BUGGY]  Double  q2  =  a  *  q1  +  b  *  hN;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  q2  =  a  *  q1  +  b  *  hN;	  Double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	110	None	replace
248	[BUG]  [BUGGY]  double  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  p0  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  p0  =  p0;	  double    cPrev    =    p0;    double    cPrev    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
249	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dprev  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dprev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    dPrev;    double  cPrev  =  dprev  *  dPrev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
250	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dPrev  *  dprev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dPrev;  double  cPrev  =  dPrev  *  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    dPrev;    double  cPrev  =  dPrev  *  dprev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	63	None	add
251	[BUG]  [BUGGY]  double  dPrev  =  p0  +  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  p0  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  p0  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
252	[BUG]  [BUGGY]  double  dPrev  =  cN  +  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  cN  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  cN  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
253	[BUG]  [BUGGY]  Double  dN  =  d0;  [CE]  cannot  find  symbol  d0  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dN  =  d0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dN  =  d0;	  Double    cN    =    d0;    	non-compiled	[CE]  cannot  find  symbol  d0	73	None	replace
254	[BUG]  [BUGGY]  double  cN  =  n.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  n.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  n.doubleValue();	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	101	None	replace
255	[BUG]  [BUGGY]  double  q2  =  dPrev  *  hN;  [CE]  cannot  find  symbol  hN  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  dPrev  *  hN;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  dPrev  *  hN;	  double    q2    =    dPrev    *    q1;    	non-compiled	[CE]  cannot  find  symbol  hN	49	None	replace
256	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  d0;  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  d0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  q1  +  b  *  d0;	  double    q2    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  a	90	None	replace
257	[BUG]  [BUGGY]  Double  cN  =  0.0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  0.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  0.0;	  Double    cN    =    DEFAULT_EPSILON;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
258	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  d0;  [CE]  cannot  find  symbol  d0  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  d0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  d0;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  d0	105	None	replace
259	[BUG]  [BUGGY]  Double  dN  =  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  cPrev  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dN  =  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dN  =  DEFAULT_EPSILON;	  Double    cN    =    d;    	non-compiled	[CE]  cannot  find  symbol  cPrev	80	None	replace
260	[BUG]  [BUGGY]  Double  dN  =  d;  [CE]  cannot  find  symbol  d  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dN  =  d;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dN  =  d;	  Double    cN    =    d;    	non-compiled	[CE]  cannot  find  symbol  d	80	None	replace
261	[BUG]  [BUGGY]  Double  dN  =  dPrev;  [CE]  cannot  find  symbol  cPrev  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dN  =  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dN  =  dPrev;	  Double    cN    =    d;    	non-compiled	[CE]  cannot  find  symbol  cPrev	80	None	replace
262	[BUG]  [BUGGY]  double  cPrev  =  q1;  double  cPrev  =  q1);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  q1;  double  cPrev  =  q1);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    q1;    double  cPrev  =  q1);	  	non-compiled	[CE]  ';'  expected	87	None	add
263	[BUG]  [BUGGY]  double  qN  =  0.0;  [CE]  cannot  find  symbol  cPrev  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  qN  =  0.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  qN  =  0.0;	  double    qPrev    =    0.0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	104	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  2.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  2.0;	  double    cPrev    =    0.0;    	compilable	  [FE]  AssertionError  	8	2	replace
265	[BUG]  [BUGGY]  double  cPrev  =  2.0;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  2.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  2.0;	  double    cPrev    =    0.0;    	compilable	  [FE]  AssertionError  	8	2	replace
266	[BUG]  [BUGGY]  double  cN  =  DEFAULT_EPSILON.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  DEFAULT_EPSILON.doubleValue();  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  DEFAULT_EPSILON.doubleValue();	  double    cN    =    cN;    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
267	[BUG]  [BUGGY]  double  cPrev  =  defN.equals(DeFAULT_EPSILON);  [CE]  cannot  find  symbol  DeFAULT_EPSILON  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  defN.equals(DeFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  defN.equals(DeFAULT_EPSILON);	  double    cPrev    =    dPrev.equals(DeFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  DeFAULT_EPSILON	103	None	replace
268	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(p0,  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(p0,  DEFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(p0,  DEFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
269	[BUG]  [BUGGY]  double  cPrev  =  p0.equals(deFAULT_EPSILON,  dPrev);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0.equals(deFAULT_EPSILON,  dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0.equals(deFAULT_EPSILON,  dPrev);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	17	None	replace
270	[BUG]  [BUGGY]  double  cN  =  a  *  q0;  [CE]  cannot  find  symbol  a  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  a  *  q0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  a  *  q0;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  cannot  find  symbol  a	97	None	replace
271	[BUG]  [BUGGY]  double  cN  =  d0  *  q1;  [CE]  cannot  find  symbol  d0  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  d0  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  d0  *  q1;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  cannot  find  symbol  d0	97	None	replace
272	[BUG]  [BUGGY]  Double  cN  =  dPrev  +  1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  dPrev  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  dPrev  +  1;	  Double    cN    =    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
273	[BUG]  [BUGGY]  Double  cN  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  dPrev  *  DEFAULT_EPSILON;	  Double    cN    =    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	70	None	replace
274	[BUG]  [BUGGY]  int  cPrev  =  dPrev  +  n;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  dPrev  +  n;	  double    cPrev    =    dPrev    +    dPrev;    int    cPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
275	[BUG]  [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  double  cPrev  =  hprev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  hPrev  +  DEFAULT_EPSILON;  double  cPrev  =  hprev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    double  cPrev  =  hprev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	35	None	add
276	[BUG]  [BUGGY]  double  q2  =  0  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  0  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  0  *  q1;	  double    q2    =    d0    *    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
277	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  DEFAULT_EPSILON);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  DEFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON.equals(hPrev,  DEFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(hPrev);    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
278	[BUG]  [BUGGY]  double  dPrev  =  DEFAULT_EPSILON.equals(dPrev);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  DEFAULT_EPSILON.equals(dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  DEFAULT_EPSILON.equals(dPrev);	  double    cPrev    =    dPrev.equals(DEFAULT_EPSILON);    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	14	None	replace
279	[BUG]  [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  DEFAULT_EPSILON.equals(dPrev);	  double    cPrev    =    dPrev.equals(DEFAULT_EPSILON);    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
280	[BUG]  [BUGGY]  double  cN  =  n  +  1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  n  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  n  +  1;	  double    cN    =    n;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	13	None	replace
281	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  dPrev  =  dPrev  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  dPrev  =  dPrev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    double  dPrev  =  dPrev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
282	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  cPrev  =  dprev  *  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  DEFAULT_EPSILON;  double  cPrev  =  dprev  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    double  cPrev  =  dprev  *  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	112	None	add
283	[BUG]  [BUGGY]  double  cPrev  =  a  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  a  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  a  *  DEFAULT_EPSILON;	  double    cPrev    =    dPrev    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  a	113	None	replace
284	[BUG]  [BUGGY]  double  cPrev  =  d0  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  d0  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  d0  *  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  d0  *  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  d0	92	None	replace
285	[BUG]  [BUGGY]  double  cPrev  =  deFAULT_EPSILON.equals(dPrev);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  deFAULT_EPSILON.equals(dPrev);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  deFAULT_EPSILON.equals(dPrev);	  double    cPrev    =    dPrev.equals(deFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	15	None	replace
286	[BUG]  [BUGGY]  double  cPrev  =  dprev  +  p0;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dprev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dprev  +  p0;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dprev    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  dprev	85	None	replace
287	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  /  q1;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
288	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  q1;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	compilable	  [FE]  ConvergenceException  	115	14	replace
289	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  q0;  [CE]  cannot  find  symbol  q0  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  q0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  /  q0;	  double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  q0	115	None	replace
290	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  double  cPrev  =  dprev  +  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  DEFAULT_EPSILON;  double  cPrev  =  dprev  +  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    DEFAULT_EPSILON;    double  cPrev  =  dprev  +  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
291	[BUG]  [BUGGY]  double  d0  =  0.0;  [CE]  cannot  find  symbol  cPrev  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  d0  =  0.0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  d0  =  0.0;	  double    p0    =    0.0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	79	None	replace
292	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  dPrev  =  dPrev  /  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  dPrev  =  dPrev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    double  dPrev  =  dPrev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
293	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  cPrev  =  dprev  /  DEFAULT_EPSILON;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  DEFAULT_EPSILON;  double  cPrev  =  dprev  /  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    DEFAULT_EPSILON;    double  cPrev  =  dprev  /  DEFAULT_EPSILON;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	114	None	add
294	[BUG]  [BUGGY]  Double  dPrev  =  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dPrev  =  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dPrev  =  dPrev;	  Double    hN    =    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	109	None	replace
295	[BUG]  [BUGGY]  Double  dPrevN  =  dPrev;  [CE]  cannot  find  symbol  cPrev  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  dPrevN  =  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  dPrevN  =  dPrev;	  Double    hN    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  cPrev	109	None	replace
296	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  dPrev  =  dPrev  +  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  dPrev  =  dPrev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    double  dPrev  =  dPrev  +  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
297	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  cPrev  =  dprev  +  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  p0;  double  cPrev  =  dprev  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    +    p0;    double  cPrev  =  dprev  +  p0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	65	None	add
298	[BUG]  [BUGGY]  double  cN  =  0;  cPrev  =  0;  [CE]  cannot  find  symbol  cPrev  [FE]              ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  0;  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  0;  cPrev  =  0;	  double    cPrev    =    0;    cPrev    =    0;    	non-compiled	[CE]  cannot  find  symbol  cPrev	21	None	replace
299	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  1;  cPrev  =  0;	  double    cPrev    =    0;    cPrev    =    0;    	compilable	  [FE]  ConvergenceException  	21	14	replace
300	[BUG]  [BUGGY]  double  cPrev  =  1;  cPrev  =  0;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1;  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  1;  cPrev  =  0;	  double    cPrev    =    0;    cPrev    =    0;    	compilable	  [FE]  ConvergenceException  	21	14	replace
301	[BUG]  [BUGGY]  double  q2  =  d0  *  q0;  [CE]  cannot  find  symbol  d0  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  d0  *  q0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  d0  *  q0;	  double    q2    =    a    *    q0;    	non-compiled	[CE]  cannot  find  symbol  d0	93	None	replace
302	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  dPrev  =  dPrev  /  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  dPrev  =  dPrev  /  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    double  dPrev  =  dPrev  /  dPrev;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	94	None	add
303	[BUG]  [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dprev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  /  dPrev;  double  cPrev  =  dPrev  /  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    dPrev    /    dPrev;    double  cPrev  =  dPrev  /  dprev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	94	None	add
304	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  double  cPrev  =  DEFAULT_EPSILON  *  dprev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  *  dPrev;  double  cPrev  =  DEFAULT_EPSILON  *  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    DEFAULT_EPSILON    *    dPrev;    double  cPrev  =  DEFAULT_EPSILON  *  dprev;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
305	[BUG]  [BUGGY]  double  dPrev  =  p0;  Double  cPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  p0;  Double  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  p0;  Double  cPrev  =  p0;	  double    cPrev    =    p0;    Double    cPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
306	[BUG]  [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  p0;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  p0;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
307	[BUG]  [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  cPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  cPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  cPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  dPrev  +  1;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dPrev);    	compilable	  [FE]  AssertionError  	27	2	replace
309	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  1;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  1;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dPrev);    	compilable	  [FE]  AssertionError  	27	2	replace
310	[BUG]  [BUGGY]  double  cN  =  p0  +  q2;  [CE]  cannot  find  symbol  q2  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  p0  +  q2;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  p0  +  q2;	  double    cN    =    p0    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	102	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  DEFAULT_EPSILON  +  q1;	  double    cPrev    =    DEFAULT_EPSILON    +    p0;    	compilable	  [FE]  AssertionError  	38	2	replace
312	[BUG]  [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  DEFAULT_EPSILON  +  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  DEFAULT_EPSILON  +  q1;	  double    cPrev    =    DEFAULT_EPSILON    +    p0;    	compilable	  [FE]  AssertionError  	38	2	replace
313	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  dPrev  +  n;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  AssertionError  	26	2	replace
314	[BUG]  [BUGGY]  Double  cPrev  =  dPrev  +  n;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  +  n;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev  +  n;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  AssertionError  	26	2	replace
315	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  q1;  [CE]  cannot  find  symbol  a  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  q1  +  b  *  q1;	  double    q2    =    a    *    q0    +    b    *    q1;    	non-compiled	[CE]  cannot  find  symbol  a	83	None	replace
316	[BUG]  [BUGGY]  double  q2  =  a  *  dPrev  +  b  *  q1;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  dPrev  +  b  *  q1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  dPrev  +  b  *  q1;	  double    q2    =    a    *    q0    +    b    *    q1;    	non-compiled	[CE]  cannot  find  symbol  a	83	None	replace
317	[BUG]  [BUGGY]  double  cN  =  small;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  small;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  small;	  double    cN    =    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	108	None	replace
318	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  hN  +  b  *  dPrev;	  double    q2    =    a    *    p0    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  a	24	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  epsilon;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	double  cPrev  =  epsilon;	  double    cPrev    =    dPrev;    Double    cPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	44	2	replace
320	[BUG]  [BUGGY]  double  cPrev  =  epsilon;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  epsilon;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  epsilon;	  double    cPrev    =    dPrev;    Double    cPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	44	2	replace
321	[BUG]  [BUGGY]  Double  cPrev  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev.doubleValue();  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev.doubleValue();	  double    cPrev    =    dPrev;    Double    cPrev    =    dPrev;    	non-compiled	[CE]  double  cannot  be  dereferenced	44	None	replace
322	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  cPrev  =  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  n  =  DEFAULT_EPSILON;  cPrev  =  DEFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	n  =  DEFAULT_EPSILON;  cPrev  =  DEFAULT_EPSILON;	  double    cPrev    =    DEFAULT_EPSILON;    cPrev    =    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
323	[BUG]  [BUGGY]  Double  hN  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  hN  =  dPrev.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  hN  =  dPrev.doubleValue();	  Double    hN    =    dPrev;    	non-compiled	[CE]  double  cannot  be  dereferenced	109	None	replace
324	[BUG]  [BUGGY]  Double  hN  =  dPrev  +  1;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  hN  =  dPrev  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  hN  =  dPrev  +  1;	  Double    hN    =    dPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	109	None	replace
325	[BUG]  [BUGGY]  double  cPrev  =  deFAULT_EPSILON  +  dprev;  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  deFAULT_EPSILON  +  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  deFAULT_EPSILON  +  dprev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	81	None	replace
326	[BUG]  [BUGGY]  double  hPrev  =  hPrev.equals(DEFAULT_EPSILON);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hPrev  =  hPrev.equals(DEFAULT_EPSILON);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hPrev  =  hPrev.equals(DEFAULT_EPSILON);	  double    cPrev    =    DEFAULT_EPSILON.equals(hPrev);    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
327	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	add	Double  cPrev  =  dPrev  *  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  ConvergenceException  	26	14	replace
328	[BUG]  [BUGGY]  Double  cPrev  =  dPrev  *  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cPrev  =  dPrev  *  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cPrev  =  dPrev  *  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    Double    cPrev    =    dPrev    +    dPrev;    	compilable	  [FE]  ConvergenceException  	26	14	replace
329	[BUG]  [BUGGY]  double  cPrev  =  deFAULT_EPSILON  +  dPrev;  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  deFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  deFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	39	None	replace
330	[BUG]  [BUGGY]  double  cPrev  =  dPrev  +  deFAULT_EPSILON;  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  +  deFAULT_EPSILON;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  +  deFAULT_EPSILON;	  double    cPrev    =    hPrev    +    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	36	None	replace
331	[BUG]  [BUGGY]  double  cPrev  =  dPrev  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev  *  dprev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev  *  dprev;	  double    cPrev    =    dPrev    +    dPrev;    double    cPrev    =    dPrev    +    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	105	None	replace
332	[BUG]  [BUGGY]  double  q2  =  1.0e;  [CE]  malformed  floating  point  literal  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  1.0e;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  1.0e;	  double    q2    =    1.0f;    	non-compiled	[CE]  malformed  floating  point  literal	75	None	replace
333	[BUG]  [BUGGY]  double  q2  =  0.5  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  0.5  *  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  0.5  *  dPrev;	  double    q2    =    0.5;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
334	[BUG]  [BUGGY]  double  qN  =  dPrev  *  q1;  [CE]  cannot  find  symbol  cPrev  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  qN  =  dPrev  *  q1;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  qN  =  dPrev  *  q1;	  double    cN    =    a    *    q1;    	non-compiled	[CE]  cannot  find  symbol  cPrev	97	None	replace
335	[BUG]  [BUGGY]  double  q2  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  DEFAULT_EPSILON  +  b  *  DEFAULT_EPSILON;	  double    q2    =    a    *    q1    +    b    *    DEFAULT_EPSILON;    	non-compiled	[CE]  cannot  find  symbol  a	89	None	replace
336	[BUG]  [BUGGY]  double  cPrev  =  dPrev.equals(small);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev.equals(small);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev.equals(small);	  double    cPrev    =    dPrev.equals(DeFAULT_EPSILON);    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
337	[BUG]  [BUGGY]  double  dPrev  =  0;  int  cPrev  =  0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  0;  int  cPrev  =  0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  0;  int  cPrev  =  0;	  double    cPrev    =    0;    int    cPrev    =    0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	20	None	replace
338	[BUG]  [BUGGY]  double  qN  =  dPrev;  [CE]  cannot  find  symbol  cPrev  [FE]                  AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  qN  =  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  qN  =  dPrev;	  double    cN    =    q1;    	non-compiled	[CE]  cannot  find  symbol  cPrev	99	None	replace
339	[BUG]  [BUGGY]  double  q2  =  a  *  dPrev  +  b  *  p0;  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  q2  =  a  *  dPrev  +  b  *  p0;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  q2  =  a  *  dPrev  +  b  *  p0;	  double    q2    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  cannot  find  symbol  a	47	None	replace
340	[BUG]  [BUGGY]  double  cPrev  =  dPrev.equals(hN);  [CE]  cannot  find  symbol  hN  [FE]                    AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev.equals(hN);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev.equals(hN);	  double    cPrev    =    dPrev.equals(deFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  hN	15	None	replace
341	[BUG]  [BUGGY]  Double  cN  =  p0  +  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  Double  cN  =  p0  +  dPrev;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	Double  cN  =  p0  +  dPrev;	  Double    cN    =    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	72	None	replace
342	[BUG]  [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	int  cPrev  =  DEFAULT_EPSILON  +  dPrev;  cPrev  =  DEFAULT_EPSILON  +  dPrev;	  double    cPrev    =    DEFAULT_EPSILON    +    dPrev;    cPrev    =    DEFAULT_EPSILON    +    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
343	[BUG]  [BUGGY]  double  hPrev  =  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  hPrev  =  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  hPrev  =  dPrev;	  double    cPrev    =    hN;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
344	[BUG]  [BUGGY]  double  p0  =  p0;  cPrev  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  p0  =  p0;  cPrev  =  p0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  p0  =  p0;  cPrev  =  p0;	  double    cPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
345	[BUG]  [BUGGY]  double  cPrev  =  1.0;  double  cPrev  =  0.0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  1.0;  double  cPrev  =  0.0;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    1.0;    double  cPrev  =  0.0;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
346	[BUG]  [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  0.00;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  0.0;  double  cPrev  =  0.00;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double    cPrev    =    0.0;    double  cPrev  =  0.00;	  	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
347	[BUG]  [BUGGY]  double  cPrev  =  dPrev.equals(DEFAULT_EPSILON,  p0);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  dPrev.equals(DEFAULT_EPSILON,  p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  dPrev.equals(DEFAULT_EPSILON,  p0);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
348	[BUG]  [BUGGY]  double  cPrev  =  p0.equals(deFAULT_EPSILON,  p0);  [CE]  cannot  find  symbol  deFAULT_EPSILON  [FE]                          AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cPrev  =  p0.equals(deFAULT_EPSILON,  p0);  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cPrev  =  p0.equals(deFAULT_EPSILON,  p0);	  double    cPrev    =    DEFAULT_EPSILON.equals(dPrev,    p0);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_EPSILON	17	None	replace
349	[BUG]  [BUGGY]  double  dPrev  =  dPrev  +  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  dPrev  +  dPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  dPrev  +  dPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
350	[BUG]  [BUGGY]  double  dPrev  =  dPrev  +  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  dPrev  =  dPrev  +  cPrev;  [BUGGY]      double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  dPrev  =  dPrev  +  cPrev;	  double    cPrev    =    dPrev    +    dPrev;    double    dPrev    =    dPrev    +    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
351	[BUG]  [BUGGY]  double  cN  =  dPrev,  p0.doubleValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev,  p0.doubleValue();  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev,  p0.doubleValue();	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	101	None	replace
352	[BUG]  [BUGGY]  double  cN  =  dPrev.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;      [BUGGY]  double  cN  =  dPrev.doubleValue()  +  1;  [BUGGY]      double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	136	136	2	replace	double  cN  =  dPrev.doubleValue()  +  1;	  double    cN    =    dPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
