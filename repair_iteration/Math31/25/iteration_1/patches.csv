bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
2	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
3	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  cN;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  hN  +  b  *  dPrev;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  cN  +  b  *  dPrev;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  p0;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  p0;	      double    cN    =    a    *    q2    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	15	2	replace
9	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	15	2	replace
10	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
11	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
12	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
13	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q1;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hPrev  +  b  *  q1;	      double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hPrev  +  b  *  q0;	      double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q1  +  b  *  q2;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  q2;	      double    cN    =    a    *    hPrev    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
17	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	14	None	add
18	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
19	[BUG]  [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	        double    cN2    =    a    *    q1    +    b    *    dPrev;    double  cN2  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)	16	None	add
20	[BUG]  [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	        double    cN2    =    a    *    q1    +    b    *    dPrev;    Double  cN2  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)	16	None	add
21	[BUG]  [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2)  =  a  *  q1  +  b  *  dPrev;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2)  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	        double    cN2    =    a    *    q1    +    b    *    dPrev;    double  cN2)  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  ';'  expected	16	None	add
22	[BUG]  [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2  =  a  *  q1  +  b  *  dprev;  [CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]      double  cN2  =  a  *  q1  +  b  *  dPrev;  double  cN2  =  a  *  q1  +  b  *  dprev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	        double    cN2    =    a    *    q1    +    b    *    dPrev;    double  cN2  =  a  *  q1  +  b  *  dprev;	  	non-compiled	[CE]  variable  cN2  is  already  defined  in  method  evaluate(double,double,int)	16	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
24	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
26	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
28	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
29	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q2  +  b  *  cN;	      double    q2    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q2  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q2  +  b  *  p0;	      double    q2    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
32	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
33	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	9	2	replace
35	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	9	2	replace
36	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN2  =  a  *  q1  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  p0;	      double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  double  cN2  =  a  *  hN  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hN  +  b  *  dPrev;	      double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
38	[BUG]  [BUGGY]  double  cN2  =  a  *  cN  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  cN  +  b  *  dPrev;	      double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
39	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
40	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
41	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  dPrev;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  double  cN  =  a  *  q2  +  b  *  hPrev;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q2  +  b  *  hPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q2  +  b  *  hPrev;	      double    cN    =    a    *    hPrev    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hN  +  b  *  q2;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  q2;	      double    cN    =    a    *    hPrev    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q2  +  b  *  hN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q2  +  b  *  hN;	      double    q2    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  dPrev;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
47	[BUG]  [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
49	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
50	[BUG]  [BUGGY]  double  cN  =  a  *  q2  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q2  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q2  +  b  *  q0;	      double    cN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
52	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
54	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
56	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
57	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
58	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN2  =  a  *  q1  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  q0;	      double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
59	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN2  =  a  *  q1  +  b  *  hN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  hN;	      double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
60	[BUG]  [BUGGY]  double  qN  =  a  *  q2  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  qN  =  a  *  q2  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q2  +  b  *  dPrev;	      double    cN    =    a    *    q2    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  p0;	      double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  q0;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  hN;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  double  cN  =  a  *  q2  +  b  *  d0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  q2  +  b  *  d0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q2  +  b  *  d0;	      double    cN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
66	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
68	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
70	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	13	2	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	9	2	replace
72	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	9	2	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
74	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	7	2	replace
75	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  qN  =  a  *  q1  +  b  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q1  +  b  *  p0;	      double    cN    =    a    *    q2    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  d0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  d0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hPrev  +  b  *  d0;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q1))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	15	2	replace
78	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;    [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]    double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q1))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	15	2	replace
