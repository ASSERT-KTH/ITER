bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
2	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	25	None	add
3	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
4	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
5	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    If(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	69	None	add
6	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(c1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(c1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(c1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
7	[BUG]  [BUGGY]  double  cN2  =  a  *  hN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hN  +  b  *  q1;	  double    cN2    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
8	[BUG]  [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hPrev  +  b  *  hN;	  double    cN2    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
9	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  cN  +  b  *  q1;	  double    q2    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
11	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
12	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
13	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	65	None	add
14	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q2))    {    if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
15	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  If  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  If  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q2))    {    If  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
16	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  cN  +  b  *  p0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	12	2	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	12	2	replace
19	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q1))    {    if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	add
20	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  If  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  If  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q1))    {    If  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
21	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  hN  +  b  *  p0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
24	[BUG]  [BUGGY]  double  qN  =  a  *  hPrev  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  hPrev  +  b  *  q2;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  hPrev  +  b  *  q2;	  double    cN    =    a    *    hN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
25	[BUG]  [BUGGY]  Double  cN2  =  a  *  q1  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  Double  cN2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	Double  cN2  =  a  *  q1  +  b  *  dPrev;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    Double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  cN2  =  a  *  q1  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  cN2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	cN2  =  a  *  q1  +  b  *  dPrev;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    Double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
28	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
30	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
32	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
34	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
36	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)&&  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)&&  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
38	[BUG]  [BUGGY]  if(Double.isNaN(cN)&&  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)&&  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)&&  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	72	2	replace
41	[BUG]  [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q1)||    Double.isInfinite(q2))    {    if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
42	[BUG]  [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q1)||    Double.isInfinite(q2))    {    If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	46	None	add
43	[BUG]  [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(c1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(c1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q1)||    Double.isInfinite(q2))    {    if  (Double.isNaN(c1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
45	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(cN))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
47	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(cN))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q1))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
49	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isNaN(q1))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
51	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
52	[BUG]  [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    If    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
53	[BUG]  [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    If    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(b)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	10	2	replace
55	[BUG]  [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(b)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	10	2	replace
56	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
57	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  If(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    If(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	53	None	add
58	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q3))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q3))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q3))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
59	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hPrev  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q1))    {    if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
61	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q1))    {    If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	48	None	add
62	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  d0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  d0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  d0;	  double    cN    =    a    *    q2    +    b    *    d0;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
64	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(b)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(b)||  Double.isInfinite(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
66	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(b)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(b)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(b)||  Double.isInfinite(q1))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	39	2	replace
68	[BUG]  [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	39	2	replace
69	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(cN))    {    if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
70	[BUG]  [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)||    Double.isInfinite(cN))    {    If  (Double.isNaN(cN)||  Double.isInfinite(cN))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
71	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1))    {    if(Double.isNaN(q2)||  Double.isNaN(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
72	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  If(Double.isNaN(q2)||  Double.isNaN(q1))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1))  {  If(Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1))    {    If(Double.isNaN(q2)||  Double.isNaN(q1))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
73	[BUG]  [BUGGY]  double  cN2  =  a  *  hN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hN  +  b  *  p0;	  double    cN2    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
75	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q1))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
77	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(q1))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
78	[BUG]  [BUGGY]  double  cN2  =  a  *  cN  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  cN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  cN  +  b  *  p0;	  double    cN2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
79	[BUG]  [BUGGY]  double  cN2  =  a  *  cPrev  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  cPrev  +  b  *  dPrev;	  double    cN2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
80	[BUG]  [BUGGY]  double  cN2  =  a  *  cN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  cN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  cN  +  b  *  q1;	  double    cN2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
81	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
82	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  If(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  If(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    If(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
83	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dprev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  dprev;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    double    cN2    =    a    *    q1    +    b    *    dprev;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  cN2  =  a  *  q1  +  b  *  dprev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  cN2  =  a  *  q1  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	cN2  =  a  *  q1  +  b  *  dprev;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    double    cN2    =    a    *    q1    +    b    *    dprev;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	57	2	replace
86	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	57	2	replace
87	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  q0;	  double    cN    =    a    *    q1    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
89	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
91	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
93	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
94	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
95	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
96	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    if(Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
97	[BUG]  [BUGGY]  double  qN  =  a  *  q2  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q2  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q2  +  b  *  p0;	  double    qN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
98	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q1  +  b  *  dPrev;	  double    qN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
99	[BUG]  [BUGGY]  double  qN  =  a  *  q2  +  b  *  cN;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q2  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q2  +  b  *  cN;	  double    qN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
100	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
101	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
102	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    If(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	27	None	add
103	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
104	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(c2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  if(Double.isNaN(c2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    if(Double.isNaN(c2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
105	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  If(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  If(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    If(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  	non-compiled	[CE]  ';'  expected	51	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(b)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	31	2	replace
107	[BUG]  [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(b)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	31	2	replace
108	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  hPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q1  +  b  *  hPrev;	  double    cN    =    a    *    q2    +    b    *    hPrev;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
109	[BUG]  [BUGGY]  double  cN2)  =  a  *  q1  +  b  *  dPrev;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2)  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2)  =  a  *  q1  +  b  *  dPrev;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    double    cN2)    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	21	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	11	2	replace
111	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	11	2	replace
112	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  p0  +  b  *  hN;	  double    cN    =    a    *    hN    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
113	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
114	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(c1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(c1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    if(Double.isNaN(c1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
115	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q3))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q3))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q3))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
116	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  hN  +  b  *  q1;	  double    q2    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
117	[BUG]  [BUGGY]  double  cN  =  a  *  q2  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q2  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q2  +  b  *  q1;	  double    cN    =    a    *    q2    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
118	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
119	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(c1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(c1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(c1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
120	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  If(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    If(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
121	[BUG]  [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hPrev  +  b  *  dPrev;	  double    cN2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
122	[BUG]  [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hPrev  +  b  *  q1;	  double    cN2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
123	[BUG]  [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  hPrev  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  hPrev  +  b  *  p0;	  double    cN2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
124	[BUG]  [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(cN)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    If    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	54	2	replace
126	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	54	2	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(a)||  Double.isInfinite(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if  (Double.isNaN(a)||  Double.isInfinite(cN))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(cN))    {    	compilable	  [FE]  AssertionError  	9	2	replace
128	[BUG]  [BUGGY]  if  (Double.isNaN(a)||  Double.isInfinite(cN))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(a)||  Double.isInfinite(cN))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if  (Double.isNaN(a)||  Double.isInfinite(cN))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(cN))    {    	compilable	  [FE]  AssertionError  	9	2	replace
129	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q1  +  b  *  q2;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q1  +  b  *  q2;	  double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
130	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  cN;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q1  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q1  +  b  *  cN;	  double    qN    =    a    *    q1    +    b    *    p0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	66	2	replace
132	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	66	2	replace
133	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||    Double.isNaN(q2))    {    if(Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
134	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  If(Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2))  {  If(Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||    Double.isNaN(q2))    {    If(Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  ';'  expected	71	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
136	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
138	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
140	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1  -  q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q1  -  q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
142	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1  -  q2)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1  -  q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q1  -  q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    	compilable	  [FE]  AssertionError  	68	2	replace
143	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  cN  +  b  *  q0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	24	2	replace
145	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	24	2	replace
146	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
148	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(cN)||    Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	74	2	replace
149	[BUG]  [BUGGY]  double  qN  =  a  *  q2  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q2  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q2  +  b  *  q0;	  double    qN    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
150	[BUG]  [BUGGY]  If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(q1)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    If    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
151	[BUG]  [BUGGY]  If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    If    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
152	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q2  +  b  *  cN  +  1;	  double    q2    =    a    *    q2    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
154	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
156	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1))    {    	compilable	  [FE]  AssertionError  	78	2	replace
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)&&    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	35	2	replace
158	[BUG]  [BUGGY]  if(Double.isNaN(q2)&&  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)&&    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	35	2	replace
159	[BUG]  [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q3))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q2)||  Double.isInfinite(q1))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q3))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q2)||    Double.isInfinite(q1))    {    if  (Double.isNaN(q2)||  Double.isInfinite(q3))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
160	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q2))    {    if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
161	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
162	[BUG]  [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(q1)||  Double.isInfinite(q2))  {  if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(q1)||    Double.isInfinite(q2))    {    if  (Double.isNaN(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
163	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q3))  {  [CE]  cannot  find  symbol  q3  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q3))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q3))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  cannot  find  symbol  q3	57	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	66	2	replace
165	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	66	2	replace
166	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(c2))  {  [CE]  cannot  find  symbol  c2  [FE]        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(c2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isInfinite(c2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	non-compiled	[CE]  cannot  find  symbol  c2	10	None	replace
167	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  q1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  q1;	  double    cN    =    a    *    hN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
168	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  q0;	  double    cN    =    a    *    hN    +    b    *    q2;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
170	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isNaN(q2))    {    If(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isNaN(q2))  {	  	non-compiled	[CE]  ';'  expected	67	None	add
171	[BUG]  [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if  (Double.isNaN(cN)&&  Double.isInfinite(q1))  {  if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if    (Double.isNaN(cN)&&    Double.isInfinite(q1))    {    if  (Double.isNaN(cN)&&  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)&&    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	2	2	replace
173	[BUG]  [BUGGY]  if(Double.isNaN(q1)&&  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)&&  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)&&  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)&&    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	2	2	replace
174	[BUG]  [BUGGY]  If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	If  (Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    If    (Double.isNaN(cN)||    Double.isInfinite(q1))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
175	[BUG]  [BUGGY]  double  cN2  =  a  *  cN  +  b  *  d0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  cN  +  b  *  d0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  cN  +  b  *  d0;	  double    cN2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
176	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  hN  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
177	[BUG]  [BUGGY]  double  cN  =  a  *  q2  +  b  *  d1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  q2  +  b  *  d1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  q2  +  b  *  d1;	  double    cN    =    a    *    q2    +    b    *    d0;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
178	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  If(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  If(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    If(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  ';'  expected	55	None	add
179	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  d0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  d0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN  =  a  *  hN  +  b  *  d0;	  double    cN    =    a    *    hPrev    +    b    *    d0;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
181	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
182	[BUG]  [BUGGY]  double  cN2  =  a  *  q2  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  q2  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q2  +  b  *  dPrev;	  double    cN2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
183	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
184	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	12	2	replace
185	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isInfinite(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q1))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	12	2	replace
186	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  cN  +  p0;	  double    q2    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
187	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  cN  +  1;	  double    q2    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
188	[BUG]  [BUGGY]  double  q2  =  a  *  q3  +  b  *  dPrev;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  q3  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q3  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isNaN(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    If    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	40	2	replace
190	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isNaN(q1))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isNaN(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isNaN(q1))  {	  if    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    If    (Double.isNaN(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	40	2	replace
191	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
193	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	70	2	replace
194	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
195	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	52	2	replace
197	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	52	2	replace
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
199	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
200	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
201	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	28	2	replace
202	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q1)||  Double.isInfinite(q2))  {  if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||    Double.isNaN(q1)||    Double.isInfinite(q2))    {    if(Double.isNaN(cN)||  Double.isNaN(q2)||  Double.isInfinite(q2))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
203	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  q2  =  a  *  q1  +  b  *  dPrev0;	  double    q2    =    a    *    q1    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
204	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  b  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isNaN(q2)||  b  <  =  0)  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isNaN(q2)||  b  <  =  0)  {	  if(Double.isNaN(cN)||    Double.isNaN(q2))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
206	[BUG]  [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(a)||  Double.isNaN(q2)||  Double.isInfinite(cN)||  Double.isInfinite(q2))  {	  if(Double.isNaN(a)||    Double.isInfinite(cN)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	26	2	replace
207	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q2;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q2;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q2;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    Double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
208	[BUG]  [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  cN2  =  a  *  q1  +  b  *  dPrev;  Double  cN2  =  a  *  q1  +  b  *  q0;	          double    cN2    =    a    *    q1    +    b    *    dPrev;    Double    cN2    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
209	[BUG]  [BUGGY]  double  qN  =  a  *  q1  +  b  *  q0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  double  qN  =  a  *  q1  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	double  qN  =  a  *  q1  +  b  *  q0;	  double    cN    =    a    *    q2    +    b    *    q0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    if    (Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	18	2	replace
211	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(q2)||  Double.isInfinite(q1))  {	  if    (Double.isNaN(q2)||    Double.isInfinite(q2))    {    if    (Double.isNaN(q2)||    Double.isInfinite(q1))    {    	compilable	  [FE]  AssertionError  	18	2	replace
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
213	[BUG]  [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
215	[BUG]  [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q1)||  Double.isNaN(cN)||  Double.isInfinite(q2)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q1)||    Double.isInfinite(q2)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	56	2	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	add	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	54	2	replace
217	[BUG]  [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;      [BUGGY]  if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {  [BUGGY]      double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  scaleFactor  *=  scale;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	145	145	2	replace	if(Double.isNaN(q2)||  Double.isNaN(cN)||  Double.isInfinite(q1)||  Double.isInfinite(q2))  {	  if(Double.isNaN(q2)||    Double.isInfinite(q1)||    Double.isInfinite(q2))    {    	compilable	  [FE]  AssertionError  	54	2	replace
