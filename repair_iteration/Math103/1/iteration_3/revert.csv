projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.log(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(mean)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/cumulativeProbability;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(x*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(x*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(x*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)*Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.exp(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.log(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x);doublemean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x);Doublemean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x);doublemeans=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x);longmean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/2.0;doublemean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/2.0;Doublemean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/2.0;longmean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/standardDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(x*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(message*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(x*Math.log(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.max(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/mean);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/standardDeviation,sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.doubleValue(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/standardDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/msg;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(sd*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.log(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.log(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.rint(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)*Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)*Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x-standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/2.0)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(normalDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(1)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(normalDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(2)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(x*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/2.0;Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/MILLIS;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/dev;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(message-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_MESSAGE;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_SYNTHETIC;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0-standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.min(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.random()/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation/Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)*Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/mean;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(mean)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x/Math.log(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.log(Math.log(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(message*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(x*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x/2.0));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0,sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0,standardDeviation/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x)/2.0,standardDeviation+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x/mean)/Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/Math.sqrt(2.0,standardDeviation)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/Math.sqrt(2.0),standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.log(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.log(Math.log(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.rint(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.log(Math.PI/2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.log(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/mean+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(maxDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(x*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(message*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(sd)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/sd+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sin(Math.log(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.log(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.abs(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109nullmean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109longmean=Math.sqrt(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(maxDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/StandardDistributionImpl.DEFAULT;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(Math.abs(x)/Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(Math.abs(x)-Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));(message-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(message-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)/2.0,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)/x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)/sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.max(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sin(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));(standardDeviation-mean)/(sd*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));(standardDeviation-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd)/standardDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x-standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(1))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.random()*2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)/Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sin(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0,Math.abs(mean)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0,Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0,Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x/1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x*1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x+2);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/sd,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/sd,sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/standardDeviation,Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/mean,sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(sd/Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(mean)/Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(message));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.rint(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x/Math.rint(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}else{((x-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));}else{((x-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/sd+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)-standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(Math.abs(x)/Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(Math.abs(x)-Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(Math.abs(sd)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(maxDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation*Math.sqrt(2.0,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation/Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation/Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/sd+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x-mean)/(standardDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/MILLIS+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-2);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(message*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x-mean)/(message*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/2.0;Math.sqrt(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/2.0;Math.abs(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/2.0;Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.pow(10,sd)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.pow(10,x+1)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(NormalDistributionImpl.doubleValue(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.doubleValue(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.doubleValue(x),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation*Math.sqrt(2.0,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_MESSAGE+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/NormalDistributionImpl.DEFAULT_MESSAGE;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_MESSAGE+sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(mean);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(message);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(Math.sqrt(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(sd*Math.log(2.0))));(mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x/mean)/(standardDeviation*Math.log(2.0))));(mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.sqrt(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()*x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.log(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(message)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()*x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(NormalDistributionImpl.standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.standardDeviation),sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)-Math.abs(NormalDistributionImpl.standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/NormalDistributionImpl.DEFAULT;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109longmean=Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0*standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)/2.0-standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/2.0)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/2.0)/(sd*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return2.0*(1.0+Erf.erf((x-mean)/2.0)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/standardDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(sd)/standardDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.exp(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(Math.exp(x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean/Math.log(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean/Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean/x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(msg)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/msg+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x*2.0));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x/2.0),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x/2.0));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,y)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.pow(10,x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(Math.pow(10,x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(normalDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.rint(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.ceil(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.floor(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.sqrt(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109nullmean=Math.sqrt(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.sqrt(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd-x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd*x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(maxDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.min(Math.abs(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)*Math.abs(x-mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0,sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0,standardDeviation/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0,standardDeviation+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(message*Math.log(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x-mean)/(standardDeviation*Math.sqrt(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)*Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x/standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x*standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd-standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()*2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()/2.0,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.random()+1.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(sd,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.rint(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(standardDeviation*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(x*Math.log(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.sqrt(2.0))
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x-mean)/(normalDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_SYNTHETIC+1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/NormalDistributionImpl.DEFAULT_SYNTHETIC;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT_SYNTHETIC+sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.rint(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.max(Math.abs(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.max(Math.abs(x)/2.0,1.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109nullmean=Math.abs(x);doublemeans=Math.abs(message);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109nullmean=Math.abs(x);doublemeans=Math.abs(mean);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109nullmean=Math.abs(x);doublemeans=Math.abs(sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(dev)/x;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)/standardDeviation,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)-Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}else{((x-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<0.0){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));((x-mean)/(standardDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));((x-mean)/(standardDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,x)/2.0).doubleValue();
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,X)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)*Math.log(Math.abs(x))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x/mean)/2.0)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(1.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)-Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(mean)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.random();
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null*mean)/(x*Math.sqrt(1.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109longmean=Math.abs(x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<sd){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}else{(mean)/standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.cos(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.sqrt(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(y)/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)/standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(standardDeviation*Math.sqrt(2.0));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/normalDeviation;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.exp(x)/2.0).doubleValue();
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.exp(x)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.sqrt(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(Math.abs(sd)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}else{standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x>mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)-Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x/Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x/2.0)-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0-mean);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0f);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.max(Math.abs(x)/2.0,StandardDistributionImpl.DEFAULT);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x)/mean;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.log(x)/StandardDistributionImpl.DEFAULT+sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x-standardDeviation)-1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(x/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.log(0.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x+1.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.min(Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(message-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));message-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(x)/2.0;Math.log(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.random()/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/Math.abs(Normalization.NaN));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.min(sd,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.sqrt(Math.log(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.pow(10,x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.random()));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.min(sd,x)/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/2.0L;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/2.0-1;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null*mean)/(x*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null/mean)/(standardDeviation*Math.sqrt(2)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(standardDeviation-mean)/(standardDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(Math.log(2.0)*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation=Math.log(2.0)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(x)-Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublestandardDeviation*Math.sqrt(2.0,mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));}else{thrownewIllegalArgumentException("");}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(mean)/x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(0,x);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(message*Math.cos(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x+sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x-mean)*Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/2;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.random()/StandardDistributionImpl.DEFAULT;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<sd){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(mean)/standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x>mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(message-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(message-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));((x-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109((x-mean)/(standardDeviation*Math.cos(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x/Math.log(Math.PI/sd)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x-mean)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/2.0,Math.abs(standardDeviation));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/2.0;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.random()/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x/mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.log(x)),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(mean*Math.cos(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(sd)/2.0,standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)*Math.log(Math.abs(x)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(x*Math.log(Math.log(x)),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(sd)/sd);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/StandardDistributionImpl.DEFAULT_SYNTHETIC;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(null-mean)/(standardDeviation*Math.sqrt(0,1)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/sd;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd)/msg;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(sd-standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.rint(mean)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x/2.0)+1);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(x)/StandardDistributionImpl.DEFAULT_MESSAGE;
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(mean)-Math.abs(sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation-mean)/(standardDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(Math.log(2.0))));(standardDeviation-mean)/(standardDeviation*Math.log(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(standardDeviation-mean)/(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0)));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.sqrt(2.0))));(1.0+Erf.erf((x-mean)/(normalDeviation*Math.log(2.0))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)-Math.abs(NormalDistributionImpl.doubleValue(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x-sd));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.sqrt(Math.pow(10,x)/2.0),standardDeviation);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109return0.5*(1.0+Erf.erf((x/mean)/(standardDeviation*Math.log(2.0))));(standardDeviation*Math.sqrt(2.0)));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109Doublemean=Math.abs(Math.abs(mean)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(message)-Math.abs(x));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.abs(Math.abs(x)/Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109doublemean=Math.cos(Math.pow(10,x)/2.0);
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(Math.abs(x)/Math.abs(standardDeviation),Math.abs(mean));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<sd){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2))));}
projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java109if(x<mean){return0.5*(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0))));(1.0+Erf.erf((x-mean)/(standardDeviation*Math.log(2.0)));}
