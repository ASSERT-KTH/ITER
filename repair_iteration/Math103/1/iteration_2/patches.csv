bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  sd);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.log(x)/  2.0,  sd);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  /  2.0);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  /  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  /  2.0);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  +  1);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  +  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.log(x)/  2.0,  standardDeviation  +  1);	  double    mean    =    Math.sqrt(Math.log(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
5	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0,  standardDeviation)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0,  standardDeviation)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0,  standardDeviation)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
6	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0),  standardDeviation));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0),  standardDeviation));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  Math.sqrt(2.0),  standardDeviation));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
7	[BUG]  [BUGGY]  (Math.log(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.log(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.log(x)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
8	[BUG]  [BUGGY]  (x  *  Math.log(Math.log(mean)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.log(Math.log(mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.log(Math.log(mean)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
9	[BUG]  [BUGGY]  (Math.rint(x)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.rint(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.rint(x)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
10	[BUG]  [BUGGY]  (x  *  Math.log(Math.PI  /  2.0)));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.log(Math.PI  /  2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.log(Math.PI  /  2.0)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
11	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
13	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
14	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
15	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(1.0)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.log(1.0)));	  (null    -    mean)/(x    *    Math.log(1.0)));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  (Math.abs(x)/  mean  +  1);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  mean  +  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  mean  +  1);	  (Math.abs(x)/    mean);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
17	[BUG]  [BUGGY]  (x  *  Math.sqrt(1.0)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.sqrt(1.0)));	  (standardDeviation    *    Math.sqrt(1.0)));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
18	[BUG]  [BUGGY]  (mean  *  Math.sqrt(1.0)));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.sqrt(1.0)));	  (standardDeviation    *    Math.sqrt(1.0)));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
19	[BUG]  [BUGGY]  (maxDeviation  *  Math.sqrt(1.0)));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (maxDeviation  *  Math.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(maxDeviation  *  Math.sqrt(1.0)));	  (standardDeviation    *    Math.sqrt(1.0)));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
20	[BUG]  [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(standardDeviation  *  Math.sqrt(2.0)));	  (null    /    mean)/(x    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
21	[BUG]  [BUGGY]  (null  /  mean)/(x  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(x  *  Math.log(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(x  *  Math.log(2.0)));	  (null    /    mean)/(x    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
22	[BUG]  [BUGGY]  (null  /  mean)/(message  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(message  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(message  *  Math.sqrt(2.0)));	  (null    /    mean)/(x    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
23	[BUG]  [BUGGY]  double  mean  =  Math.log(sd)/  x;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(sd)/  x;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(sd)/  x;	  double    mean    =    Math.log(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  sd  +  1;  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  sd  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  sd  +  1;	  double    mean    =    Math.log(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  sd;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x)/  sd;	  double    mean    =    Math.log(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  double  mean  =  Math.sin(Math.log(x)/  2.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sin(Math.log(x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sin(Math.log(x)/  2.0);	  double    mean    =    Math.cos(Math.log(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.log(x)/  2.0,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.log(x)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(Math.log(x)/  2.0,  standardDeviation);	  double    mean    =    Math.cos(Math.log(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.abs(x)/  2.0);  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.abs(x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(Math.abs(x)/  2.0);	  double    mean    =    Math.cos(Math.log(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  null  mean  =  Math.abs(x);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.abs(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	null  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    mean    =    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  long  mean  =  Math.sqrt(x);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  mean  =  Math.sqrt(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	long  mean  =  Math.sqrt(x);	          double    mean    =    Math.abs(x);    long    mean    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  (standardDeviation  *  Math.log(2.0)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
32	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
33	[BUG]  [BUGGY]  (standardDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
34	[BUG]  [BUGGY]  (Math.abs(x)/  Math.abs(standardDeviation));  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  Math.abs(standardDeviation));	  (Math.abs(x)*    Math.abs(standardDeviation));    	non-compiled	[CE]  <identifier>  expected	92	None	replace
35	[BUG]  [BUGGY]  (x  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.sqrt(2.0))));	  (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
36	[BUG]  [BUGGY]  (mean  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.sqrt(2.0))));	  (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
37	[BUG]  [BUGGY]  (maxDeviation  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (maxDeviation  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(maxDeviation  *  Math.sqrt(2.0))));	  (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
38	[BUG]  [BUGGY]  (message  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.sqrt(2.0))));	  (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
39	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)/  2.0,  standardDeviation);	  double    mean    =    Math.sqrt(Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
40	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT;	  double    mean    =    Math.abs(x)/    x;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
41	[BUG]  [BUGGY]  Double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
42	[BUG]  [BUGGY]  Double  mean  =  Math.abs(Math.abs(x)-  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(Math.abs(x)-  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.abs(Math.abs(x)-  Math.abs(sd));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
43	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(standardDeviation));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
44	[BUG]  [BUGGY]  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
45	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
46	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
47	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0,  x);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)/  2.0,  x);	  double    mean    =    Math.abs(Math.abs(sd)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
48	[BUG]  [BUGGY]  (Math.abs(sd)/  x);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(sd)/  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(sd)/  x);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
49	[BUG]  [BUGGY]  (Math.abs(mean)/  sd);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(mean)/  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(mean)/  sd);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
50	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.abs(x));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.max(Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
51	[BUG]  [BUGGY]  double  mean  =  Math.sin(Math.abs(x));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sin(Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sin(Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
52	[BUG]  [BUGGY]  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
53	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (sd  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (sd  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (sd  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
54	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
55	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
56	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd)/  standardDeviation;  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd)/  standardDeviation;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd)/  standardDeviation;	  double    mean    =    Math.abs(x)/    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  1);	  double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
58	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)+  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)+  1);	  double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
59	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x  -  standardDeviation));	  double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
60	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
61	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
62	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(1))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(1))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(1))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
63	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
64	[BUG]  [BUGGY]  double  mean  =  Math.random()  *  2.0;  [CE]  illegal  start  of  type  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.random()  *  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.random()  *  2.0;	  double    mean    =    Math.random()    /    2.0;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
65	[BUG]  [BUGGY]  (Math.abs(x)/  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  Math.abs(sd));	  (Math.abs(x)/    Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
66	[BUG]  [BUGGY]  (Math.abs(mean)/  Math.abs(x));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(mean)/  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(mean)/  Math.abs(x));	  (Math.abs(x)/    Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
67	[BUG]  [BUGGY]  double  mean  =  Math.sin(x)/  2.0;  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sin(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sin(x)/  2.0;	  double    mean    =    Math.cos(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
68	[BUG]  [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(mean)/  2.0);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(mean)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0,  Math.abs(mean)/  2.0);	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
69	[BUG]  [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(mean));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0,  Math.abs(mean));	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
70	[BUG]  [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0,  Math.abs(sd));	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
71	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  /  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  /  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x  /  1);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
72	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  *  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  *  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x  *  1);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
73	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  +  2);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x  +  2);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
74	[BUG]  [BUGGY]  (Math.abs(x)/  sd,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  sd,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  sd,  standardDeviation);	  (Math.abs(x)/    standardDeviation,    sd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
75	[BUG]  [BUGGY]  (Math.abs(x)/  sd,  sd);  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  sd,  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  sd,  sd);	  (Math.abs(x)/    standardDeviation,    sd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
76	[BUG]  [BUGGY]  (Math.abs(x)/  standardDeviation,  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  standardDeviation,  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  standardDeviation,  Math.abs(sd));	  (Math.abs(x)/    standardDeviation,    sd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
77	[BUG]  [BUGGY]  (Math.abs(x)/  mean,  sd);  [CE]  illegal  start  of  type  [FE]                            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  mean,  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  mean,  sd);	  (Math.abs(x)/    standardDeviation,    sd);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  (x  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.sqrt(2.0)));	  (sd    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
79	[BUG]  [BUGGY]  (mean  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.sqrt(2.0)));	  (sd    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  (sd  /  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (sd  /  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(sd  /  Math.sqrt(2.0)));	  (sd    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
81	[BUG]  [BUGGY]  (message  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.sqrt(2.0)));	  (sd    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
82	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
83	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(mean)/  Math.abs(x));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(mean)/  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(mean)/  Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
84	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
85	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(message));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(message));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(message));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
86	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(sd));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(sd));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
87	[BUG]  [BUGGY]  (mean  *  Math.rint(x)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.rint(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.rint(x)));	  (x    *    Math.rint(mean)));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
88	[BUG]  [BUGGY]  (x  /  Math.rint(mean)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  /  Math.rint(mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  /  Math.rint(mean)));	  (x    *    Math.rint(mean)));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
89	[BUG]  [BUGGY]  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
90	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
91	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
92	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
93	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd)/  x;  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd)/  x;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd)/  x;	  double    mean    =    Math.abs(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
94	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  sd  +  1;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  sd  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  sd  +  1;	  double    mean    =    Math.abs(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
95	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)-    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
96	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  sd);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  sd);	  double    mean    =    Math.abs(Math.abs(x)-    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
97	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  standardDeviation);  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)-  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)-    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
98	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd)/  2.0;  [CE]  illegal  start  of  type  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd)/  2.0;	  double    mean    =    Math.abs(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
99	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(x)/  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(Math.abs(x)/  Math.abs(standardDeviation));	  double    mean    =    Math.abs(Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
100	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(x)-  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(x)-  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(Math.abs(x)-  Math.abs(sd));	  double    mean    =    Math.abs(Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
101	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(sd)-  Math.abs(x));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(Math.abs(sd)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(Math.abs(sd)-  Math.abs(x));	  double    mean    =    Math.abs(Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
102	[BUG]  [BUGGY]  (maxDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (maxDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(maxDeviation  *  Math.sqrt(2.0)));	  (standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
103	[BUG]  [BUGGY]  (standardDeviation  *  Math.sqrt(2.0,  x)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  *  Math.sqrt(2.0,  x)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  *  Math.sqrt(2.0,  x)));	  (standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
104	[BUG]  [BUGGY]  (standardDeviation  /  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  /  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  /  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    /    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
105	[BUG]  [BUGGY]  (standardDeviation  /  Math.log(2.0))));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  /  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  /  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    /    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
106	[BUG]  [BUGGY]  (Math.abs(x)/  sd  +  1);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  sd  +  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  sd  +  1);	  (Math.abs(x)/    sd);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
107	[BUG]  [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(1.0)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  -  mean)/(standardDeviation  *  Math.sqrt(1.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(1.0)));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  MILLIS  +  1;  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  MILLIS  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  MILLIS  +  1;	  double    mean    =    Math.abs(x)/    MILLIS;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
109	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  1);  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  1);	  double    mean    =    Math.abs(Math.abs(x)-    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
110	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  2);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  2);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  2);	  double    mean    =    Math.abs(Math.abs(x)-    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
111	[BUG]  [BUGGY]  (null  -  mean)/(message  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(message  *  Math.log(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(message  *  Math.log(2.0)));	  (null    -    mean)/(message    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  (x  -  mean)/(message  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  -  mean)/(message  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  -  mean)/(message  *  Math.sqrt(2.0)));	  (null    -    mean)/(message    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
113	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  Math.sqrt(x)/  2.0;  [CE]  illegal  start  of  type  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  Math.sqrt(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x)/  2.0;  Math.sqrt(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
114	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  2.0;  Math.abs(x)/  2.0;  [CE]  illegal  start  of  type  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  2.0;  Math.abs(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  2.0;  Math.abs(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
115	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  Math.log(x)/  2.0;  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  2.0;  Math.log(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x)/  2.0;  Math.log(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
116	[BUG]  [BUGGY]  (Math.pow(10,  x)));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.pow(10,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.pow(10,  x)));	  (mean    *    Math.pow(10,    x)));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
117	[BUG]  [BUGGY]  (mean  *  Math.pow(10,  sd)));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.pow(10,  sd)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.pow(10,  sd)));	  (mean    *    Math.pow(10,    x)));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
118	[BUG]  [BUGGY]  (mean  *  Math.pow(10,  x  +  1)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.pow(10,  x  +  1)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.pow(10,  x  +  1)));	  (mean    *    Math.pow(10,    x)));    	non-compiled	[CE]  <identifier>  expected	64	None	replace
119	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.doubleValue(x));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.doubleValue(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.doubleValue(x));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.doubleValue(x));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
120	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(sd));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(sd));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.doubleValue(x));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
121	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(x),  standardDeviation);  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(x),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(x),  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.doubleValue(x));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
122	[BUG]  [BUGGY]  double  standardDeviation  *  Math.sqrt(1.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  *  Math.sqrt(1.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  *  Math.sqrt(1.0)));	  double    standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
123	[BUG]  [BUGGY]  double  standardDeviation  *  Math.sqrt(2.0,  x)));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  *  Math.sqrt(2.0,  x)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  *  Math.sqrt(2.0,  x)));	  double    standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
124	[BUG]  [BUGGY]  double  standardDeviation  *  Math.sqrt(0.0)));  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  *  Math.sqrt(0.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  *  Math.sqrt(0.0)));	  double    standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  1;  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  1;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_MESSAGE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
126	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_MESSAGE;  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_MESSAGE;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_MESSAGE;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_MESSAGE;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
127	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  sd;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_MESSAGE  +  sd;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_MESSAGE;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
128	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(mean);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(mean);  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.sqrt(mean);	  double    standardDeviation    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
129	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(message);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(message);  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.sqrt(message);	  double    standardDeviation    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
130	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.sqrt(x));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.sqrt(x));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.sqrt(Math.sqrt(x));	  double    standardDeviation    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
131	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.abs(x));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.abs(x));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.sqrt(Math.abs(x));	  double    standardDeviation    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
132	[BUG]  [BUGGY]  (mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (mean)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
133	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (sd  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (mean)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
134	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (mean)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
135	[BUG]  [BUGGY]  Double  mean  =  Math.log(x)/  2.0;  [CE]  illegal  start  of  type  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.log(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.log(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Double    mean    =    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
136	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(x)/  2.0;  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.sqrt(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Double    mean    =    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(sd);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(sd);	  double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  x);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.random()  *  x);	  double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.log(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.log(x));	  double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(message)/  2.0;  [CE]  illegal  start  of  type  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(message)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(message)/  2.0;	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  x)/  2.0;  [CE]  illegal  start  of  type  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.random()  *  x)/  2.0;	  double    mean    =    Math.sqrt(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
142	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.standardDeviation));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.standardDeviation));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
143	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.standardDeviation),  sd);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.standardDeviation),  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.standardDeviation),  sd);	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.standardDeviation));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.standardDeviation));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.sqrt(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.sqrt(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.sqrt(x)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(1)));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
146	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
147	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  1;  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  1;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
148	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  /  2.0;  [CE]  illegal  start  of  type  [FE]                            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  /  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  /  2.0;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
149	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(standardDeviation));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
150	[BUG]  [BUGGY]  long  mean  =  Math.log(x)/  2.0;  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  mean  =  Math.log(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	long  mean  =  Math.log(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    long    mean    =    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
151	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0  *  standardDeviation);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0  *  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0  *  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)/    2.0    -    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
152	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0  /  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0  /  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0  /  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)/    2.0    -    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
153	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0  -  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0  -  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)/  2.0  -  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)/    2.0    -    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
154	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    2.0)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
155	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (sd  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (sd  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (sd  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    2.0)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
156	[BUG]  [BUGGY]  return  2.0  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  2.0  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  2.0  *  (1.0  +  Erf.erf((  x  -  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    2.0)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
157	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  standardDeviation;  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  standardDeviation;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x)/  standardDeviation;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
158	[BUG]  [BUGGY]  double  mean  =  Math.log(sd)/  standardDeviation;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(sd)/  standardDeviation;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(sd)/  standardDeviation;	  double    mean    =    Math.log(x)/    standardDeviation;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
159	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.exp(x)/  2.0);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.exp(x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(Math.exp(x)/  2.0);	  double    mean    =    Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
160	[BUG]  [BUGGY]  double  mean  =  Math.log(Math.exp(x)/  2.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(Math.exp(x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(Math.exp(x)/  2.0);	  double    mean    =    Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
161	[BUG]  [BUGGY]  (mean  /  Math.log(x)));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  /  Math.log(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  /  Math.log(x)));	  (x    /    Math.log(mean)));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
162	[BUG]  [BUGGY]  (mean  /  Math.pow(10,  x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  /  Math.pow(10,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  /  Math.pow(10,  x)));	  (x    /    Math.log(mean)));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
163	[BUG]  [BUGGY]  (mean  /  x));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  /  x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  /  x));	  (x    /    Math.log(mean)));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
164	[BUG]  [BUGGY]  double  mean  =  Math.abs(msg)/  x;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(msg)/  x;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(msg)/  x;	  double    mean    =    Math.abs(x)/    msg;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
165	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  msg  +  1;  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  msg  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  msg  +  1;	  double    mean    =    Math.abs(x)/    msg;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
166	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  *  2.0));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  *  2.0));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  *  2.0));	  double    mean    =    Math.abs(Math.abs(x    /    2.0));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
167	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0),  standardDeviation);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  /  2.0),  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x    /    2.0));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
168	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  /  2.0));  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x  /  2.0));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x  /  2.0));	  double    mean    =    Math.abs(Math.abs(x    /    2.0));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
169	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  y)/  2.0);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  y)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  y)/  2.0);	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
170	[BUG]  [BUGGY]  double  mean  =  Math.pow(10,  x)/  2.0;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.pow(10,  x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.pow(10,  x)/  2.0;	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
171	[BUG]  [BUGGY]  double  mean  =  Math.log(Math.pow(10,  x)/  2.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(Math.pow(10,  x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(Math.pow(10,  x)/  2.0);	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
172	[BUG]  [BUGGY]  (null  -  mean)/(normalDeviation  *  Math.sqrt(1.0)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(normalDeviation  *  Math.sqrt(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(normalDeviation  *  Math.sqrt(1.0)));	  (null    -    mean)/(normalDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
173	[BUG]  [BUGGY]  (message  *  Math.rint(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.rint(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.rint(x)));	  (message    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
174	[BUG]  [BUGGY]  (message  *  Math.ceil(x)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.ceil(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.ceil(x)));	  (message    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
175	[BUG]  [BUGGY]  (message  *  Math.floor(x)));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.floor(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.floor(x)));	  (message    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
176	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(x);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.sqrt(x);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
177	[BUG]  [BUGGY]  null  mean  =  Math.sqrt(x);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.sqrt(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	null  mean  =  Math.sqrt(x);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
178	[BUG]  [BUGGY]  Double  mean  =  Math.abs(x);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
179	[BUG]  [BUGGY]  (mean  *  Math.sqrt(x)));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.sqrt(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.sqrt(x)));	  (mean    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
180	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd  -  x);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd  -  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd  -  x);	  double    mean    =    Math.abs(sd);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
181	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd  *  x);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd  *  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd  *  x);	  double    mean    =    Math.abs(sd);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
182	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.log(2.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
183	[BUG]  [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  -  mean)/(standardDeviation  *  Math.sqrt(2.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
184	[BUG]  [BUGGY]  (x  *  Math.sqrt(0.0)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.sqrt(0.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.sqrt(0.0)));	  (standardDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
185	[BUG]  [BUGGY]  (mean  *  Math.sqrt(0.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.sqrt(0.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.sqrt(0.0)));	  (standardDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  <identifier>  expected	85	None	replace
186	[BUG]  [BUGGY]  (maxDeviation  *  Math.sqrt(0.0)));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (maxDeviation  *  Math.sqrt(0.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(maxDeviation  *  Math.sqrt(0.0)));	  (standardDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  <identifier>  expected	85	None	replace
187	[BUG]  [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0,  standardDeviation);  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(Math.abs(x)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.min(Math.abs(x)/  2.0,  standardDeviation);	  double    mean    =    Math.min(Math.abs(x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
188	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
189	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  standardDeviation);  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
190	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  sd);  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC),  sd);	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
191	[BUG]  [BUGGY]  (Math.abs(mean)*  Math.abs(x  -  mean));  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(mean)*  Math.abs(x  -  mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(mean)*  Math.abs(x  -  mean));	  (Math.abs(mean)*    Math.abs(x));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
192	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  sd);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0,  sd);	  double    mean    =    Math.abs(Math.abs(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
193	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  /  2.0);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  /  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  /  2.0);	  double    mean    =    Math.abs(Math.abs(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
194	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  +  1);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  +  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0,  standardDeviation  +  1);	  double    mean    =    Math.abs(Math.abs(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
195	[BUG]  [BUGGY]  (null  -  mean)/(message  *  Math.log(1.0)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(message  *  Math.log(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(message  *  Math.log(1.0)));	  (null    -    mean)/(message    *    Math.sqrt(1.0)));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
196	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd  -  1);	  double    mean    =    Math.abs(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
197	[BUG]  [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(0.0)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  -  mean)/(standardDeviation  *  Math.sqrt(0.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  -  mean)/(standardDeviation  *  Math.sqrt(0.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
198	[BUG]  [BUGGY]  (Math.abs(sd)*  Math.abs(x));  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(sd)*  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(sd)*  Math.abs(x));	  (Math.abs(x)*    Math.abs(sd));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
199	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  standardDeviation));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  /  standardDeviation));	  double    mean    =    Math.abs(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
200	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  *  standardDeviation));  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  *  standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  *  standardDeviation));	  double    mean    =    Math.abs(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
201	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd  -  standardDeviation));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd  -  standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd  -  standardDeviation));	  double    mean    =    Math.abs(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
202	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  2.0);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  *  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.random()  *  2.0);	  double    mean    =    Math.sqrt(Math.random()    /    2.0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
203	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  2.0,  x);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  /  2.0,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.random()  /  2.0,  x);	  double    mean    =    Math.sqrt(Math.random()    /    2.0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
204	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  1.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.random()  +  1.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.random()  +  1.0);	  double    mean    =    Math.sqrt(Math.random()    /    2.0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
205	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
206	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
207	[BUG]  [BUGGY]  double  mean  =  Math.log(sd);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(sd);	  double    mean    =    Math.log(x);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
208	[BUG]  [BUGGY]  double  mean  =  Math.log(sd,  x);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(sd,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(sd,  x);	  double    mean    =    Math.log(x);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
209	[BUG]  [BUGGY]  double  mean  =  Math.rint(x);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.rint(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.rint(x);	  double    mean    =    Math.log(x);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
210	[BUG]  [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(1.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(standardDeviation  *  Math.sqrt(1.0)));	  (null    /    mean)/(x    *    Math.sqrt(1.0)));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
211	[BUG]  [BUGGY]  (null  /  mean)/(x  *  Math.log(1.0)));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(x  *  Math.log(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(x  *  Math.log(1.0)));	  (null    /    mean)/(x    *    Math.sqrt(1.0)));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
212	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
213	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
214	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
215	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
216	[BUG]  [BUGGY]  (x  -  mean)/(normalDeviation  *  Math.sqrt(2.0)));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  -  mean)/(normalDeviation  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  -  mean)/(normalDeviation  *  Math.sqrt(2.0)));	  (null    -    mean)/(normalDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	65	None	replace
217	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  1;  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  1;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
218	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_SYNTHETIC;  [CE]  <identifier>  expected  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_SYNTHETIC;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  NormalDistributionImpl.DEFAULT_SYNTHETIC;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
219	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  sd;  [CE]  <identifier>  expected  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC  +  sd;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
220	[BUG]  [BUGGY]  double  mean  =  Math.rint(x)/  2.0;  [CE]  <identifier>  expected  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.rint(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.rint(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    double    mean    =    Math.log(x)/    2.0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
221	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  standardDeviation);  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.max(Math.abs(x)/  2.0,  standardDeviation);	  double    mean    =    Math.max(Math.abs(x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
222	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  1.0);  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  1.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.max(Math.abs(x)/  2.0,  1.0);	  double    mean    =    Math.max(Math.abs(x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
223	[BUG]  [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(message);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(message);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	null  mean  =  Math.abs(x);  double  means  =  Math.abs(message);	          double    mean    =    Math.abs(x);    double    means    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
224	[BUG]  [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(mean);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	null  mean  =  Math.abs(x);  double  means  =  Math.abs(mean);	          double    mean    =    Math.abs(x);    double    means    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
225	[BUG]  [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(sd);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  null  mean  =  Math.abs(x);  double  means  =  Math.abs(sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	null  mean  =  Math.abs(x);  double  means  =  Math.abs(sd);	          double    mean    =    Math.abs(x);    double    means    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
226	[BUG]  [BUGGY]  double  mean  =  Math.abs(dev)/  x;  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(dev)/  x;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(dev)/  x;	  double    mean    =    Math.abs(x)/    dev;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
227	[BUG]  [BUGGY]  (Math.abs(sd)/  standardDeviation,  x);  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(sd)/  standardDeviation,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(sd)/  standardDeviation,  x);	  (Math.abs(x)/    standardDeviation,    sd);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
228	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.DEFAULT_SYNTHETIC));    	non-compiled	[CE]  <identifier>  expected	79	None	replace
229	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
230	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  0.0)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
231	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	43	None	replace
232	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(Math.abs(x)-  Math.abs(standardDeviation));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(Math.abs(x)-  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(Math.abs(x)-  Math.abs(standardDeviation));	  double    mean    =    Math.abs(Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  <identifier>  expected	77	None	replace
233	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0).doubleValue();	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
234	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  X)/  2.0);  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  X)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  X)/  2.0);	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
235	[BUG]  [BUGGY]  (Math.abs(x)*  Math.log(Math.abs(x))));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)*  Math.log(Math.abs(x))));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)*  Math.log(Math.abs(x))));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  <identifier>  expected	98	None	replace
236	[BUG]  [BUGGY]  (x  *  Math.pow(10,  x)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.pow(10,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.pow(10,  x)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  <identifier>  expected	98	None	replace
237	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
238	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
239	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  2.0)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    2.0)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  <identifier>  expected	61	None	replace
240	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(1.0);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(1.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(1.0);	          double    mean    =    Math.abs(x);    double    mean    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
241	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(mean));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(mean));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
242	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean)-  Math.abs(x));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(mean)-  Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  <identifier>  expected	96	None	replace
243	[BUG]  [BUGGY]  double  mean  =  Math.random();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.random();  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.random();	  double    mean    =    Math.log(x);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
244	[BUG]  [BUGGY]  (null  *  mean)/(x  *  Math.sqrt(1.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  *  mean)/(x  *  Math.sqrt(1.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  *  mean)/(x  *  Math.sqrt(1.0)));	  (null    /    mean)/(x    *    Math.sqrt(1.0)));    	non-compiled	[CE]  <identifier>  expected	101	None	replace
245	[BUG]  [BUGGY]  long  mean  =  Math.abs(x);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  long  mean  =  Math.abs(x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	long  mean  =  Math.abs(x);	          double    mean    =    Math.abs(x);    long    mean    =    Math.abs(x);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
246	[BUG]  [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  (mean)/  standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  (mean)/  standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  (mean)/  standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (mean)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
247	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.cos(2.0)));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.cos(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.cos(2.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
248	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
249	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.sqrt(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
250	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
251	[BUG]  [BUGGY]  (Math.abs(y)/  standardDeviation);  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(y)/  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(y)/  standardDeviation);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
252	[BUG]  [BUGGY]  (Math.abs(mean)/  standardDeviation);  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(mean)/  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(mean)/  standardDeviation);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
253	[BUG]  [BUGGY]  (Math.abs(sd)/  2.0);  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(sd)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(sd)/  2.0);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
254	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(standardDeviation  *  Math.sqrt(2.0));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(standardDeviation  *  Math.sqrt(2.0));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(standardDeviation  *  Math.sqrt(2.0));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.doubleValue(x));    	non-compiled	[CE]  <identifier>  expected	31	None	replace
255	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
256	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
257	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  normalDeviation;  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  normalDeviation;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  normalDeviation;	  double    mean    =    Math.abs(x)/    x;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
258	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0).doubleValue();  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0).doubleValue();  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.exp(x)/  2.0).doubleValue();	  double    mean    =    Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
259	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0,  standardDeviation);  [CE]  <identifier>  expected  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.exp(x)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.exp(x)/  2.0,  standardDeviation);	  double    mean    =    Math.sqrt(Math.exp(x)/    2.0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
260	[BUG]  [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  <identifier>  expected	78	None	replace
261	[BUG]  [BUGGY]  Double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.abs(Math.abs(sd)-  Math.abs(x));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  <identifier>  expected	78	None	replace
262	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
263	[BUG]  [BUGGY]  if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	73	None	replace
264	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(standardDeviation));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
265	[BUG]  [BUGGY]  (x  /  Math.pow(10,  x)));  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  /  Math.pow(10,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  /  Math.pow(10,  x)));	  (x    /    Math.log(mean)));    	non-compiled	[CE]  <identifier>  expected	97	None	replace
266	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0)-  1);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0)-  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  /  2.0)-  1);	  double    mean    =    Math.abs(Math.abs(x    /    2.0));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
267	[BUG]  [BUGGY]  (Math.abs(x)/  2.0  -  mean);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0  -  mean);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0  -  mean);	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
268	[BUG]  [BUGGY]  (Math.abs(x)/  2.0  /  2.0);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0  /  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0  /  2.0);	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
269	[BUG]  [BUGGY]  (Math.abs(x)/  2.0f);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0f);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0f);	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
270	[BUG]  [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  StandardDistributionImpl.DEFAULT);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.max(Math.abs(x)/  2.0,  StandardDistributionImpl.DEFAULT);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.max(Math.abs(x)/  2.0,  StandardDistributionImpl.DEFAULT);	  double    mean    =    Math.max(Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
271	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x)/  mean;  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x)/  mean;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x)/  mean;	  double    mean    =    Math.abs(x)/    mean;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
272	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x  -  1);	  double    mean    =    Math.abs(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
273	[BUG]  [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  sd;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.log(x)/  StandardDistributionImpl.DEFAULT  +  sd;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
274	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  standardDeviation)  -  1);  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  standardDeviation)  -  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  -  standardDeviation)  -  1);	  double    mean    =    Math.abs(Math.abs(x)-    1);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
275	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0);  [CE]  <identifier>  expected  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(x  /  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(x  /  2.0);	  double    mean    =    Math.random()    /    2.0;    	non-compiled	[CE]  <identifier>  expected	89	None	replace
276	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(0.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.log(0.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.log(0.0)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(0.0)));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
277	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  +  1.0);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  +  1.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x  +  1.0);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
278	[BUG]  [BUGGY]  double  mean  =  Math.min(Math.abs(x));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.min(Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean));    	non-compiled	[CE]  <identifier>  expected	94	None	replace
279	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
280	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
281	[BUG]  [BUGGY]  double  mean  =  Math.cos(x)/  2.0;  Math.log(x)/  2.0;  [CE]  illegal  start  of  type  [FE]        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(x)/  2.0;  Math.log(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(x)/  2.0;  Math.log(x)/  2.0;	          double    mean    =    Math.log(x)/    2.0;    Math.log(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
282	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.random()  /  2.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.random()  /  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(Math.random()  /  2.0);	  double    mean    =    Math.cos(Math.log(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  (Math.abs(x)/  Math.abs(Normalization.NaN));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  Math.abs(Normalization.NaN));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  Math.abs(Normalization.NaN));	  (Math.abs(x)/    Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
284	[BUG]  [BUGGY]  double  mean  =  Math.min(sd,  x);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(sd,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.min(sd,  x);	  double    mean    =    Math.abs(sd);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
285	[BUG]  [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.log(x));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.sqrt(Math.log(x));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.sqrt(Math.log(x));	  double    standardDeviation    =    Math.sqrt(x);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
286	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  <identifier>  expected	75	None	replace
287	[BUG]  [BUGGY]  (message  *  Math.pow(10,  x)));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.pow(10,  x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.pow(10,  x)));	  (message    *    Math.log(x)));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
288	[BUG]  [BUGGY]  (message  *  Math.random()));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.random()));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.random()));	  (message    *    Math.log(x)));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
289	[BUG]  [BUGGY]  double  mean  =  Math.min(sd,  x)/  sd;  [CE]  <identifier>  expected  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.min(sd,  x)/  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.min(sd,  x)/  sd;	  double    mean    =    Math.log(x)/    sd;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
290	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  2.0L;  [CE]  <identifier>  expected  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  2.0L;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  2.0L;	  double    mean    =    Math.abs(x)/    2.0;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
291	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  2.0  -  1;  [CE]  <identifier>  expected  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  2.0  -  1;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  2.0  -  1;	  double    mean    =    Math.abs(x)/    2.0;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
292	[BUG]  [BUGGY]  (null  *  mean)/(x  *  Math.sqrt(2.0)));  [CE]  <identifier>  expected  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  *  mean)/(x  *  Math.sqrt(2.0)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  *  mean)/(x  *  Math.sqrt(2.0)));	  (null    /    mean)/(x    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
293	[BUG]  [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(2)));  [CE]  <identifier>  expected  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  /  mean)/(standardDeviation  *  Math.sqrt(2)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  /  mean)/(standardDeviation  *  Math.sqrt(2)));	  (null    /    mean)/(x    *    Math.sqrt(2.0)));    	non-compiled	[CE]  <identifier>  expected	67	None	replace
294	[BUG]  [BUGGY]  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
295	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0)*  Math.log(2.0))));  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0)*  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0)*  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
296	[BUG]  [BUGGY]  double  standardDeviation  =  Math.log(2.0)/  (standardDeviation  *  Math.log(2.0)));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  =  Math.log(2.0)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  =  Math.log(2.0)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  <identifier>  expected	90	None	replace
297	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(sd));  [CE]  <identifier>  expected  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(x)-  Math.abs(sd));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(sd));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
298	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
299	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
300	[BUG]  [BUGGY]  double  standardDeviation  *  Math.sqrt(2.0,  mean)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  standardDeviation  *  Math.sqrt(2.0,  mean)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  standardDeviation  *  Math.sqrt(2.0,  mean)));	  double    standardDeviation    *    Math.sqrt(2.0)));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
301	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    /    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
302	[BUG]  [BUGGY]  (Math.abs(mean)/  x);  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(mean)/  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(mean)/  x);	  (Math.abs(x)/    mean);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
303	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(0,  x);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(0,  x);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(0,  x);	          double    mean    =    Math.abs(x);    Double    mean    =    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
304	[BUG]  [BUGGY]  (message  *  Math.cos(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (message  *  Math.cos(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(message  *  Math.cos(x)));	  (message    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
305	[BUG]  [BUGGY]  double  mean  =  Math.abs(x  +  sd);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x  +  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x  +  sd);	  double    mean    =    Math.abs(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
306	[BUG]  [BUGGY]  (Math.abs(x  -  mean)*  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x  -  mean)*  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x  -  mean)*  Math.abs(standardDeviation));	  (Math.abs(x)*    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
307	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  2;  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  2;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  2;	  double    mean    =    Math.abs(x)/    MILLIS;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
308	[BUG]  [BUGGY]  double  mean  =  Math.random()  /  StandardDistributionImpl.DEFAULT;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.random()  /  StandardDistributionImpl.DEFAULT;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.random()  /  StandardDistributionImpl.DEFAULT;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
309	[BUG]  [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (mean)/  standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (mean)/    (standardDeviation    *    Math.log(2.0)));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
310	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x));	  double    mean    =    Math.sqrt(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
311	[BUG]  [BUGGY]  if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  >  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
312	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (message  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (message    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
313	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  ((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
314	[BUG]  [BUGGY]  ((  x  -  mean)/  (standardDeviation  *  Math.cos(2.0))));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  ((  x  -  mean)/  (standardDeviation  *  Math.cos(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	((  x  -  mean)/  (standardDeviation  *  Math.cos(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    ((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
315	[BUG]  [BUGGY]  (x  /  Math.log(Math.PI  /  sd)));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  /  Math.log(Math.PI  /  sd)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  /  Math.log(Math.PI  /  sd)));	  (x    /    Math.log(mean)));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
316	[BUG]  [BUGGY]  (Math.abs(x  -  mean)/  2.0);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x  -  mean)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x  -  mean)/  2.0);	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
317	[BUG]  [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(standardDeviation));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  2.0,  Math.abs(standardDeviation));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  2.0,  Math.abs(standardDeviation));	  (Math.abs(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
318	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0;  [CE]  illegal  start  of  type  [FE]          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  2.0;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  2.0;	  double    mean    =    Math.abs(x)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
319	[BUG]  [BUGGY]  double  mean  =  Math.random()  /  sd;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.random()  /  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.random()  /  sd;	  double    mean    =    Math.log(x)/    sd;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
320	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
321	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
322	[BUG]  [BUGGY]  (mean  *  Math.log(x)),  standardDeviation);  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.log(x)),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.log(x)),  standardDeviation);	  (mean    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
323	[BUG]  [BUGGY]  (mean  *  Math.cos(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (mean  *  Math.cos(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(mean  *  Math.cos(x)));	  (mean    *    Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
324	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0,  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(sd)/  2.0,  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(sd)/  2.0,  standardDeviation);	  double    mean    =    Math.abs(Math.abs(x)/    2.0,    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
325	[BUG]  [BUGGY]  (Math.abs(x)*  Math.log(Math.abs(x)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)*  Math.log(Math.abs(x)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)*  Math.log(Math.abs(x)));	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
326	[BUG]  [BUGGY]  (x  *  Math.log(Math.log(x)),  standardDeviation);  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (x  *  Math.log(Math.log(x)),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(x  *  Math.log(Math.log(x)),  standardDeviation);	  (x    *    Math.log(Math.log(x)));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
327	[BUG]  [BUGGY]  (Math.abs(sd)/  sd);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(sd)/  sd);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(sd)/  sd);	  (Math.abs(sd)/    standardDeviation);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
328	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC;  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_SYNTHETIC;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
329	[BUG]  [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.sqrt(0,  1)));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (null  -  mean)/(standardDeviation  *  Math.sqrt(0,  1)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(null  -  mean)/(standardDeviation  *  Math.sqrt(0,  1)));	  (null    -    mean)/(standardDeviation    *    Math.sqrt(1)));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
330	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  sd;  [CE]  illegal  start  of  type  [FE]                        MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  sd;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  sd;	  double    mean    =    Math.abs(x)/    msg;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
331	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd)/  msg;  [CE]  illegal  start  of  type  [FE]                          MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd)/  msg;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd)/  msg;	  double    mean    =    Math.abs(x)/    msg;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
332	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
333	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.sqrt(2.0))));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
334	[BUG]  [BUGGY]  double  mean  =  Math.abs(sd  -  standardDeviation);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(sd  -  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(sd  -  standardDeviation);	  double    mean    =    Math.abs(sd);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
335	[BUG]  [BUGGY]  (Math.rint(mean)));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.rint(mean)));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.rint(mean)));	  (x    *    Math.rint(mean)));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
336	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0)+  1);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  /  2.0)+  1);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  /  2.0)+  1);	  double    mean    =    Math.abs(Math.abs(x    /    2.0));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
337	[BUG]  [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_MESSAGE;  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_MESSAGE;  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(x)/  StandardDistributionImpl.DEFAULT_MESSAGE;	  double    mean    =    Math.log(x)/    StandardDistributionImpl.DEFAULT_MESSAGE;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
338	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(sd));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(sd));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(sd));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
339	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
340	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.log(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
341	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  -  mean)/  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
342	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.abs(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.abs(mean));	  double    mean    =    Math.sqrt(Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
343	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
344	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.sqrt(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (normalDeviation  *  Math.log(2.0))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (normalDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
345	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(mean));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)-  Math.abs(NormalDistributionImpl.doubleValue(mean));	  double    mean    =    Math.abs(Math.abs(x)-    Math.abs(NormalDistributionImpl.doubleValue(x));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
346	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  sd));  [CE]  illegal  start  of  type  [FE]                MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x  -  sd));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x  -  sd));	  double    mean    =    Math.abs(Math.abs(x    -    standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
347	[BUG]  [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0),  standardDeviation);  [CE]  illegal  start  of  type  [FE]                  MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0),  standardDeviation);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.sqrt(Math.pow(10,  x)/  2.0),  standardDeviation);	  double    mean    =    Math.sqrt(Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
348	[BUG]  [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	return  0.5  *  (1.0  +  Erf.erf((  x  /  mean)/  (standardDeviation  *  Math.log(2.0))));  (standardDeviation  *  Math.sqrt(2.0)));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (standardDeviation    /    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
349	[BUG]  [BUGGY]  Double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(x));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  Double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	Double  mean  =  Math.abs(Math.abs(mean)-  Math.abs(x));	  Double    mean    =    Math.abs(Math.abs(x)-    Math.abs(standardDeviation));    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
350	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(message)-  Math.abs(x));  [CE]  illegal  start  of  type  [FE]            MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(message)-  Math.abs(x));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(message)-  Math.abs(x));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
351	[BUG]  [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(mean));  [CE]  illegal  start  of  type  [FE]              MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.abs(Math.abs(x)/  Math.abs(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.abs(Math.abs(x)/  Math.abs(mean));	  double    mean    =    Math.abs(Math.abs(mean)-    Math.abs(x));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
352	[BUG]  [BUGGY]  double  mean  =  Math.cos(Math.pow(10,  x)/  2.0);  [CE]  illegal  start  of  type  [FE]                      MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  double  mean  =  Math.cos(Math.pow(10,  x)/  2.0);  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	double  mean  =  Math.cos(Math.pow(10,  x)/  2.0);	  double    mean    =    Math.cos(Math.log(x)/    2.0);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
353	[BUG]  [BUGGY]  (Math.abs(x)/  Math.abs(standardDeviation),  Math.abs(mean));  [CE]  illegal  start  of  type  [FE]                    MaxIterationsExceededException      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (Math.abs(x)/  Math.abs(standardDeviation),  Math.abs(mean));  [BUGGY]      return  0.5  *  (1.0  +  Erf.erf((x  -  mean)  /      (standardDeviation  *  Math.sqrt(2.0))));  (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(Math.abs(x)/  Math.abs(standardDeviation),  Math.abs(mean));	  (Math.abs(x)/    Math.abs(mean));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
354	[BUG]  [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	(1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
355	[BUG]  [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  sd)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2))));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2))));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
356	[BUG]  [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  double  cumulativeProbability(double  x)  throws  MathException  {      [BUGGY]  if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }  [BUGGY]      (standardDeviation  *  Math.sqrt(2.0))));  }  [CLASS]  NormalDistributionImpl  [METHOD]  cumulativeProbability  [RETURN_TYPE]  double  double  x  [VARIABLES]  double  mean  sd  standardDeviation  x  long  serialVersionUID  boolean  	projects/Math103/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	0.3779644730092272	109	110	1	replace	if(x  <  mean)  {  return  0.5  *  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0))));  (1.0  +  Erf.erf((  x  -  mean)/  (standardDeviation  *  Math.log(2.0)));  }	  return    0.5    *    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    (1.0    +    Erf.erf((    x    -    mean)/    (standardDeviation    *    Math.log(2.0))));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
