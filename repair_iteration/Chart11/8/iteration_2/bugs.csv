bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  SQRT2  iterator1  =  iterator2.getSQRT2();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  float  SQRT2  iterator1  =  iterator2.getSQRT2();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	float  SQRT2  iterator1  =  iterator2.getSQRT2();	      float    SQRT2    iterator1    =    iterator1.getSQRT2();    	non-compiled	[CE]  ';'  expected	14	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	        if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
3	[BUG]  [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	        if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	        if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(iterator1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
5	[BUG]  [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]      if(iterator1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(iterator1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	        if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(iterator1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()  ==  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  done  =  iterator1.isDone()  ==  iterator2.isDone();	  boolean    done    =    iterator1.isDone()!=    iterator2.isDone();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
7	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  ==  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()  ==  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  done  =  iterator1.isDone()  ==  iterator2.isDone();	  boolean    done    =    iterator1.isDone()!=    iterator2.isDone();    	compilable	  [FE]  AssertionFailedError  	2	1	replace
8	[BUG]  [BUGGY]  Iterator  <  Path>  iterator2  =  iterator2.iterator();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  Iterator  <  Path>  iterator2  =  iterator2.iterator();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	Iterator  <  Path>  iterator2  =  iterator2.iterator();	      Iterator    <    Path>    iterator2    =    iterator1.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	8	None	replace
9	[BUG]  [BUGGY]  Iterator  <  SQRT2>  iterator1  =  iterator2.iterator();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  Iterator  <  SQRT2>  iterator1  =  iterator2.iterator();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	Iterator  <  SQRT2>  iterator1  =  iterator2.iterator();	      Iterator    <    SQRT2>    iterator1    =    p1.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
10	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean    done    =    iterator1.isDone()    ||    iterator2.isDone();    boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	3	None	add
11	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  boolean  done  =  iterator1.isDone()  ||  Iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  boolean  done  =  iterator1.isDone()  ||  Iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean    done    =    iterator1.isDone()    ||    iterator2.isDone();    boolean  done  =  iterator1.isDone()  ||  Iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	3	None	add
12	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean    done    =    iterator1.isDone()!=    iterator2.isDone();    boolean  done  =  iterator1.isDone()!=  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	1	None	add
13	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean    done    =    iterator1.isDone()!=    iterator2.isDone();    boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	1	None	add
14	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()  >>  iterator2.isDone();  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()!=  iterator2.isDone();  boolean  done  =  iterator1.isDone()  >>  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean    done    =    iterator1.isDone()!=    iterator2.isDone();    boolean  done  =  iterator1.isDone()  >>  iterator2.isDone();	  	non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	1	None	add
15	[BUG]  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  cannot  find  symbol  done  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	      if(iterator1!=    null)    {    if(iterator2.isDone()    ==    iterator2)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  done	12	None	replace
16	[BUG]  [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator2)  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator2)  {  return  false;  }	      if(iterator1!=    null)    {    if(iterator2.isDone()    ==    iterator2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  done  =  iterator1.isDone()  >=  iterator2.isDone();	  boolean    done    =    iterator1.isDone()    >>    iterator2.isDone();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	replace
18	[BUG]  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1.isDone()!=  iterator2.isDone())  {  if(!Arrays.equals(d1,  d2))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone())  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1.isDone()!=  iterator2.isDone())  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  Iterator  <  Path>  iterator1  =  iterator1.getPathIterator(null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  Iterator  <  Path>  iterator1  =  iterator1.getPathIterator(null);  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	Iterator  <  Path>  iterator1  =  iterator1.getPathIterator(null);	      Iterator    <    Path>    iterator1    =    iterator2.getPathIterator(null);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
21	[BUG]  [BUGGY]  Iterator  <  Path>  iterator1  =  iterator1.iterator();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  Iterator  <  Path>  iterator1  =  iterator1.iterator();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	Iterator  <  Path>  iterator1  =  iterator1.iterator();	      Iterator    <    Path>    iterator1    =    iterator2.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	6	None	replace
22	[BUG]  [BUGGY]  if(iterator1.getWindingRule()!=  iterator2.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  done  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1.getWindingRule()!=  iterator2.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1.getWindingRule()!=  iterator2.getWindingRule())  {  return  false;  }	      if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  done	11	None	replace
23	[BUG]  [BUGGY]  if(iterator1!=  null  &&  iterator2.isNull())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1!=  null  &&  iterator2.isNull())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1!=  null  &&  iterator2.isNull())  {  return  false;  }	      if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
24	[BUG]  [BUGGY]  if(iterator2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  done  [FE]    AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	      if(iterator1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  done	11	None	replace
25	[BUG]  [BUGGY]  Iterator  <  Path>  iterator1  =  p1.getPathIterator(null);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  Iterator  <  Path>  iterator1  =  p1.getPathIterator(null);  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	Iterator  <  Path>  iterator1  =  p1.getPathIterator(null);	      Iterator    <    Path>    iterator1    =    iterator2.getPathIterator(null);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
26	[BUG]  [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()  ==  iterator1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()  ==  iterator1)  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1!=  null)  {  if(iterator2.isDone()  ==  iterator1)  {  return  false;  }	      if(iterator1!=    null)    {    if(iterator2.isDone()    ==    iterator2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator1)  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1!=  null)  {  if(iterator2.isDone()!=  iterator1)  {  return  false;  }	      if(iterator1!=    null)    {    if(iterator2.isDone()    ==    iterator2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  int  seg1  =  iterator1.currentSegment(d1);  [CE]  cannot  find  symbol  done  [FE]            AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  int  seg1  =  iterator1.currentSegment(d1);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	int  seg1  =  iterator1.currentSegment(d1);	      	non-compiled	[CE]  cannot  find  symbol  done	5	None	replace
29	[BUG]  [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()  ==  iterator2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()  ==  iterator2)  {  return  false;  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	if(iterator1  ==  null)  {  if(iterator2.isDone()  ==  iterator2)  {  return  false;  }	      if(iterator1!=    null)    {    if(iterator2.isDone()    ==    iterator2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
