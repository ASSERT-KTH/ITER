bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (p1 == null) { [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { [BUGGY] if (p1 == null) { [BUGGY] return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { [BUGGY] [BUGGY] if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	
3	[BUG] [BUGGY] if (p2 == null) { [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } [BUGGY] if (p2 == null) { [BUGGY] return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } [BUGGY] [BUGGY] if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	
5	[BUG] [BUGGY] if (p1.getWindingRule() != p2.getWindingRule()) { [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } [BUGGY] if (p1.getWindingRule() != p2.getWindingRule()) { [BUGGY] return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } [BUGGY] [BUGGY] if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	
7	[BUG] [BUGGY] PathIterator iterator1 = p1.getPathIterator(null); [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } [BUGGY] PathIterator iterator1 = p1.getPathIterator(null); [BUGGY] PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } [BUGGY] [BUGGY] PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	
9	[BUG] [BUGGY] PathIterator iterator2 = p1.getPathIterator(null); [FE] AssertionFailedError [CONTEXT] if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); [BUGGY] PathIterator iterator2 = p1.getPathIterator(null); [BUGGY] double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	275	275	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); [BUGGY] [BUGGY] PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	275	275	1	add	
11	[BUG] [BUGGY] double[] d1 = new double[6]; [FE] AssertionFailedError [CONTEXT] return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); [BUGGY] double[] d1 = new double[6]; [BUGGY] double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	276	276	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); [BUGGY] [BUGGY] double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	276	276	1	add	
13	[BUG] [BUGGY] double[] d2 = new double[6]; [FE] AssertionFailedError [CONTEXT] } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; [BUGGY] double[] d2 = new double[6]; [BUGGY] boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; [BUGGY] [BUGGY] double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	add	
15	[BUG] [BUGGY] boolean done = iterator1.isDone() && iterator2.isDone(); [FE] AssertionFailedError [CONTEXT] if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; [BUGGY] boolean done = iterator1.isDone() && iterator2.isDone(); [BUGGY] while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; [BUGGY] [BUGGY] boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	
17	[BUG] [BUGGY] while (!done) { [FE] AssertionFailedError [CONTEXT] return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); [BUGGY] while (!done) { [BUGGY] if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); [BUGGY] [BUGGY] while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	
19	[BUG] [BUGGY] if (iterator1.isDone() != iterator2.isDone()) { [FE] AssertionFailedError [CONTEXT] } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { [BUGGY] if (iterator1.isDone() != iterator2.isDone()) { [BUGGY] return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { [BUGGY] [BUGGY] if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	add	
21	[BUG] [BUGGY] int seg1 = iterator1.currentSegment(d1); [FE] AssertionFailedError [CONTEXT] } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } [BUGGY] int seg1 = iterator1.currentSegment(d1); [BUGGY] int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	283	283	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } [BUGGY] [BUGGY] int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	283	283	1	add	
23	[BUG] [BUGGY] int seg2 = iterator2.currentSegment(d2); [FE] AssertionFailedError [CONTEXT] PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); [BUGGY] int seg2 = iterator2.currentSegment(d2); [BUGGY] if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); [BUGGY] [BUGGY] int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	add	
25	[BUG] [BUGGY] if (seg1 != seg2) { [FE] AssertionFailedError [CONTEXT] PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); [BUGGY] if (seg1 != seg2) { [BUGGY] return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	285	285	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] PathIterator iterator2 = p1.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); [BUGGY] [BUGGY] if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	285	285	1	add	
27	[BUG] [BUGGY] if (!Arrays.equals(d1, d2)) { [FE] AssertionFailedError [CONTEXT] boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } [BUGGY] if (!Arrays.equals(d1, d2)) { [BUGGY] return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } [BUGGY] [BUGGY] if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	add	
29	[BUG] [BUGGY] iterator1.next(); [FE] AssertionFailedError [CONTEXT] return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } [BUGGY] iterator1.next(); [BUGGY] iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } [BUGGY] [BUGGY] iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	add	
31	[BUG] [BUGGY] iterator2.next(); [FE] AssertionFailedError [CONTEXT] } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); [BUGGY] iterator2.next(); [BUGGY] done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); [BUGGY] [BUGGY] iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	add	
33	[BUG] [BUGGY] done = iterator1.isDone() && iterator2.isDone(); [FE] AssertionFailedError [CONTEXT] int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); [BUGGY] done = iterator1.isDone() && iterator2.isDone(); [BUGGY] } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); [BUGGY] [BUGGY] done = iterator1.isDone() && iterator2.isDone(); } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	add	
35	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); [BUGGY] } [BUGGY] return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); [BUGGY] [BUGGY] } return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	
37	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } [BUGGY] return true; [BUGGY] } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } [BUGGY] [BUGGY] return true; } [CLASS] ShapeUtilities [METHOD] equal [RETURN_TYPE] boolean  GeneralPath p1 GeneralPath p2 [VARIABLES] boolean done float SQRT2 GeneralPath p1 p2 double[] d1 d2 PathIterator iterator1 iterator2 int seg1 seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	
39	[BUG] [BUGGY] private static final float SQRT2 = (float) Math.pow(2.0, 0.5); [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final float SQRT2 = (float) Math.pow(2.0, 0.5); [BUGGY]  [CLASS] ShapeUtilities  [VARIABLES] 	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final float SQRT2 = (float) Math.pow(2.0, 0.5); [CLASS] ShapeUtilities  [VARIABLES] 	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	
