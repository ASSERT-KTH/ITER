bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
2	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
4	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
5	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  <identifier>  expected	10	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
7	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
9	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    	compilable	  [FE]  AssertionFailedError  	13	1	replace
10	[BUG]  [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
11	[BUG]  [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
12	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1!=  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1!=  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
14	[BUG]  [BUGGY]  if(p1!=  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1!=  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1!=  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	11	2	replace
15	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null  ||  p2!=  null)  {  return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
17	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
19	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
20	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	8	None	add
21	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p	  	non-compiled	[CE]  ')'  expected	8	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1!=  null)  {  return  false;  }	  if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
23	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1!=  null)  {  return  false;  }	  if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
25	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
27	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
28	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	3	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1  ==  null)  {  if(p2.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
30	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  if(p2.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
31	[BUG]  [BUGGY]  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p2.getWindingRule()!=    p1.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
33	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
35	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
36	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  <identifier>  expected	14	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
38	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
40	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
41	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	1	None	add
42	[BUG]  [BUGGY]  return  p2  ==  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  return  p2  ==  null;  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	return  p2  ==  null;	  if(p1    ==    null)    {    return    p2    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
44	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
45	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	12	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
47	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
49	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	10	2	add
50	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  p3  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  p3	10	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
52	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
54	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
55	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [CE]  cannot  find  symbol  p3  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p3.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  p3	8	None	add
56	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
58	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	3	2	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
60	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
62	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	1	replace
64	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	1	replace
65	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
67	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
68	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
70	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  true;  }	  	compilable	  [FE]  AssertionFailedError  	12	1	add
71	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p2  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
73	[BUG]  [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p2  ==  null)  {  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	4	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p2  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
75	[BUG]  [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p2  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p2  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	11	1	replace
76	[BUG]  [BUGGY]  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1  ==  null)  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()  >=  p1.	  	non-compiled	[CE]  <identifier>  expected	14	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
79	[BUG]  [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()        ==        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    ==    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  ==  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	1	2	add
80	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        true;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    true;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  true;  }  if(p1.getWindingRule()!=  p1.	  	non-compiled	[CE]  <identifier>  expected	12	None	add
81	[BUG]  [BUGGY]  if(p2.getWindingRule()!=  p1.getWindingRule()  ||  p2.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  if(p2.getWindingRule()!=  p1.getWindingRule()  ||  p2.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p2.getWindingRule()!=  p1.getWindingRule()  ||  p2.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
