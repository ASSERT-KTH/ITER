bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d1);  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	int  SQRT2  =  iterator1.currentSegment(d1);	          float    SQRT2    =    iterator1.currentSegment(d1);    int    SQRT2    =    iterator1.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d1);  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	double  SQRT2  =  iterator2.currentSegment(d1);	  float    SQRT2    =    iterator2.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	boolean  done  =  iterator2.isDone()  &&  iterator1.isDone();	  boolean    done    =    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	int  SQRT2  =  iterator1.currentSegment(d2);	          float    SQRT2    =    iterator1.currentSegment(d2);    int    SQRT2    =    iterator1.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	if(done)    {    if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
6	[BUG]  [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  if(done)  {  if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  if(done)  {  if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	if(done)    {    if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    if(done)  {  if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {	  while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while    (!done    &&    iterator2.isDone()!=    iterator2.isDone())    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
8	[BUG]  [BUGGY]  while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {	  while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while    (!done    &&    iterator2.isDone()!=    iterator2.isDone())    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
9	[BUG]  [BUGGY]  while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {	  while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while    (!done    &&    iterator1.isDone()    >=    iterator2.isDone())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
10	[BUG]  [BUGGY]  boolean  done  =  iterator2.isDone()  ||  iterator1.isDone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  boolean  done  =  iterator2.isDone()  ||  iterator1.isDone();  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	boolean  done  =  iterator2.isDone()  ||  iterator1.isDone();	  boolean    done    =    iterator1.isDone()    ||    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  float  SQRT2  =  iterator2.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  float  SQRT2  =  iterator2.currentSegment(d2);  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	float  SQRT2  =  iterator2.currentSegment(d2);	          float    SQRT2    =    iterator1.currentSegment(d2);    float    SQRT2    =    iterator2.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(!done  &&  iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(!done  &&  iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }  [BUGGY]      while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	if(!done  &&  iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }	  if(!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
