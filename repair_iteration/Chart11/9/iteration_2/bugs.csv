bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
2	[BUG]  [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while  (!done  &&  iterator1.isDone()  >=  iterator2.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
3	[BUG]  [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while  (!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while    (!done    &&    iterator1.isDone()!=    iterator2.isDone())    {    while  (!done  &&  iterator2.isDone()!=  iterator2.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
4	[BUG]  [BUGGY]  while(!done  &&  iterator2.isDone())  {  while(!done  &&  iterator2.isDone())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator2.isDone())  {  while(!done  &&  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator2.isDone())    {    while(!done  &&  iterator2.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
5	[BUG]  [BUGGY]  while(!done  &&  iterator2.isDone())  {  while(!done  &&  iterator1.isDone())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator2.isDone())  {  while(!done  &&  iterator1.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator2.isDone())    {    while(!done  &&  iterator1.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
6	[BUG]  [BUGGY]  while(!done  &&  iterator2.isDone())  {  While(!done  &&  iterator2.isDone())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator2.isDone())  {  While(!done  &&  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator2.isDone())    {    While(!done  &&  iterator2.isDone())  {	  	non-compiled	[CE]  ';'  expected	11	None	add
7	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d1);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d1);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d1);    float  SQRT2  =  iterator1.currentSegment(d1);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	add
8	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  int  SQRT2  =  iterator1.currentSegment(d1);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  int  SQRT2  =  iterator1.currentSegment(d1);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d1);    int  SQRT2  =  iterator1.currentSegment(d1);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	add
9	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d2);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d1);    float  SQRT2  =  iterator1.currentSegment(d2);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	add
10	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  float  SQRT2  =  iterator1.currentSegment(d2);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  float  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d2);    float  SQRT2  =  iterator1.currentSegment(d2);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	9	None	add
11	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  int  SQRT2  =  iterator1.currentSegment(d2);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  int  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d2);    int  SQRT2  =  iterator1.currentSegment(d2);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	9	None	add
12	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  float  SQRT2  =  iterator2.currentSegment(d2);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d2);  float  SQRT2  =  iterator2.currentSegment(d2);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d2);    float  SQRT2  =  iterator2.currentSegment(d2);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	9	None	add
13	[BUG]  [BUGGY]  float  SQRT2  =  iterator2.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  float  SQRT2  =  iterator2.currentSegment(d1);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	float  SQRT2  =  iterator2.currentSegment(d1);	      float    SQRT2    =    iterator1.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  boolean  done  =  iterator2.isDone();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  boolean  done  =  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	boolean  done  =  iterator2.isDone();	      boolean    done    =    iterator1.isDone();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	      if(!done)    {    if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	7	1	replace
16	[BUG]  [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	if(done)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	      if(!done)    {    if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	7	1	replace
17	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator1.isDone())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator1.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator1.isDone())    {    while(!done  &&  iterator1.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
18	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator2.isDone())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator1.isDone())    {    while(!done  &&  iterator2.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
19	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator3.isDone())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  {  while(!done  &&  iterator3.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator1.isDone())    {    while(!done  &&  iterator3.isDone())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
20	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();	      boolean    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  boolean  done  =  iterator2.isDone()  *  iterator1.isDone();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  boolean  done  =  iterator2.isDone()  *  iterator1.isDone();  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	boolean  done  =  iterator2.isDone()  *  iterator1.isDone();	      boolean    done    =    iterator1.isDone()    *    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator2.currentSegment(d1);  [CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]      float  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator2.currentSegment(d1);  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	        float    SQRT2    =    iterator1.currentSegment(d1);    float  SQRT2  =  iterator2.currentSegment(d1);	  	non-compiled	[CE]  variable  SQRT2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	add
23	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  {  While(!done  &&  iterator1.isDone())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  {  While(!done  &&  iterator1.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done    &&    iterator1.isDone())    {    While(!done  &&  iterator1.isDone())  {	  	non-compiled	[CE]  ';'  expected	13	None	add
24	[BUG]  [BUGGY]  if(!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  if(!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]    while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	if(!done  &&  iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }	      if(!done)    {    if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
