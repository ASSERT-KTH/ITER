bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  while(!done  &&  iterator1.isDone())  {  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator1.isDone())  {	while  (!done)  {  	compilable	  [FE]  AssertionFailedError	17	1
99	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  {  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  while(!done  &&  iterator1.isDone())  {  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator1.isDone())  {	while  (!done)  {  	compilable	  [FE]  AssertionFailedError	17	1
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
27	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p2.getWindingRule()!=  p1.getWindingRule())  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	add	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	32	1
189	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [FE]  AssertionFailedError  [CONTEXT]  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	292	292	1	replace	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	32	1
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	add	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	30	1
176	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	replace	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	30	1
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  true;  }  [BUGGY]  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	add	if(!Arrays.equals(d1,  d2))  {  return  true;  }		compilable	  [FE]  AssertionFailedError	30	1
178	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  true;  }  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  true;  }  [BUGGY]  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	291	291	1	replace	if(!Arrays.equals(d1,  d2))  {  return  true;  }		compilable	  [FE]  AssertionFailedError	30	1
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[6];  }  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[6];  }		compilable	  [FE]  AssertionFailedError	16	1
93	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[6];  }  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[6];  }  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[6];  }		compilable	  [FE]  AssertionFailedError	16	1
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	add	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	34	1
200	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [FE]  AssertionFailedError  [CONTEXT]  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	replace	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	34	1
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  [BUGGY]  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	add	done  =  iterator1.isDone()  ||  iterator2.isDone();	done  =  iterator1.isDone()  &&  iterator2.isDone();  	compilable	  [FE]  AssertionFailedError	33	1
195	[BUG]  [BUGGY]  done  =  iterator1.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  [BUGGY]  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	293	293	1	replace	done  =  iterator1.isDone()  ||  iterator2.isDone();	done  =  iterator1.isDone()  &&  iterator2.isDone();  	compilable	  [FE]  AssertionFailedError	33	1
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  [BUGGY]  int  seg2  =  iterator1.currentSegment(d2);  [BUGGY]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	add	int  seg2  =  iterator1.currentSegment(d2);	int  seg2  =  iterator2.currentSegment(d2);  	compilable	  [FE]  AssertionFailedError	23	1
135	[BUG]  [BUGGY]  int  seg2  =  iterator1.currentSegment(d2);  [FE]  AssertionFailedError  [CONTEXT]  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  [BUGGY]  int  seg2  =  iterator1.currentSegment(d2);  [BUGGY]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	replace	int  seg2  =  iterator1.currentSegment(d2);	int  seg2  =  iterator2.currentSegment(d2);  	compilable	  [FE]  AssertionFailedError	23	1
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p2  ==  null  ||  p1.equals(p2))  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError	3	1
15	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null  ||  p1.equals(p2))  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError	3	1
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	38	1
224	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [FE]  AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  if(!Arrays.equals(d1,  d2))  {  return  false;  }  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(!Arrays.equals(d1,  d2))  {  return  false;  }		compilable	  [FE]  AssertionFailedError	38	1
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2  ==  null)  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError	1	1
3	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2  ==  null)  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError	1	1
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  [BUGGY]  PathIterator  iterator  =  p1.getPathIterator(null);  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	PathIterator  iterator  =  p1.getPathIterator(null);		compilable	  [FE]  AssertionFailedError	8	1
46	[BUG]  [BUGGY]  PathIterator  iterator  =  p1.getPathIterator(null);  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  [BUGGY]  PathIterator  iterator  =  p1.getPathIterator(null);  [BUGGY]  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator  =  p1.getPathIterator(null);		compilable	  [FE]  AssertionFailedError	8	1
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();	boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  	compilable	  [FE]  AssertionFailedError	15	1
87	[BUG]  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  done  =  iterator1.isDone()  ||  iterator2.isDone();	boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  	compilable	  [FE]  AssertionFailedError	15	1
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    [BUGGY]  private  static  final  double  SQRT2  =(float)Math.pow(2.0,  0.5);  [BUGGY]    [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	private  static  final  double  SQRT2  =(float)Math.pow(2.0,  0.5);	private  static  final  float  SQRT2  =  (float)  Math.pow(2.0,  0.5);  	compilable	  [FE]  AssertionFailedError	39	1
231	[BUG]  [BUGGY]  private  static  final  double  SQRT2  =(float)Math.pow(2.0,  0.5);  [FE]  AssertionFailedError  [CONTEXT]    [BUGGY]  private  static  final  double  SQRT2  =(float)Math.pow(2.0,  0.5);  [BUGGY]    [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	private  static  final  double  SQRT2  =(float)Math.pow(2.0,  0.5);	private  static  final  float  SQRT2  =  (float)  Math.pow(2.0,  0.5);  	compilable	  [FE]  AssertionFailedError	39	1
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	4	1
20	[BUG]  [BUGGY]  p1.equals(p2);  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	4	1
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d1,  d2))  {  [BUGGY]  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	add	if(!Arrays.equals(d1,  d2)||!Arrays.equals(d1,  d2))  {	if  (!Arrays.equals(d1,  d2))  {  	compilable	  [FE]  AssertionFailedError	27	1
159	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d1,  d2))  {  [FE]  AssertionFailedError  [CONTEXT]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d1,  d2))  {  [BUGGY]  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	replace	if(!Arrays.equals(d1,  d2)||!Arrays.equals(d1,  d2))  {	if  (!Arrays.equals(d1,  d2))  {  	compilable	  [FE]  AssertionFailedError	27	1
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	6	1
33	[BUG]  [BUGGY]  p1.equals(p2);  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	6	1
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2.equals(p1))  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError	1	1
3	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2.equals(p1))  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError	1	1
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	2	1
10	[BUG]  [BUGGY]  p1.equals(p2);  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  p1.equals(p2);  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	p1.equals(p2);		compilable	  [FE]  AssertionFailedError	2	1
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  while(!done  &&!done)  {  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&!done)  {	while  (!done)  {  	compilable	  [FE]  AssertionFailedError	17	1
99	[BUG]  [BUGGY]  while(!done  &&!done)  {  [FE]  AssertionFailedError  [CONTEXT]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  while(!done  &&!done)  {  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&!done)  {	while  (!done)  {  	compilable	  [FE]  AssertionFailedError	17	1
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.equals(p2))  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.equals(p2))  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
27	[BUG]  [BUGGY]  if(p1.equals(p2))  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.equals(p2))  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.equals(p2))  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  boolean  before  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  before  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError	16	1
93	[BUG]  [BUGGY]  boolean  before  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  [BUGGY]  boolean  before  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  before  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError	16	1
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	add	done  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError	20	1
116	[BUG]  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  [BUGGY]  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	done  =  iterator1.isDone()  &&  iterator2.isDone();		compilable	  [FE]  AssertionFailedError	20	1
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  ||  done)  {  [BUGGY]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	add	if(iterator1.isDone()!=  iterator2.isDone()  ||  done)  {	if  (iterator1.isDone()  !=  iterator2.isDone())  {  	compilable	  [FE]  AssertionFailedError	19	1
111	[BUG]  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  ||  done)  {  [FE]  AssertionFailedError  [CONTEXT]  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  ||  done)  {  [BUGGY]  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	if(iterator1.isDone()!=  iterator2.isDone()  ||  done)  {	if  (iterator1.isDone()  !=  iterator2.isDone())  {  	compilable	  [FE]  AssertionFailedError	19	1
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
27	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [FE]  AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  	compilable	  [FE]  AssertionFailedError	5	1
