patch is same with buggy,279,replace,,while (!done) { ,while(!done) {
compilation error,279,replace,[CE] illegal start of type,while (!done) { , 
compilation error,277,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,277,add,[CE] illegal start of expression,,boolean done = iterator1.isDone() && iterator2.isDone(); while(!done) { d1 = new double[6];
compilation error,277,add,[CE] illegal start of expression,,boolean done = iterator1.isDone() && iterator2.isDone(); while(!done) { d2 = new double[6];
compilation error,284,add,[CE] variable seg2 is already defined in method equal(GeneralPath,GeneralPath),,int seg2 = iterator2.currentSegment(d1); if(seg1!= seg2) { return false; }
compilation error,284,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,284,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d1)) { return false; }
compilation error,268,add,[CE] illegal start of expression,,if(p1 == null) { if(p2 == null) { return false; }
compilation error,268,add,[CE] illegal start of expression,,if(p1 == null) { if(p2.getPath()!= p1.getPath()) { return false; }
compilation error,268,add,[CE] illegal start of expression,,if(p1 == null) { if(p2 == null) { return true; }
patch is same with buggy,291,replace,,iterator1.next(); ,iterator1.next();
increase failing tests,291,replace, [FE] AssertionFailedError,iterator1.next(); ,iterator1.isDone();
increase failing tests,291,replace, [FE] AssertionFailedError,iterator1.next(); , 
compilation error,279,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,279,add,[CE] illegal start of expression,,while(!done) { d1 = iterator1.isDone() && d2!= d1.isDone();
compilation error,279,add,[CE] illegal start of expression,,while(!done) { d1 = iterator1.isDone() && iterator2.isDone();
patch is same with buggy,292,replace,,iterator2.next(); ,iterator2.next();
compilation error,292,replace,[CE] cannot find symbol,iterator2.next(); ,iterator2.remove();
increase failing tests,292,replace, [FE] AssertionFailedError,iterator2.next(); , 
patch is same with buggy,271,replace,,if (p1.getWindingRule() != p2.getWindingRule()) { ,if(p1.getWindingRule()!= p2.getWindingRule()) {
patch is same with buggy,271,replace,,if (p1.getWindingRule() != p2.getWindingRule()) { , 
patch is same with buggy,280,replace,,if (iterator1.isDone() != iterator2.isDone()) { ,if(iterator1.isDone()!= iterator2.isDone()) {
increase failing tests,280,replace, [FE] AssertionFailedError,if (iterator1.isDone() != iterator2.isDone()) { ,if(iterator1.isDone() == iterator2.isDone()) {
compilation error,280,replace,[CE] illegal start of type,if (iterator1.isDone() != iterator2.isDone()) { , 
compilation error,276,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,276,add,[CE] illegal start of expression,,while(iterator1.isDone()) { iterator2.isDone();
compilation error,276,add,[CE] illegal start of expression,,while(iterator1.isDone()) { if(!done && iterator2.isDone()) { return false; }
patch is same with buggy,283,replace,,int seg1 = iterator1.currentSegment(d1); ,int seg1 = iterator1.currentSegment(d1);
compilation error,283,replace,[CE] cannot find symbol seg2,int seg1 = iterator1.currentSegment(d1); ,int seg1 = iterator1.currentSegment(d1); if(seg1!= seg2) { return false; }
compilation error,283,replace,[CE] cannot find symbol seg1,int seg1 = iterator1.currentSegment(d1); , 
increase failing tests,292,add, [FE] AssertionFailedError,,iterator2.next(); done = iterator1.isDone() && iterator2.isDone();
compilation error,285,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,285,add,[CE] illegal start of expression,,while(!done) { seg1 = iterator1.currentSegment(d1); seg2 = iterator2.currentSegment(d2);
compilation error,285,add,[CE] variable seg1 is already defined in method equal(GeneralPath,GeneralPath),,int seg1 = iterator1.currentSegment(d1);
compilation error,291,add,[CE] illegal start of expression,,while(!Arrays.equals(d1, d2)) { return false;
compilation error,278,add,[CE] illegal start of expression,,while(!iterator1.isDone() && iterator2.isDone()) { d1 = new double[6]; d2 = new double[6];
compilation error,278,add,[CE] illegal start of expression,,while(!Arrays.equals(d1, d2)) { d1 = new double[6]; d2 = new double[6];
patch is same with buggy,277,replace,,double[] d2 = new double[6]; ,double[] d2 = new double[6];
increase failing tests,277,replace, [FE] AssertionFailedError,double[] d2 = new double[6]; ,double[] d2 = new double[7];
compilation error,294,replace,[CE] illegal start of expression,} ,if(!Arrays.equals(d1, d2)) { return false; }
compilation error,294,replace,[CE] illegal start of expression,} ,while(!Arrays.equals(d1, d2)) { return false;
compilation error,294,replace,[CE] illegal start of expression,} , 
patch is same with buggy,276,replace,,double[] d1 = new double[6]; ,double[] d1 = new double[6];
increase failing tests,276,replace, [FE] ArrayIndexOutOfBoundsException,double[] d1 = new double[6]; ,double[] d1 = new double[0];
compilation error,389,add,[CE] illegal start of type,,return new float SQRT2 =(float)Math.pow(2.0, 0.5);
compilation error,389,add,[CE] illegal start of type,,return new float SQRT2 =(float)Math.pow(0.5, 0.5);
compilation error,389,add,[CE] illegal start of type,,return new Float(SQRT2);
patch is same with buggy,285,replace,,if (seg1 != seg2) { ,if(seg1!= seg2) {
increase failing tests,285,replace, [FE] AssertionFailedError,if (seg1 != seg2) { ,if(seg1 == seg2) {
patch is same with buggy,285,replace,,if (seg1 != seg2) { , 
compilation error,275,add,[CE] cannot find symbol iterator2,,iterator2 = p1.getPathIterator(null);
compilation error,275,add,[CE] cannot find symbol iterator2,,iterator2 = iterator1.getPathIterator(null);
compilation error,275,add,[CE] illegal start of expression,,if(iterator2.isFunction()) { if(!iterator1.isFunction()) { return false; }
increase failing tests,295,replace, [FE] AssertionFailedError,return true; ,return false;
compilation error,295,replace,[CE] incompatible types,return true; ,return 0;
patch is same with buggy,295,replace,,return true; , 
compilation error,294,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { return false; } else { PathIterator iterator1 = iterator2.next(); if(!Arrays.equals(d1, d2)) { return false; }
compilation error,293,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,293,add,[CE] illegal start of expression,,while(!Arrays.equals(d1, d2)) { return false;
patch is same with buggy,274,replace,,PathIterator iterator1 = p1.getPathIterator(null); ,PathIterator iterator1 = p1.getPathIterator(null);
compilation error,274,replace,[CE] cannot find symbol iterator1,PathIterator iterator1 = p1.getPathIterator(null); , 
compilation error,265,add,[CE] illegal start of expression,,if(p1 == null) { if(p2 == null) { return false; }
compilation error,265,add,[CE] illegal start of expression,,if(p1.equals(p2)) { if(p1 == null || p2.equals(p1)) { return false; }
compilation error,265,add,[CE] illegal start of expression,,if(p1.equals(p2)) { if(p1 == null || p2 == null) { return false; }
patch is same with buggy,293,replace,,done = iterator1.isDone() && iterator2.isDone(); ,done = iterator1.isDone() && iterator2.isDone();
compilation error,288,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double[] d1 = iterator1.currentSegment(d1);
compilation error,288,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1);
compilation error,288,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double[] d1 = iterator1.currentSegment(d1); seg2 = iterator2.currentSegment(d2);
patch is same with buggy,275,replace,,PathIterator iterator2 = p1.getPathIterator(null); ,PathIterator iterator2 = p1.getPathIterator(null);
compilation error,283,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,int d1 = iterator1.currentSegment(d1);
compilation error,283,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,float d1 = iterator1.currentSegment(d1);
patch is same with buggy,288,replace,,if (!Arrays.equals(d1, d2)) { ,if(!Arrays.equals(d1, d2)) {
compilation error,288,replace,[CE] no suitable method found for equals(double[],int),if (!Arrays.equals(d1, d2)) { ,if(!Arrays.equals(d1, seg2)) {
compilation error,271,add,[CE] cannot find symbol,,boolean done = p1.isDone() && p2.isDone();
compilation error,271,add,[CE] no suitable method found for getPathIterator(GeneralPath),,PathIterator iterator1 = p1.getPathIterator(p2);
compilation error,271,add,[CE] variable iterator1 is already defined in method equal(GeneralPath,GeneralPath),,PathIterator iterator1 = p1.getPathIterator(null);
patch is same with buggy,284,replace,,int seg2 = iterator2.currentSegment(d2); ,int seg2 = iterator2.currentSegment(d2);
patch is same with buggy,268,replace,,if (p2 == null) { ,if(p2 == null) {
patch is same with buggy,389,replace,,private static final float SQRT2 = (float) Math.pow(2.0, 0.5); ,private static final float SQRT2 =(float)Math.pow(2.0, 0.5);
patch is same with buggy,389,replace,,private static final float SQRT2 = (float) Math.pow(2.0, 0.5); ,private static final float SQRT2 = (float)Math.pow(2.0, 0.5);
compilation error,280,add,[CE] not a statement,,iterator1.isDone() && iterator2.isDone();
compilation error,280,add,[CE] ';' expected,,d1 = iterator1.isDone() && d2!= d1);
compilation error,280,add,[CE] incompatible types,,d1 = iterator1.isDone();
compilation error,295,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { if(!Arrays.equals(p1, p2)) { return false; }
compilation error,295,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { if(!Arrays.equals(d2, d1)) { return false; }
patch is same with buggy,265,replace,,if (p1 == null) { ,if(p1 == null) {
compilation error,274,add,[CE] cannot find symbol,,boolean done = p1.isDone() && p2.isDone();
patch is same with buggy,278,replace,,boolean done = iterator1.isDone() && iterator2.isDone(); ,boolean done = iterator1.isDone() && iterator2.isDone();
increase failing tests,276,replace, [FE] AssertionFailedError,double[] d1 = new double[6]; ,double[] d1 = new double[2];
patch is same with buggy,276,replace,,double[] d1 = new double[6]; , 
patch is same with buggy,280,replace,,if (iterator1.isDone() != iterator2.isDone()) { ,if(iterator1.isDone()!= iterator2.isDone()) {
patch is same with buggy,277,replace,,double[] d2 = new double[6]; ,double[] d2 = new double[6];
increase failing tests,277,replace, [FE] ArrayIndexOutOfBoundsException,double[] d2 = new double[6]; ,double[] d2 = new double[1];
compilation error,274,replace,[CE] no suitable method found for getPathIterator(<null>,GeneralPath),PathIterator iterator1 = p1.getPathIterator(null); ,PathIterator iterator1 = p1.getPathIterator(null, p2);
patch is same with buggy,274,replace,,PathIterator iterator1 = p1.getPathIterator(null); ,PathIterator iterator1 = p1.getPathIterator(null);
increase failing tests,295,replace, [FE] AssertionFailedError,return true; ,return d1 == d2 && d1 == d2 && d1!= d2;
compilation error,284,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(seg1!= seg2) { return false; }
patch is same with buggy,291,replace,,iterator1.next(); ,iterator1.next();
compilation error,291,replace,[CE] not a statement,iterator1.next(); ,iterator1.next() && iterator2.next();
patch is same with buggy,278,replace,,boolean done = iterator1.isDone() && iterator2.isDone(); ,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,294,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { int seg1 = iterator1.currentSegment(d2); if(seg1!= seg2) { return false; }
compilation error,294,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,294,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { int seg1 = iterator1.currentSegment(d2); if(seg1!= seg2) { return true; }
patch is same with buggy,389,replace,,private static final float SQRT2 = (float) Math.pow(2.0, 0.5); ,private static final float SQRT2 =(float)Math.pow(2.0, 0.5);
compilation error,268,add,[CE] illegal start of expression,,if(p1 == null) { if(p1.equals(p2)) { return true; }
increase failing tests,292,add, [FE] AssertionFailedError,,iterator2.next(); done = iterator1.isDone() && iterator1.isDone();
increase failing tests,292,add, [FE] AssertionFailedError,,iterator2.next(); if(seg1!= seg2) { return true; }
patch is same with buggy,288,replace,,if (!Arrays.equals(d1, d2)) { ,if(!Arrays.equals(d1, d2)) {
compilation error,271,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = p1.equals(p2);
compilation error,275,replace,[CE] cannot find symbol p,PathIterator iterator2 = p1.getPathIterator(null); ,PathIterator iterator2 = p.getPathIterator(null);
compilation error,279,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() &&(iterator2.isDone());
compilation error,279,add,[CE] ';' expected,,boolean done = iterator1.isDone() &&(iterator2.isDone()));
patch is same with buggy,265,replace,,if (p1 == null) { ,if(p1 == null) {
compilation error,295,add,[CE] illegal start of expression,,if(seg1 == seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,295,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,295,add,[CE] illegal start of expression,,if(seg1 == seg2) { if(!Arrays.equals(d1, d2)) { return true; }
patch is same with buggy,283,replace,,int seg1 = iterator1.currentSegment(d1); ,int seg1 = iterator1.currentSegment(d1);
patch is same with buggy,292,replace,,iterator2.next(); ,iterator2.next();
compilation error,292,replace,[CE] cannot find symbol,iterator2.next(); ,iterator2.current();
patch is same with buggy,292,replace,,iterator2.next(); , 
compilation error,265,add,[CE] illegal start of expression,,if(p1.equals(p2)) { if(p1 == null) { return true; }
compilation error,265,add,[CE] illegal start of expression,,if(p1.equals(p2)) { if(p1 == null) { return false; }
compilation error,389,add,[CE] illegal start of type,,return SQRT2.floatValue();
compilation error,389,add,[CE] illegal start of type,,return new Float(Math.pow(2.0, 0.5));
compilation error,389,add,[CE] illegal start of type,,return new Float(Square.toString());
compilation error,276,add,[CE] cannot find symbol d1,,double[] seg1 = iterator1.currentSegment(d1);
compilation error,276,add,[CE] no suitable method found for currentSegment(GeneralPath),,double[] seg1 = iterator1.currentSegment(p2);
compilation error,285,add,[CE] variable seg1 is already defined in method equal(GeneralPath,GeneralPath),,int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2);
compilation error,285,add,[CE] variable seg1 is already defined in method equal(GeneralPath,GeneralPath),,int seg1 = iterator1.currentSegment(d1); if(seg2 == seg1) { return true; }
compilation error,293,add,[CE] not a statement,,iterator1.isDone() && iterator2.isDone();
compilation error,293,add,[CE] illegal start of expression,,if(seg1 == seg2) { if(!Arrays.equals(d1, d2)) { return false; }
patch is same with buggy,279,replace,,while (!done) { , 
compilation error,280,add,[CE] variable seg1 is already defined in method equal(GeneralPath,GeneralPath),,int seg1 = iterator1.currentSegment(d1);
compilation error,280,add,[CE] cannot find symbol seg2,,int seg1 = iterator1.currentSegment(d1); seg2 = iterator2.currentSegment(d2);
compilation error,291,add,[CE] variable iterator1 is already defined in method equal(GeneralPath,GeneralPath),,PathIterator iterator1 =(PathIterator)Arrays.equals(d1, d2);
compilation error,291,add,[CE] cannot find symbol,,iterator1.setSegment(seg1);
compilation error,291,add,[CE] cannot find symbol,,iterator1.setSeg1(seg1);
compilation error,277,add,[CE] illegal start of expression,,boolean done = iterator1.isDone() && iterator2.isDone(); while(d1!= null) { d2 = new double[6];
patch is same with buggy,285,replace,,if (seg1 != seg2) { ,if(seg1!= seg2) {
patch is same with buggy,285,replace,,if (seg1 != seg2) { , 
patch is same with buggy,293,replace,,done = iterator1.isDone() && iterator2.isDone(); ,done = iterator1.isDone() && iterator2.isDone();
patch is same with buggy,284,replace,,int seg2 = iterator2.currentSegment(d2); ,int seg2 = iterator2.currentSegment(d2);
compilation error,284,replace,[CE] ';' expected,int seg2 = iterator2.currentSegment(d2); ,int seg2) = iterator2.currentSegment(d2);
compilation error,278,add,[CE] variable seg1 is already defined in method equal(GeneralPath,GeneralPath),,boolean seg1 = iterator1.isDone() && iterator2.isDone();
compilation error,278,add,[CE] cannot find symbol,,boolean seg1 = iterator1.isDone() && iterator2.isSegment();
patch is same with buggy,271,replace,,if (p1.getWindingRule() != p2.getWindingRule()) { ,if(p1.getWindingRule()!= p2.getWindingRule()) {
compilation error,294,replace,[CE] illegal start of expression,} ,if(seg1 == seg2) { if(!Arrays.equals(d1, d2)) { return false; }
patch is same with buggy,268,replace,,if (p2 == null) { ,if(p2 == null) {
compilation error,274,add,[CE] cannot find symbol,,double[] d1 = p1.getDouble();
compilation error,274,add,[CE] cannot find symbol,,boolean done = p1.isDone() && iterator2.isDone();
compilation error,265,add,[CE] cannot find symbol,,boolean done = p1.getWidth() == p2.getWidth();
compilation error,294,replace,[CE] illegal start of expression,} ,if(seg1!= seg2) { int seg2 = iterator1.currentSegment(d1); if(seg2!= seg1) { return false; }
compilation error,294,replace,[CE] illegal start of expression,} ,if(seg1!= seg2) { int seg2 = iterator1.currentSegment(d1); if(seg2!= seg2) { return false; }
compilation error,295,add,[CE] illegal start of expression,,if(!Arrays.equals(d1, d2)) { if(seg1!= seg2) { return false; }
compilation error,295,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) } return false; }
patch is same with buggy,293,replace,,done = iterator1.isDone() && iterator2.isDone(); ,done = iterator1.isDone() && iterator2.isDone();
patch is same with buggy,276,replace,,double[] d1 = new double[6]; ,double[] d1 = new double[6];
increase failing tests,276,replace, [FE] AssertionFailedError,double[] d1 = new double[6]; ,double[] d1 = new double[7];
compilation error,389,add,[CE] illegal start of type,,return UnsupportedOperation.getInstance();
compilation error,389,add,[CE] illegal start of type,,return new AssertionFailedError("msg.false.value");
compilation error,389,add,[CE] illegal start of type,,return new AssertionFailedError("Math.failed to parse:" + SQRT2);
compilation error,274,add,[CE] cannot find symbol,,int seg1 = p1.getSize();
patch is same with buggy,285,replace,,if (seg1 != seg2) { ,if(seg1!= seg2) {
patch is same with buggy,285,replace,,if (seg1 != seg2) { ,if (seg1!= seg2) {
patch is same with buggy,277,replace,,double[] d2 = new double[6]; ,double[] d2 = new double[6];
patch is same with buggy,274,replace,,PathIterator iterator1 = p1.getPathIterator(null); ,PathIterator iterator1 = p1.getPathIterator(null);
increase failing tests,292,add, [FE] AssertionFailedError,,iterator2.next(); if(!Arrays.equals(d1, d2)) { return false; }
compilation error,292,add,[CE] illegal start of expression,,if(!Arrays.equals(d2, d1)) { if(seg2 == seg1) { return false; }
compilation error,271,add,[CE] incompatible types,,p1 = p1.equals(p2);
compilation error,271,add,[CE] cannot find symbol,,p1.setFrame(p2.getFrame());
increase failing tests,268,replace, [FE] AssertionFailedError,if (p2 == null) { ,if(p2 == null ||!p1.equals(p2)) {
patch is same with buggy,268,replace,,if (p2 == null) { ,if(p2 == null) {
increase failing tests,278,add, [FE] AssertionFailedError,,boolean before = iterator1.isDone() && iterator2.isDone(); while(d1!= d2) { return false; }
increase failing tests,295,replace, [FE] AssertionFailedError,return true; ,return!done;
compilation error,279,replace,[CE] cannot find symbol seg1,while (!done) { ,while(!done &&!seg1) {
compilation error,279,replace,[CE] cannot find symbol used,while (!done) { ,while(!done &&!used) {
patch is same with buggy,292,replace,,iterator2.next(); ,iterator2.next();
compilation error,280,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.getSize();
compilation error,280,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.getSize(); done = done && iterator2.isDone();
patch is same with buggy,280,replace,,if (iterator1.isDone() != iterator2.isDone()) { ,if(iterator1.isDone()!= iterator2.isDone()) {
patch is same with buggy,283,replace,,int seg1 = iterator1.currentSegment(d1); ,int seg1 = iterator1.currentSegment(d1);
compilation error,283,replace,[CE] cannot find symbol seg2,int seg1 = iterator1.currentSegment(d1); ,int seg1 = iterator1.currentSegment(d1)&&(seg2 == 0)? 1 : iterator2.currentSegment(d2);
compilation error,276,add,[CE] incompatible types,,double[] seg1 = iterator1.isDone() && iterator2.isDone();
compilation error,276,add,[CE] cannot find symbol,,boolean done = iterator1.isDone() && iterator2.isFound();
patch is same with buggy,275,replace,,PathIterator iterator2 = p1.getPathIterator(null); ,PathIterator iterator2 = p1.getPathIterator(null);
compilation error,268,add,[CE] illegal start of expression,,if(p1!= null) { if(p2 == null) { return false; }
compilation error,268,add,[CE] incompatible types,,p2 = p1.equals(p2);
compilation error,268,add,[CE] illegal start of expression,,if(p1!= null) { if(p2 == null) { return true; }
compilation error,277,add,[CE] illegal start of expression,,while(iterator1.isDone() && iterator2.isDone()) { d1 = new double[6];
compilation error,291,add,[CE] cannot find symbol,,iterator1.setSegment(seg1); iterator2.setSize(seg2);
compilation error,291,add,[CE] generics are not supported in -source 1.4,,Iterator < GeneralPath> iterator = ShapeUtilities.equal(p1, d2);
patch is same with buggy,265,replace,,if (p1 == null) { ,if(p1 == null) {
compilation error,294,add,[CE] illegal start of expression,,if(seg1!= seg2) { int seg2 = iterator1.currentSegment(d1); if(seg2!= seg3) { return false; }
compilation error,285,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2);
compilation error,285,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1); seg2 = iterator2.currentSegment(d2);
compilation error,285,add,[CE] cannot find symbol iterator3,,int seg3 = iterator3.currentSegment(d1);
patch is same with buggy,278,replace,,boolean done = iterator1.isDone() && iterator2.isDone(); ,boolean done = iterator1.isDone() && iterator2.isDone();
compilation error,288,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1); double[] d2 = iterator2.currentSegment(d2);
compilation error,288,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(seg1);
compilation error,279,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator2.isDone() && iterator1.isFunction();
compilation error,279,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator2.isDone() && iterator1.isFound();
patch is same with buggy,291,replace,,iterator1.next(); ,iterator1.next();
compilation error,291,replace,[CE] cannot find symbol,iterator1.next(); ,iterator1.isNext();
compilation error,275,add,[CE] not a statement,,double[] 6 =(double[])iterator2.getSize();
compilation error,275,add,[CE] not a statement,,double[] 6 =(double[])iterator2.getShape();
compilation error,284,add,[CE] illegal start of expression,,if(seg2!= seg1) { if(seg1!= seg2) { return false; }
compilation error,284,add,[CE] variable seg2 is already defined in method equal(GeneralPath,GeneralPath),,int seg2 = iterator2.currentSegment(d2); if(seg1!= seg2) { return false; }
patch is same with buggy,271,replace,,if (p1.getWindingRule() != p2.getWindingRule()) { ,if(p1.getWindingRule()!= p2.getWindingRule()) {
compilation error,283,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1);
compilation error,283,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2);
compilation error,283,add,[CE] variable d1 is already defined in method equal(GeneralPath,GeneralPath),,double d1 = iterator1.currentSegment(d1); int d2 = iterator2.currentSegment(d2);
patch is same with buggy,389,replace,,private static final float SQRT2 = (float) Math.pow(2.0, 0.5); ,private static final float SQRT2 =(float)Math.pow(2.0, 0.5);
patch is same with buggy,389,replace,,private static final float SQRT2 = (float) Math.pow(2.0, 0.5); ,private static final float SQRT2 = (float)Math.pow(2.0, 0.5);
compilation error,293,add,[CE] illegal start of expression,,if(seg1!= seg2) { if(!Arrays.equals(d1, d2)) { return false; }
compilation error,293,add,[CE] variable done is already defined in method equal(GeneralPath,GeneralPath),,boolean done = iterator1.isDone() && iterator2.isFound();
patch is same with buggy,284,replace,,int seg2 = iterator2.currentSegment(d2); ,int seg2 = iterator2.currentSegment(d2);
patch is same with buggy,288,replace,,if (!Arrays.equals(d1, d2)) { ,if(!Arrays.equals(d1, d2)) {
compilation error,288,replace,[CE] cannot find symbol,if (!Arrays.equals(d1, d2)) { ,if(!Arrays.equals(d1, d2)&& isShape(seg1)) {
