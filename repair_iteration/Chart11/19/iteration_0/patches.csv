bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	return  false;	return  true;  	compilable	  [FE]  AssertionFailedError  	37	2	replace
2	[BUG]  [BUGGY]  return  false;  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  return  false;  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	return  false;	return  true;  	compilable	  [FE]  AssertionFailedError  	37	2	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	throw  new  IllegalArgumentException( " ");	return  true;  	compilable	  [FE]  IllegalArgumentException  	37	2	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	throw  new  IllegalArgumentException( " ");	return  true;  	compilable	  [FE]  IllegalArgumentException  	37	2	replace
5	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]        AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	  	return  true;  	non-compiled	[CE]  missing  return  statement	37	None	replace
6	[BUG]  [BUGGY]    int  seg2  =  iterator1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    int  seg2  =  iterator1.getSegmentCount();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	    int  seg2  =  iterator1.getSegmentCount();		non-compiled	[CE]  cannot  find  symbol	38	None	add
7	[BUG]  [BUGGY]    int  seg2  =  iterator1.next();  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    int  seg2  =  iterator1.next();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	    int  seg2  =  iterator1.next();		non-compiled	[CE]  incompatible  types	38	None	add
8	[BUG]  [BUGGY]    int  seg2  =  iterator2.getSegmentCount();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    int  seg2  =  iterator2.getSegmentCount();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	    int  seg2  =  iterator2.getSegmentCount();		non-compiled	[CE]  cannot  find  symbol	38	None	add
9	[BUG]  [BUGGY]  if(does)  {  return  true;  }  [CE]  cannot  find  symbol  does  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  if(does)  {  return  true;  }  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(does)  {  return  true;  }	return  true;  	non-compiled	[CE]  cannot  find  symbol  does	37	None	replace
10	[BUG]  [BUGGY]    PathIterator  iterator1  =  p2.getPathIterator();  [CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    PathIterator  iterator1  =  p2.getPathIterator();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	    PathIterator  iterator1  =  p2.getPathIterator();		non-compiled	[CE]  variable  iterator1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	38	None	add
11	[BUG]  [BUGGY]  if(doeseg1)  {  return  true;  }  [CE]  cannot  find  symbol  doeseg1  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]  if(doeseg1)  {  return  true;  }  [BUGGY]  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(doeseg1)  {  return  true;  }	return  true;  	non-compiled	[CE]  cannot  find  symbol  doeseg1	37	None	replace
12	[BUG]  [BUGGY]    int  seg2  =  p1.getSegmentCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]    int  seg2  =  p1.getSegmentCount();  [BUGGY]  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	    int  seg2  =  p1.getSegmentCount();		non-compiled	[CE]  cannot  find  symbol	38	None	add
