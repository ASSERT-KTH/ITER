bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1  ==  null  ||  p2!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1  ==  null  ||  p2!=  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p2!=    null)    {    if(p1  ==  null  ||  p2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
2	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1!=  null  ||  p2!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1!=  null  ||  p2!=  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p2!=    null)    {    if(p1!=  null  ||  p2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
3	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    if(p1  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
4	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1!=  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    if(p1!=  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {	  if(p2    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    if(p2    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
6	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {	  if(p2    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    if(p2    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
8	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
9	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  <identifier>  expected	27	None	add
10	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	27	None	add
11	[BUG]  [BUGGY]  parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;	  if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
12	[BUG]  [BUGGY]  parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	parent  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
14	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
16	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
18	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
19	[BUG]  [BUGGY]  If(p1  ==  null  ||  p2  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  If(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	If(p1  ==  null  ||  p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    If(p1    ==    null    ||    p2    ==    null)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
20	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  if(p1  ==  null)  {  return  p2!=  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  return  p2!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null)  {  return  p2!=  null;  }	          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1    ==    null)    {    return    p2!=    null;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
22	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
23	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
24	[BUG]  [BUGGY]  return  p2!=  null;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  return  p2!=  null;  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	return  p2!=  null;	  return    p2    ==    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null  ||  p2!=  null)  {  return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
26	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	25	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
28	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
29	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p	  	non-compiled	[CE]  ')'  expected	25	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1!=  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    if(p2!=    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	20	2	replace
31	[BUG]  [BUGGY]  if(p1!=  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1!=  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    if(p2!=    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	20	2	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1  ==  null  ||  p2.equals(p1))  {	  if(p1    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
33	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null  ||  p2.equals(p1))  {	  if(p1    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
34	[BUG]  [BUGGY]  double  SQRT2  =  p2.getSQRT2();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  double  SQRT2  =  p2.getSQRT2();  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	double  SQRT2  =  p2.getSQRT2();	  float    SQRT2    =    p2.getSQRT2();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
36	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	18	1	replace
37	[BUG]  [BUGGY]  If(p1  ==  null  ||  p1.equals(p2))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  If(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	If(p1  ==  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    If(p2    ==    null    ||    p1.equals(p2))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
38	[BUG]  [BUGGY]  If(p2  ==  null  ||  p1.equals(p2))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  If(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	If(p2  ==  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    If(p2    ==    null    ||    p1.equals(p2))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
40	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	2	add
42	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	2	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	2	add
44	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	13	2	add
45	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
46	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1!=  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1!=  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1!=  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
47	[BUG]  [BUGGY]  double  SQRT2  =  p1.getSQRT2()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  double  SQRT2  =  p1.getSQRT2()  +  1;  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	double  SQRT2  =  p1.getSQRT2()  +  1;	  double    SQRT2    =    p1.getSQRT2();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
49	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
51	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p2!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p2!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
53	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p2!=  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p2!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p2!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
54	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
55	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p1.getWindingRule()  >=  p2.getWindingRule())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p1.getWindingRule()  >=  p2.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1  ==  null  ||  p1.getWindingRule()  >=  p2.getWindingRule())  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
57	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
59	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
61	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
62	[BUG]  [BUGGY]  return  p1  ==  null;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  return  p1  ==  null;  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	return  p1  ==  null;	  if(p2    ==    null)    {    return    p1    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
64	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
66	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
68	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1    ==    null)    {    return    p2!=    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	31	1	add
69	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
71	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2!=  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2!=  null;  }  if(p1!=  null)  {  return  p2  ==  null;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
72	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  If(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  If(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    If(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	  	non-compiled	[CE]  ';'  expected	23	None	add
73	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null)  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1    ==    null)    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
74	[BUG]  [BUGGY]  if(p1!=  null)  {  return  p2  ==  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1!=  null)  {  return  p2  ==  null;  }	          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=    null)    {    return    p2    ==    null;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p1.equals(p2))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    If(p1  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
77	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	25	1	add
78	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p2.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p2.getWindingRule()!=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p2.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	25	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
80	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
82	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1    ==    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
84	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
86	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
87	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  If(p1  ==  null  ||  p2!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  If(p1  ==  null  ||  p2!=  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p2!=    null)    {    If(p1  ==  null  ||  p2!=  null)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
88	[BUG]  [BUGGY]  parent  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  parent  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	parent  ==  null)  {  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }	  if(p1    ==    null)    {    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
90	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
91	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p	  	non-compiled	[CE]  ')'  expected	27	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
93	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null)  {  if(p2.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }	          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p2  ==  null  ||  p1!=  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p2  ==  null  ||  p1!=  null)  {	  if(p1    ==    null    ||    p2!=    null)    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
95	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p2  ==  null  ||  p1!=  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null  ||  p1!=  null)  {	  if(p1    ==    null    ||    p2!=    null)    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
96	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p2.	  	non-compiled	[CE]  <identifier>  expected	27	None	add
97	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p1.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()  >=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p1.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()    >=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()  >=  p1.	  	non-compiled	[CE]  <identifier>  expected	27	None	add
98	[BUG]  [BUGGY]  vice.equals(p1.getVisiblePath());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  vice.equals(p1.getVisiblePath());  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	vice.equals(p1.getVisiblePath());	          if(p1    ==    null)    {    return    false;    }    if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  pendency(p1,  p2);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  pendency(p1,  p2);  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	pendency(p1,  p2);	          if(p1    ==    null)    {    return    false;    }    if(p1    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  if(p2  ==  null)  {  return  p1!=  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p2  ==  null)  {  return  p1!=  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null)  {  return  p1!=  null;  }	          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1    ==    null)    {    return    p2!=    null;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p3!=  null)  {  return  p2  ==  null;  }  [CE]  cannot  find  symbol  p3  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    p2    ==    null;    }    if(p1!=  null)  {  return  p2  ==  null;  }  if(p1  ==  null)  {  return  p2  ==  null;  }  if(p3!=  null)  {  return  p2  ==  null;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        p2        ==        null;        }        if(p1!=    null)    {    return    p2    ==    null;    }    if(p1  ==  null)  {  return  p2  ==  null;  }  if(p3!=  null)  {  return  p2  ==  null;  }	  	non-compiled	[CE]  cannot  find  symbol  p3	15	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
103	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
105	[BUG]  [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1    ==    null)    {    return    false;    }    if(p1!=  null)  {  return  false;  }  if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1        ==        null)        {        return        false;        }        if(p1!=    null)    {    return    false;    }    if(p1  ==  null)  {  return  false;  }  if(p2!=  null)  {  return  false;  }  if(p1!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	8	2	add
106	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p1  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1    ==    null    ||    p1.getWindingRule()!=    p2.getWindingRule())    {    if(p1  ==  null  ||  p2.getWindingRule()!=  p1.getWindingRule())  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
107	[BUG]  [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]          if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	                if(p1.getWindingRule()!=        p2.getWindingRule())        {        return        false;        }        if(p1.getWindingRule()!=    p2.getWindingRule())    {    return    false;    }    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p1.getWindingRule())  {  return  false;  }  if(p1.getWindingRule()!=  p2.	  	non-compiled	[CE]  <identifier>  expected	25	None	add
108	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  if(p2  ==  null  ||  p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null  ||  p1  ==  null)  {  return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
109	[BUG]  [BUGGY]  If(p2  ==  null  ||  p1  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  If(p2  ==  null  ||  p1  ==  null)  {  [BUGGY]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	If(p2  ==  null  ||  p1  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    If(p1    ==    null    ||    p2    ==    null)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
110	[BUG]  [BUGGY]  return  p2  ==  null  ||  p1.equals(p2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }      [BUGGY]  return  p2  ==  null  ||  p1.equals(p2);  [BUGGY]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	return  p2  ==  null  ||  p1.equals(p2);	  return    p2    ==    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
