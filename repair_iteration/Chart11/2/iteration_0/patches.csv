bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
3	[BUG]  [BUGGY]    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    if(p1.getWindingRule()!=  p2.getWindingRule())  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
4	[BUG]  [BUGGY]    float  SQRT2  =  p1.getSQRT2();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    float  SQRT2  =  p1.getSQRT2();  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    float  SQRT2  =  p1.getSQRT2();		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1  ==  null  ||  p2  ==  null)  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
6	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null  ||  p2  ==  null)  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  return  false;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	    if(p1  ==  null)  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
8	[BUG]  [BUGGY]    if(p1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  return  false;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    if(p1  ==  null)  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	    if(p1  ==  null)  {  return  p2  ==  null;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
10	[BUG]  [BUGGY]    if(p1  ==  null)  {  return  p2  ==  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  return  p2  ==  null;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    if(p1  ==  null)  {  return  p2  ==  null;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
11	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }  [BUGGY]  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p2  ==  null  ||  p1.equals(p2))  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
13	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null  ||  p1.equals(p2))  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p2  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
15	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  [BUGGY]  if(p2  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p2  ==  null  ||  p1.getWindingRule()!=  p2.getWindingRule())  {	if  (p2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	1	replace
