bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2  ==  null)  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
2	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2  ==  null)  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	  	if  (p1  ==  null)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]    boolean  done  =  p1.equals(p2.equals(p1));  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    boolean  done  =  p1.equals(p2.equals(p1));  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    boolean  done  =  p1.equals(p2.equals(p1));		non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	2	None	add
5	[BUG]  [BUGGY]    boolean  done  =  p1.equals(p2);  [CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    boolean  done  =  p1.equals(p2);  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    boolean  done  =  p1.equals(p2);		non-compiled	[CE]  variable  done  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	2	None	add
6	[BUG]  [BUGGY]    boolean  done  =  p1.equals(p2.equals(p2));  [CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    boolean  done  =  p1.equals(p2.equals(p2));  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    boolean  done  =  p1.equals(p2.equals(p2));		non-compiled	[CE]  method  equals  in  class  Object  cannot  be  applied  to  given  types;	2	None	add
7	[BUG]  [BUGGY]    boolean  done  =  p1.getDouble()  ==  p2.getDouble();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    boolean  done  =  p1.getDouble()  ==  p2.getDouble();  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    boolean  done  =  p1.getDouble()  ==  p2.getDouble();		non-compiled	[CE]  cannot  find  symbol	2	None	add
8	[BUG]  [BUGGY]    boolean  done  =(p1.getSQRT2()  ==  p2.getSQRT2);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    boolean  done  =(p1.getSQRT2()  ==  p2.getSQRT2);  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    boolean  done  =(p1.getSQRT2()  ==  p2.getSQRT2);		non-compiled	[CE]  cannot  find  symbol	2	None	add
9	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
10	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }  [BUGGY]  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  return  true;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2.equals(p1))  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
12	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  [BUGGY]  if(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2.equals(p1))  {	if  (p1  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
