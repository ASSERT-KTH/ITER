bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  done  =(p1.getSQRT2()!=  p2.getSQRT1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =(p1.getSQRT2()!=  p2.getSQRT1);  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =(p1.getSQRT2()!=  p2.getSQRT1);	  boolean    done    =(p1.getSQRT2()    ==    p2.getSQRT1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2    ==    null    ||    p1.equals(p2))    {    if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
3	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2    ==    null    ||    p1.equals(p2))    {    if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
4	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1  ==  null  ||  p2!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1  ==  null  ||  p2!=  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2!=    null)    {    if(p1  ==  null  ||  p2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
5	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1!=  null  ||  p2!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  if(p1!=  null  ||  p2!=  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2!=    null)    {    if(p1!=  null  ||  p2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
6	[BUG]  [BUGGY]  If(p1  ==  null  ||  p2  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  If(p1  ==  null  ||  p2  ==  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	If(p1  ==  null  ||  p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    If(p1    ==    null    ||    p2    ==    null)    {    	non-compiled	[CE]  ';'  expected	19	None	replace
7	[BUG]  [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1!=  null)  {  if(p2  ==  null)  {  return  false;  }  if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    if(p1  ==  null)  {  if(p2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]  boolean  done  =  p1.getName().equals(p2.getName());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =  p1.getName().equals(p2.getName());  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =  p1.getName().equals(p2.getName());	  boolean    done    =    p1.equals(p2.getName());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  If(p1  ==  null  ||  p2.equals(p1))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  If(p1  ==  null  ||  p2.equals(p1))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	If(p1  ==  null  ||  p2.equals(p1))  {	  if(p1    ==    null    ||    p2.equals(p1))    {    If(p1    ==    null    ||    p2.equals(p1))    {    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {	  if(p1    ==    null    ||    p2    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
12	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2!=  null  ||  p1.equals(p2))  {	  if(p1    ==    null    ||    p2    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError  	21	2	replace
13	[BUG]  [BUGGY]  boolean  done  =  p1.getSQRT2().equals(p2.getSQRT1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =  p1.getSQRT2().equals(p2.getSQRT1);  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =  p1.getSQRT2().equals(p2.getSQRT1);	  boolean    done    =    p1.getSQRT2().equals(p2.getSQRT2);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  boolean  done  =  p1.equals(p2)&&  p2.equals(p1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =  p1.equals(p2)&&  p2.equals(p1);  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =  p1.equals(p2)&&  p2.equals(p1);	  boolean    done    =    p1.equals(p2)||    p2.equals(p1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
15	[BUG]  [BUGGY]  boolean  done  =  p1.equals(p2.equals(p1,  p2));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =  p1.equals(p2.equals(p1,  p2));  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =  p1.equals(p2.equals(p1,  p2));	  boolean    done    =    p1.equals(p2.equals(p1),    p2);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  parent  ==  null)  {  if(p1  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  parent  ==  null)  {  if(p1  ==  null)  {  return  true;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	parent  ==  null)  {  if(p1  ==  null)  {  return  true;  }	  parent    ==    null)    {    if(p2    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
17	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    if(p1  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
18	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1!=  null  ||  p1.equals(p2))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  if(p1!=  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    if(p1!=  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  ||  p2.equals(p2))  {	  if(p1    ==    null    ||    p2.equals(p1))    {    if(p1    ==    null    ||    p2.equals(p1))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
20	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2.equals(p2))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2.equals(p2))  {	  if(p1    ==    null    ||    p2.equals(p1))    {    if(p1    ==    null    ||    p2.equals(p1))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
21	[BUG]  [BUGGY]  parent  ==  null)  {  if(p1  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  parent  ==  null)  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	parent  ==  null)  {  if(p1  ==  null)  {  return  false;  }	  parent    ==    null)    {    if(p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
22	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2!=  null)  {  return  false;  }	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
23	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  If(p1  ==  null  ||  p2!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2!=  null)  {  If(p1  ==  null  ||  p2!=  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2!=    null)    {    If(p1  ==  null  ||  p2!=  null)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
24	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p2    ==    null    ||    p1.equals(p2))    {    If(p1  ==  null  ||  p2  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
25	[BUG]  [BUGGY]  parent!=  null)  {  if(p1  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  parent!=  null)  {  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	parent!=  null)  {  if(p1  ==  null)  {  return  false;  }	  parent    ==    null)    {    if(p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
26	[BUG]  [BUGGY]  parent!=  null)  {  if(p1  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  parent!=  null)  {  if(p1  ==  null)  {  return  true;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	parent!=  null)  {  if(p1  ==  null)  {  return  true;  }	  parent    ==    null)    {    if(p2    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
27	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p1.equals(p2))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  If(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1    ==    null    ||    p1.equals(p2))    {    If(p1  ==  null  ||  p1.equals(p2))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p2  ==  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
29	[BUG]  [BUGGY]  if(p2  ==  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p2  ==  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
30	[BUG]  [BUGGY]  boolean  done  =  p1.equals(p1.getName(),  p2.getName());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  boolean  done  =  p1.equals(p1.getName(),  p2.getName());  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	boolean  done  =  p1.equals(p1.getName(),  p2.getName());	  boolean    done    =    p1.equals(p2.equals(p1),    p2);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p2  ==  null  ||  p1.equals(p2))  {	  if(p1    ==    null    ||    p2.equals(p1))    {    If(p1    ==    null    ||    p2.equals(p1))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
32	[BUG]  [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p2  ==  null  ||  p1.equals(p2))  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p2  ==  null  ||  p1.equals(p2))  {	  if(p1    ==    null    ||    p2.equals(p1))    {    If(p1    ==    null    ||    p2.equals(p1))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
33	[BUG]  [BUGGY]  if(p1  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null)  {  return  false;  }  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null)  {  return  false;  }	  if(p1!=    null)    {    if(p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(p1  ==  null  ||  p2  ==  null)return  false;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  ||  p2  ==  null)return  false;  [BUGGY]      if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  ||  p2  ==  null)return  false;	  if(p1    ==    null    ||    p2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
