bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d1);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	double  SQRT2  =  iterator2.currentSegment(d1);	  float    SQRT2    =    iterator2.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	int  SQRT2  =  iterator1.currentSegment(d2);	          float    SQRT2    =    iterator1.currentSegment(d2);    int    SQRT2    =    iterator1.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  int  seg1  =  iterator1.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  int  seg1  =  iterator1.currentSegment(d2);  [BUGGY]      return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	int  seg1  =  iterator1.currentSegment(d2);	  int    seg1    =    iterator1.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  double  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  double  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d2);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	double  SQRT2  =  iterator1.currentSegment(d1);  float  SQRT2  =  iterator1.currentSegment(d2);	          float    SQRT2    =    iterator1.currentSegment(d1);    float    SQRT2    =    iterator1.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  Iterator  iterator1  =  p1.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  Iterator  iterator1  =  p1.iterator();  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	Iterator  iterator1  =  p1.iterator();	  Iterator    iterator1    =    p1.getPathIterator(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  int  SQRT2  =  iterator1.currentSegment(d1);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	int  SQRT2  =  iterator1.currentSegment(d1);	          float    SQRT2    =    iterator1.currentSegment(d1);    int    SQRT2    =    iterator1.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d2);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  double  SQRT2  =  iterator2.currentSegment(d2);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	double  SQRT2  =  iterator2.currentSegment(d2);	  float    SQRT2    =    iterator2.currentSegment(d2);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]  Iterator  iterator1  =  p2.getPathIterator(null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  Iterator  iterator1  =  p2.getPathIterator(null);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	Iterator  iterator1  =  p2.getPathIterator(null);	  Iterator    iterator1    =    p1.getPathIterator(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  Iterator  iterator1  =  p1.getPathIterator(d1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  Iterator  iterator1  =  p1.getPathIterator(d1);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	Iterator  iterator1  =  p1.getPathIterator(d1);	  Iterator    iterator1    =    p1.getPathIterator(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  Iterator  iterator1  =  iterator2.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  Iterator  iterator1  =  iterator2.currentSegment(d1);  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	Iterator  iterator1  =  iterator2.currentSegment(d1);	  Iterator    iterator1    =    iterator1.getPathIterator(null);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  int  seg1  =  iterator2.currentSegment(d1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  int  seg1  =  iterator2.currentSegment(d1);  [BUGGY]      return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	int  seg1  =  iterator2.currentSegment(d1);	  int    seg1    =    iterator1.currentSegment(d1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  Iterator  iterator1  =  p2.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {      [BUGGY]  Iterator  iterator1  =  p2.iterator();  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	Iterator  iterator1  =  p2.iterator();	  Iterator    iterator1    =    p1.getPathIterator(null);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
