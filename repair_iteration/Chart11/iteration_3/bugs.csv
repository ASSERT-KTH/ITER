bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  &&  p2!=  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  &&  p2!=  null)  {	  if(p1    ==    null    &&    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	15	1
87	[BUG]  [BUGGY]  if(p1  ==  null  &&  p2!=  null)  {  [FE]  AssertionFailedError  [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {      [BUGGY]  if(p1  ==  null  &&  p2!=  null)  {  [BUGGY]      return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  &&  p2!=  null)  {	  if(p1    ==    null    &&    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	15	1
3290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  before  =  iterator2.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  before  =  iterator2.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3291	[BUG]  [BUGGY]  boolean  before  =  iterator2.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  before  =  iterator2.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  before  =  iterator2.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  final  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	final  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3292	[BUG]  [BUGGY]  final  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  final  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	final  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&!done  &&  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	590	1
3537	[BUG]  [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&!done  &&  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	590	1
3290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  after  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  after  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3291	[BUG]  [BUGGY]  boolean  after  =  iterator1.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  after  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  after  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
8294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  1.5);  [BUGGY]        [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  1.5);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	1383	1
8295	[BUG]  [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  1.5);  [FE]  AssertionFailedError  [CONTEXT]        [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  1.5);  [BUGGY]        [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  1.5);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	1383	1
3541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&  iterator1.isDone()  &&  iterator2.isDone())  {  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator1.isDone()  &&  iterator2.isDone())  {	  while(!done    &&    iterator1.isDone()    ||    iterator2.isDone())    {    	compilable	  [FE]  AssertionFailedError	591	1
3542	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone()  &&  iterator2.isDone())  {  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&  iterator1.isDone()  &&  iterator2.isDone())  {  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator1.isDone()  &&  iterator2.isDone())  {	  while(!done    &&    iterator1.isDone()    ||    iterator2.isDone())    {    	compilable	  [FE]  AssertionFailedError	591	1
3291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  thereafter  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  thereafter  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3292	[BUG]  [BUGGY]  boolean  thereafter  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  boolean  thereafter  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  thereafter  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	549	1
3536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())	  	compilable	  [FE]  AssertionFailedError	590	1
3537	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  [FE]  AssertionFailedError  [CONTEXT]      return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  [BUGGY]      if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())	  	compilable	  [FE]  AssertionFailedError	590	1
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  p2.equals(p1);  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	189	1
1132	[BUG]  [BUGGY]  p2.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]      public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }      [BUGGY]  p2.equals(p1);  [BUGGY]      if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	189	1
8294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]        [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  2.0);  [BUGGY]        [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  2.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	1383	1
8295	[BUG]  [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  2.0);  [FE]  AssertionFailedError  [CONTEXT]        [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  2.0);  [BUGGY]        [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  2.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	1383	1
3289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[6];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[6];  }	  	compilable	  [FE]  AssertionFailedError	549	1
3290	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[6];  }  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[6];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[6];  }	  	compilable	  [FE]  AssertionFailedError	549	1
3290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[4];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[4];  }	  	compilable	  [FE]  AssertionFailedError	549	1
3291	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[4];  }  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[4];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[4];  }	  	compilable	  [FE]  AssertionFailedError	549	1
3291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[3];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[3];  }	  	compilable	  [FE]  AssertionFailedError	549	1
3292	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[3];  }  [FE]  AssertionFailedError  [CONTEXT]      if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];      [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[3];  }  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[7];  d2  =  new  double[3];  }	  	compilable	  [FE]  AssertionFailedError	549	1
