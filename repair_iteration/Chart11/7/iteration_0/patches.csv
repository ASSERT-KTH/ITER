bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double[]  d1  =  new  double[6];  [CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    double[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    double[]  d1  =  new  double[6];		non-compiled	[CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	14	None	add
2	[BUG]  [BUGGY]    float[]  d1  =  new  float[6];  [CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    float[]  d1  =  new  float[6];  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    float[]  d1  =  new  float[6];		non-compiled	[CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	14	None	add
3	[BUG]  [BUGGY]    float[]  d1  =  new  double[6];  [CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]        AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    float[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    float[]  d1  =  new  double[6];		non-compiled	[CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	14	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[1];  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	add	double[]  d2  =  new  double[1];	double[]  d2  =  new  double[6];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	replace
5	[BUG]  [BUGGY]  double[]  d2  =  new  double[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[1];  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	double[]  d2  =  new  double[1];	double[]  d2  =  new  double[6];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	2	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[2];  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	add	double[]  d2  =  new  double[2];	double[]  d2  =  new  double[6];  	compilable	  [FE]  AssertionFailedError  	13	2	replace
7	[BUG]  [BUGGY]  double[]  d2  =  new  double[2];  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]  double[]  d2  =  new  double[2];  [BUGGY]  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	double[]  d2  =  new  double[2];	double[]  d2  =  new  double[6];  	compilable	  [FE]  AssertionFailedError  	13	2	replace
8	[BUG]  [BUGGY]    if(iterator1.isDone())  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    if(iterator1.isDone())  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    if(iterator1.isDone())  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
9	[BUG]  [BUGGY]    if(iterator1!=  null)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    if(iterator1!=  null)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    if(iterator1!=  null)  {  if(iterator1.isDone()!=  iterator2.isDone())  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
10	[BUG]  [BUGGY]    if(iterator1!=  null)  {  if(iterator2  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  [BUGGY]    if(iterator1!=  null)  {  if(iterator2  ==  null)  {  return  false;  }  [BUGGY]  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	    if(iterator1!=  null)  {  if(iterator2  ==  null)  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
