bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	if(iterator1.isDone()  >=  iterator2.isDone())  {  return  false;  }	  if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
2	[BUG]  [BUGGY]  double[]  d2  =  new  double[7];  double[]  d2  =  new  double[7];  [CE]  variable  d2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]    AssertionFailedError    [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  double[]  d2  =  new  double[7];  double[]  d2  =  new  double[7];  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	double[]    d2    =    new    double[7];    double[]  d2  =  new  double[7];	  	non-compiled	[CE]  variable  d2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	10	None	add
3	[BUG]  [BUGGY]  double[]  d2  =  new  double[7];  Double[]  d2  =  new  double[7];  [CE]  variable  d2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]      AssertionFailedError    [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  double[]  d2  =  new  double[7];  Double[]  d2  =  new  double[7];  [BUGGY]      boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	double[]    d2    =    new    double[7];    Double[]  d2  =  new  double[7];	  	non-compiled	[CE]  variable  d2  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	10	None	add
4	[BUG]  [BUGGY]  double[]  d1  =  new  double[7];  [CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)  [FE]                AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  double[]  d1  =  new  double[7];  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	double[]  d1  =  new  double[7];	  double[]    d1    =    new    double[2];    	non-compiled	[CE]  variable  d1  is  already  defined  in  method  equal(GeneralPath,GeneralPath)	4	None	replace
5	[BUG]  [BUGGY]  if(iterator1.isDone()  >>  iterator2.isDone())  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  if(iterator1.isDone()  >>  iterator2.isDone())  {  return  false;  }  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	if(iterator1.isDone()  >>  iterator2.isDone())  {  return  false;  }	  if(iterator1.isDone()!=    iterator2.isDone())    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	7	None	replace
6	[BUG]  [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator2.isDone())  {  return  false;  }	  if(iterator1!=    null)    {    if(iterator2.isDone()!=    iterator2.isDone())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
7	[BUG]  [BUGGY]  if(iterator1  ==  null)  {  if(iterator2!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  if(iterator1  ==  null)  {  if(iterator2!=  null)  {  return  false;  }  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	if(iterator1  ==  null)  {  if(iterator2!=  null)  {  return  false;  }	  if(iterator1    ==    null)    {    if(iterator2    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];      [BUGGY]  if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }  [BUGGY]      double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	277	277	1	replace	if(iterator1  ==  null)  {  if(iterator2.isDone()!=  iterator1.isDone())  {  return  false;  }	  if(iterator1!=    null)    {    if(iterator2.isDone()!=    iterator1.isDone())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
