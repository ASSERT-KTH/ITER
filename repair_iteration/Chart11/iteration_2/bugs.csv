bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  {	  while(!done    &&    iterator1.isDone())    {    	compilable	  [FE]  AssertionFailedError	99	1
591	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  {  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator1.isDone()  ||  iterator2.isDone())  {	  while(!done    &&    iterator1.isDone())    {    	compilable	  [FE]  AssertionFailedError	99	1
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	if(p1  ==  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError	15	1
86	[BUG]  [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  if(p1  ==  null  ||  p1.equals(p2))  {  [BUGGY]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	if(p1  ==  null  ||  p1.equals(p2))  {	  if(p2    ==    null    ||    p1.equals(p2))    {    	compilable	  [FE]  AssertionFailedError	15	1
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	19	1
111	[BUG]  [BUGGY]  p1.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	19	1
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  p2.equals(p1);  [BUGGY]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	add	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	19	1
112	[BUG]  [BUGGY]  p2.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }    [BUGGY]  p2.equals(p1);  [BUGGY]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	268	268	1	replace	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	19	1
949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }    [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d2,  d1))  {  [BUGGY]    return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	add	if(!Arrays.equals(d1,  d2)||!Arrays.equals(d2,  d1))  {	  if(!Arrays.equals(d1,    d2)||!Arrays.equals(d1,    d2))    {    	compilable	  [FE]  AssertionFailedError	159	1
950	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d2,  d1))  {  [FE]  AssertionFailedError  [CONTEXT]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }    [BUGGY]  if(!Arrays.equals(d1,  d2)||!Arrays.equals(d2,  d1))  {  [BUGGY]    return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	replace	if(!Arrays.equals(d1,  d2)||!Arrays.equals(d2,  d1))  {	  if(!Arrays.equals(d1,    d2)||!Arrays.equals(d1,    d2))    {    	compilable	  [FE]  AssertionFailedError	159	1
950	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }    [BUGGY]  if(!Arrays.equals(d1,  d2)&&!Arrays.equals(d2,  d1))  {  [BUGGY]    return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	add	if(!Arrays.equals(d1,  d2)&&!Arrays.equals(d2,  d1))  {	  if(!Arrays.equals(d1,    d2)||!Arrays.equals(d1,    d2))    {    	compilable	  [FE]  AssertionFailedError	159	1
951	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d2)&&!Arrays.equals(d2,  d1))  {  [FE]  AssertionFailedError  [CONTEXT]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }    [BUGGY]  if(!Arrays.equals(d1,  d2)&&!Arrays.equals(d2,  d1))  {  [BUGGY]    return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	288	288	1	replace	if(!Arrays.equals(d1,  d2)&&!Arrays.equals(d2,  d1))  {	  if(!Arrays.equals(d1,    d2)||!Arrays.equals(d1,    d2))    {    	compilable	  [FE]  AssertionFailedError	159	1
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  PathIterator  iterator  =  p2.getPathIterator(null);  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	add	PathIterator  iterator  =  p2.getPathIterator(null);	  	compilable	  [FE]  AssertionFailedError	45	1
267	[BUG]  [BUGGY]  PathIterator  iterator  =  p2.getPathIterator(null);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }    [BUGGY]  PathIterator  iterator  =  p2.getPathIterator(null);  [BUGGY]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	274	274	1	replace	PathIterator  iterator  =  p2.getPathIterator(null);	  	compilable	  [FE]  AssertionFailedError	45	1
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  if(p1  ==  null  &&  p2  ==  null)  {  [BUGGY]    return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  &&  p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	3	1
15	[BUG]  [BUGGY]  if(p1  ==  null  &&  p2  ==  null)  {  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  if(p1  ==  null  &&  p2  ==  null)  {  [BUGGY]    return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  &&  p2  ==  null)  {	  if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	3	1
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	98	1
585	[BUG]  [BUGGY]  while(!done  &&  iterator1.isDone())  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&  iterator1.isDone())  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	98	1
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  if(p1  ==  null  &&  p2.equals(p2))  {  [BUGGY]    return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	if(p1  ==  null  &&  p2.equals(p2))  {	  if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	3	1
14	[BUG]  [BUGGY]  if(p1  ==  null  &&  p2.equals(p2))  {  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  if(p1  ==  null  &&  p2.equals(p2))  {  [BUGGY]    return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	if(p1  ==  null  &&  p2.equals(p2))  {	  if(p1    ==    null    ||    p2    ==    null)    {    	compilable	  [FE]  AssertionFailedError	3	1
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
550	[BUG]  [BUGGY]  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  before  =  iterator1.isDone()  ||  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	9	1
51	[BUG]  [BUGGY]  p1.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	9	1
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  p2.equals(p1);  [BUGGY]    if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	add	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	9	1
52	[BUG]  [BUGGY]  p2.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {    [BUGGY]  p2.equals(p1);  [BUGGY]    if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	265	265	1	replace	p2.equals(p1);	  	compilable	  [FE]  AssertionFailedError	9	1
1382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]      [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.5);  [BUGGY]      [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.5);	  private    static    final    double    SQRT2    =(float)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	231	1
1383	[BUG]  [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.5);  [FE]  AssertionFailedError  [CONTEXT]      [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.5);  [BUGGY]      [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	private  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.5);	  private    static    final    double    SQRT2    =(float)Math.pow(2.0,    0.5);    	compilable	  [FE]  AssertionFailedError	231	1
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	32	1
190	[BUG]  [BUGGY]  p1.equals(p1);  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }    [BUGGY]  p1.equals(p1);  [BUGGY]    if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	p1.equals(p1);	  	compilable	  [FE]  AssertionFailedError	32	1
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  after  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  after  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
549	[BUG]  [BUGGY]  boolean  after  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  after  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  after  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  afterwards  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	boolean  afterwards  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
550	[BUG]  [BUGGY]  boolean  afterwards  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  boolean  afterwards  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	boolean  afterwards  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError	92	1
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&!done  &&  iterator1.isDone())  {	  while(!done    &&    iterator1.isDone())    {    	compilable	  [FE]  AssertionFailedError	99	1
591	[BUG]  [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  {  [FE]  AssertionFailedError  [CONTEXT]    return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();    [BUGGY]  while(!done  &&!done  &&  iterator1.isDone())  {  [BUGGY]    if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&!done  &&  iterator1.isDone())  {	  while(!done    &&    iterator1.isDone())    {    	compilable	  [FE]  AssertionFailedError	99	1
1335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(!Arrays.equals(d1,  d1))  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	add	if(!Arrays.equals(d1,  d1))  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError	223	1
1336	[BUG]  [BUGGY]  if(!Arrays.equals(d1,  d1))  {  return  false;  }  [FE]  AssertionFailedError  [CONTEXT]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }    [BUGGY]  if(!Arrays.equals(d1,  d1))  {  return  false;  }  [BUGGY]    return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	295	295	1	replace	if(!Arrays.equals(d1,  d1))  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError	223	1
158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }    [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]    return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	add	if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p2.getWindingRule()!=    p1.getWindingRule())    {    	compilable	  [FE]  AssertionFailedError	27	1
159	[BUG]  [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  [FE]  AssertionFailedError  [CONTEXT]    public  static  boolean  equal(GeneralPath  p1,  GeneralPath  p2)  {  if  (p1  ==  null)  {  return  (p2  ==  null);  }  if  (p2  ==  null)  {  return  false;  }    [BUGGY]  if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {  [BUGGY]    return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	271	271	1	replace	if(p1.getWindingRule()!=  p2.getWindingRule()  &&  p1.getWindingRule()!=  p2.getWindingRule())  {	  if(p1.getWindingRule()!=    p2.getWindingRule()    ||    p2.getWindingRule()!=    p1.getWindingRule())    {    	compilable	  [FE]  AssertionFailedError	27	1
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {    [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  &&  done)  {  [BUGGY]    return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	add	if(iterator1.isDone()!=  iterator2.isDone()  &&  done)  {	  if(iterator1.isDone()!=    iterator2.isDone()    ||    done)    {    	compilable	  [FE]  AssertionFailedError	111	1
663	[BUG]  [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  &&  done)  {  [FE]  AssertionFailedError  [CONTEXT]    }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {    [BUGGY]  if(iterator1.isDone()!=  iterator2.isDone()  &&  done)  {  [BUGGY]    return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	280	280	1	replace	if(iterator1.isDone()!=  iterator2.isDone()  &&  done)  {	  if(iterator1.isDone()!=    iterator2.isDone()    ||    done)    {    	compilable	  [FE]  AssertionFailedError	111	1
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[7];  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[7];  }	  	compilable	  [FE]  AssertionFailedError	92	1
550	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[7];  }  [FE]  AssertionFailedError  [CONTEXT]    if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];    [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[7];  }  [BUGGY]    boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[6];  d2  =  new  double[7];  }	  	compilable	  [FE]  AssertionFailedError	92	1
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);    [BUGGY]  float  seg2  =  iterator2.currentSegment(d2);  [BUGGY]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	add	float  seg2  =  iterator2.currentSegment(d2);	  int    seg2    =    iterator1.currentSegment(d2);    	compilable	  [FE]  AssertionFailedError	135	1
807	[BUG]  [BUGGY]  float  seg2  =  iterator2.currentSegment(d2);  [FE]  AssertionFailedError  [CONTEXT]    PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);    [BUGGY]  float  seg2  =  iterator2.currentSegment(d2);  [BUGGY]    if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	284	284	1	replace	float  seg2  =  iterator2.currentSegment(d2);	  int    seg2    =    iterator1.currentSegment(d2);    	compilable	  [FE]  AssertionFailedError	135	1
