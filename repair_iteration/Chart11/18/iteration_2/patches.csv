bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  done  =  iterator1.isDone()  |  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  |  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2    iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  ';'  expected	9	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
4	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
6	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	2	add
7	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();	  	non-compiled	[CE]  ';'  expected	7	None	add
8	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  done)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  done)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2.next()!=  done)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  double  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  double  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	double  seg2  =  iterator2.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }	  float    seg2    =    iterator2.currentSegment(d1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
12	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
13	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [CE]  cannot  find  symbol  Iterator2  [FE]      AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();	  	non-compiled	[CE]  cannot  find  symbol  Iterator2	11	None	add
14	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();	  	non-compiled	[CE]  ';'  expected	11	None	add
15	[BUG]  [BUGGY]  if(seg1  ==  seg2)  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(seg1  ==  seg2)  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(seg1  ==  seg2)  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }	          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  float  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  float  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	float  seg2  =  iterator1.currentSegment(d1);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator1.currentSegment(d1);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }	          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2    iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  float  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  float  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	float  seg2  =  iterator1.currentSegment(d2);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator1.currentSegment(d2);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
19	[BUG]  [BUGGY]  done  =  iterator1.isDone()  ||  iterator3.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator1.isDone()  ||  iterator3.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  ||  iterator3.isDone();	  done    =    iterator1.isDone()    &&    iterator3.isDone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator1.currentSegment(d1);  if(iterator2!=  seg2)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  done)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  done)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator2.currentSegment(d1);  if(iterator2!=  done)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  float  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  float  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	float  seg2  =  iterator1.currentSegment(seg2);  if(seg2!=  seg2)  {  return  false;  }	  int    seg2    =    iterator1.currentSegment(seg2);    if(seg2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  done  =  iterator2.next()  &&  iterator1.isDone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator2.next()  &&  iterator1.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator2.next()  &&  iterator1.isDone();	  done    =    iterator1.next()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
24	[BUG]  [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d1);  if(iterator2.next()!=  seg2)  {  return  false;  }	  Iterator    <    PathIterator>    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	17	None	replace
25	[BUG]  [BUGGY]  done  =  iterator1.next()  &&  iterator2.next();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator1.next()  &&  iterator2.next();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.next()  &&  iterator2.next();	          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
27	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
28	[BUG]  [BUGGY]  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  done  =  iterator2.isDone()  &&  iterator1.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator2.isDone()  &&  iterator1.isDone();  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator2.isDone()  &&  iterator1.isDone();	  done    =    iterator1.isDone()    ||    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  <  PathIterator>  iterator2  =  iterator1.currentSegment(d2);  if(iterator2.next()!=  seg2)  {  return  false;  }	  Iterator    <    PathIterator>    iterator2    =    iterator2.currentSegment(d1);    if(iterator2.next()!=    seg2)    {    return    false;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	17	None	replace
32	[BUG]  [BUGGY]  done  =  iterator2.isDone()  &  iterator1.isDone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator2.isDone()  &  iterator1.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator2.isDone()  &  iterator1.isDone();	  iterator2.next();    done    =    iterator1.isDone()    &    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
33	[BUG]  [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2!=  seg2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2!=  seg2)  {  return  false;  }  [BUGGY]      return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator  iterator2  =  iterator1.currentSegment(d2);  if(iterator2!=  seg2)  {  return  false;  }	  Iterator    iterator2    =    iterator2.currentSegment(d1);    if(iterator2!=    seg2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator2  iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator2  iterator2.next();  done  =  iterator1.isDone()  &  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2    iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  done  =  iterator1.isDone()  &  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator1.isDone()  &  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator1.isDone()  &  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  done  =  iterator3.isDone()  &&  iterator1.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  done  =  iterator3.isDone()  &&  iterator1.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	done  =  iterator3.isDone()  &&  iterator1.isDone();	  done    =    iterator1.isDone()    &&    iterator3.isDone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	1	add
38	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	7	1	add
39	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [CE]  cannot  find  symbol  Iterator2  [FE]      AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        |        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	  	non-compiled	[CE]  cannot  find  symbol  Iterator2	7	None	add
40	[BUG]  [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  |  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2    iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	Iterator2.next();  done  =  iterator1.isDone()  |  iterator2.isDone();	          iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    Iterator2.next();    done    =    iterator1.isDone()    |    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]  if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	if(iterator2.hasNext())  {  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  }	          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	add	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
44	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	compilable	  [FE]  AssertionFailedError  	11	2	add
45	[BUG]  [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [CE]  cannot  find  symbol  Iterator2  [FE]      AssertionFailedError    [CONTEXT]      int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  }  iterator1.next();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();      [BUGGY]          iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  [BUGGY]      }  return  true;  }  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	294	294	1	replace	                iterator2.next();        done        =        iterator1.isDone()        &&        iterator2.isDone();        iterator2.next();    done    =    iterator1.isDone()    &&    iterator2.isDone();    Iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();  iterator2.next();  done  =  iterator1.isDone()  &&  iterator2.isDone();	  	non-compiled	[CE]  cannot  find  symbol  Iterator2	11	None	add
