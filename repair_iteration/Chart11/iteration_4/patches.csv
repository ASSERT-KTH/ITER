bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
127274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]          return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();          [BUGGY]  while(!done  &&  iterator2.isDone()  ||  iterator1.isDone())  [BUGGY]          if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator2.isDone()  ||  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	21213	1
127275	[BUG]  [BUGGY]  while(!done  &&  iterator2.isDone()  ||  iterator1.isDone())  [FE]  AssertionFailedError  [CONTEXT]          return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();          [BUGGY]  while(!done  &&  iterator2.isDone()  ||  iterator1.isDone())  [BUGGY]          if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator2.isDone()  ||  iterator1.isDone())	  	compilable	  [FE]  AssertionFailedError	21213	1
127455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]          return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();          [BUGGY]  while(!done  &&  iterator2.isDone()  &&  iterator2.isDone())  [BUGGY]          if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	add	while(!done  &&  iterator2.isDone()  &&  iterator2.isDone())	  	compilable	  [FE]  AssertionFailedError	21243	1
127456	[BUG]  [BUGGY]  while(!done  &&  iterator2.isDone()  &&  iterator2.isDone())  [FE]  AssertionFailedError  [CONTEXT]          return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];  boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();          [BUGGY]  while(!done  &&  iterator2.isDone()  &&  iterator2.isDone())  [BUGGY]          if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  return  false;  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	279	279	1	replace	while(!done  &&  iterator2.isDone()  &&  iterator2.isDone())	  	compilable	  [FE]  AssertionFailedError	21243	1
298598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]            [BUGGY]  public  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.0);  [BUGGY]            [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	public  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    1.0);    	compilable	  [FE]  AssertionFailedError	49767	1
298599	[BUG]  [BUGGY]  public  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.0);  [FE]  AssertionFailedError  [CONTEXT]            [BUGGY]  public  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.0);  [BUGGY]            [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	public  static  final  double  SQRT2  =(double)Math.pow(2.0,  0.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    1.0);    	compilable	  [FE]  AssertionFailedError	49767	1
298598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]            [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(1.0,  1.0);  [BUGGY]            [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	add	private  static  final  double  SQRT2  =(double)Math.pow(1.0,  1.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    1.0);    	compilable	  [FE]  AssertionFailedError	49767	1
298599	[BUG]  [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(1.0,  1.0);  [FE]  AssertionFailedError  [CONTEXT]            [BUGGY]  private  static  final  double  SQRT2  =(double)Math.pow(1.0,  1.0);  [BUGGY]            [CLASS]  ShapeUtilities  [VARIABLES]  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.5	389	389	1	replace	private  static  final  double  SQRT2  =(double)Math.pow(1.0,  1.0);	  private    static    final    double    SQRT2    =(double)Math.pow(2.0,    1.0);    	compilable	  [FE]  AssertionFailedError	49767	1
118418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[3];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[3];  }	  	compilable	  [FE]  AssertionFailedError	19737	1
118419	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[3];  }  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[3];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[3];  }	  	compilable	  [FE]  AssertionFailedError	19737	1
118419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[5];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[5];  }	  	compilable	  [FE]  AssertionFailedError	19737	1
118420	[BUG]  [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[5];  }  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[5];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(!iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[4];  d2  =  new  double[5];  }	  	compilable	  [FE]  AssertionFailedError	19737	1
118407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[5];  d2  =  new  double[6];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	add	while(iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[5];  d2  =  new  double[6];  }	  	compilable	  [FE]  AssertionFailedError	19735	1
118408	[BUG]  [BUGGY]  while(iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[5];  d2  =  new  double[6];  }  [FE]  AssertionFailedError  [CONTEXT]          if  (p2  ==  null)  {  return  false;  }  if  (p1.getWindingRule()  !=  p2.getWindingRule())  {  return  false;  }  PathIterator  iterator1  =  p1.getPathIterator(null);  PathIterator  iterator2  =  p1.getPathIterator(null);  double[]  d1  =  new  double[6];  double[]  d2  =  new  double[6];          [BUGGY]  while(iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[5];  d2  =  new  double[6];  }  [BUGGY]          boolean  done  =  iterator1.isDone()  &&  iterator2.isDone();  while  (!done)  {  if  (iterator1.isDone()  !=  iterator2.isDone())  {  return  false;  }  int  seg1  =  iterator1.currentSegment(d1);  int  seg2  =  iterator2.currentSegment(d2);  if  (seg1  !=  seg2)  {  return  false;  }  if  (!Arrays.equals(d1,  d2))  {  [CLASS]  ShapeUtilities  [METHOD]  equal  [RETURN_TYPE]  boolean  GeneralPath  p1  GeneralPath  p2  [VARIABLES]  boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  	projects/Chart11/source/org/jfree/chart/util/ShapeUtilities.java	0.7071067811865475	278	278	1	replace	while(iterator1.isDone()  &&  iterator2.isDone())  {  d1  =  new  double[5];  d2  =  new  double[6];  }	  	compilable	  [FE]  AssertionFailedError	19735	1
