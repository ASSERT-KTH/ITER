bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
5	[BUG]  [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
6	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x0),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
7	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
9	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x0),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
13	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
14	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  rtol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x1),  rtol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
15	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x1),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x0),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  return  inverted?  x0  :  x1;  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  x0  :  x1;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  (f1  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  (f1  <  =  0)?  x0  :  x1;  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(f1  <  =  0)?  x0  :  x1;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  return  inverted?  x1  :  x0;  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  x1  :  x0;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  int  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  int  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
35	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
36	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x0),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x1),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
42	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
45	[BUG]  [BUGGY]  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);	      rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);	      rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	      rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
49	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
50	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	      Math.max(x0,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  Math.max(x0,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Math.max(x0,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x0,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	      Math.max(x0,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  Math.max(x0,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Math.max(x0,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x0,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	      Math.max(x0,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);	      rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
56	[BUG]  [BUGGY]  rtol  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(rtol  *  FastMath.abs(x0),  atol);	      rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  rtol  =  Math.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(x1  *  FastMath.abs(x1),  atol);	      rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [CE]  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  	1	None	replace
61	[BUG]  [BUGGY]  int  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
63	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	      rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
66	[BUG]  [BUGGY]  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	      Math.max(x0,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [CE]  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(fastMath.abs(x0),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
71	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  float  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  float  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
76	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
77	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x1),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
78	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  rtol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  rtol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
79	[BUG]  [BUGGY]  float  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  float  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
81	[BUG]  [BUGGY]  if(allowed)  {  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(allowed)  {  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowed)  {  if(f0  <  =  0)  {  return  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  if(allowed)  {  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(allowed)  {  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowed)  {  if(f1  <  =  0)  {  return  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(allowed)  {  if(f0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(allowed)  {  if(f0  <  =  0)  {  return  x1;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowed)  {  if(f0  <  =  0)  {  return  x1;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  Integer  f1  =  getFunctionValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  f1  =  getFunctionValue();  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getFunctionValue();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    f0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
91	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
92	[BUG]  [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  }	      rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
95	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
97	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
98	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
99	[BUG]  [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
101	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
102	[BUG]  [BUGGY]  int  rtol  =  Math.min(RTOL  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  Math.min(RTOL  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(RTOL  *  FastMath.abs(x1),  atol);	      int    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x1)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(x1  -  x1)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x1)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x0    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
104	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x0    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
105	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      int    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x0  :  x0;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  inverted?  x0  :  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  inverted  =(inverted?  x0  :  x1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  inverted  =(inverted?  x0  :  x1);  [BUGGY]    atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(inverted?  x0  :  x1);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    Math.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
111	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
112	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }      [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	      Integer    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
