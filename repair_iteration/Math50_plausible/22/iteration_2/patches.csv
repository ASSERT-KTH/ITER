bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);	  rtol    =    Math.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
2	[BUG]  [BUGGY]  rtol  =  FastMath.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(x0  *  FastMath.abs(x1),  atol);	  rtol    =    FastMath.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(rtol  *  FastMath.abs(x0),  atol);	  rtol    =    FastMath.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  rtol  =  FastMath.min(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.min(x1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(x1  *  FastMath.abs(x1),  atol);	  rtol    =    FastMath.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
6	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
7	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
8	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
9	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
10	[BUG]  [BUGGY]  int  rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
11	[BUG]  [BUGGY]  int  rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
12	[BUG]  [BUGGY]  int  rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
13	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
14	[BUG]  [BUGGY]  if  (FastMath.abs(min  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(min  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(min  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    min)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
15	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  min)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    min)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
16	[BUG]  [BUGGY]  if  (FastMath.abs(min  -  f1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(min  -  f1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(min  -  f1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    min)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
17	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
18	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  }	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
19	[BUG]  [BUGGY]  Integer  f1  =  getFunctionValue().intValue();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  f1  =  getFunctionValue().intValue();  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getFunctionValue().intValue();	  Integer    f1    =    getFunctionValue();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
20	[BUG]  [BUGGY]  Integer  f1  =  getOffset();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  f1  =  getOffset();  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getOffset();	  Integer    f1    =    getFunctionValue();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
21	[BUG]  [BUGGY]  Integer  f1  =  getBaseValue();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  f1  =  getBaseValue();  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getBaseValue();	  Integer    f1    =    getFunctionValue();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
22	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  }	  rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
23	[BUG]  [BUGGY]  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);	  rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	104	None	replace
25	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
26	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
27	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.min(len  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.min(len  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.min(len  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
28	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));	  Integer    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
30	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
31	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
32	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
33	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
34	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(x1  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
35	[BUG]  [BUGGY]  int  rtol  =  Math.min(f1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(f1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(f1  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
36	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);	  rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
37	[BUG]  [BUGGY]  int  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.max(x0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
38	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol));	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
39	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
40	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x0),  atol  +  1);	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
41	[BUG]  [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
42	[BUG]  [BUGGY]  Math.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
43	[BUG]  [BUGGY]  int  rtol  =  FastMath.min(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.min(FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.min(FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
45	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
46	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
47	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
48	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
49	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
50	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol,  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol,  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol,  absoluteAccuracy);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
51	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
52	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x0;  }	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
53	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x0;  }	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
54	[BUG]  [BUGGY]  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  inverted?  x0  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  x0  :  x0;	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
55	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  <  =  0)  {  return  inverted?  x0  :  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  inverted?  x0  :  x0;  }	  if(f0    <    =    0)    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
56	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x0  :  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  inverted?  x0  :  x1;  }	  if(f0    <    =    0)    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
57	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
58	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
59	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
60	[BUG]  [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
61	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
62	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
63	[BUG]  [BUGGY]  if  (FastMath.abs(min  -  f0)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(min  -  f0)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(min  -  f0)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    min)    <    FastMath.max(x0    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  min)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    min)    <    FastMath.max(x0    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
66	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
67	[BUG]  [BUGGY]  if(f1  ==  0)  {  return  x0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  ==  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  ==  0)  {  return  x0;  }	  if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
68	[BUG]  [BUGGY]  if(f1!=  0)  {  return  x0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1!=  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1!=  0)  {  return  x0;  }	  if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
69	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x0;  }	  if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
70	[BUG]  [BUGGY]  inverted  =(x1  <  x0?  x0  :  x1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(x1  <  x0?  x0  :  x1);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(x1  <  x0?  x0  :  x1);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
71	[BUG]  [BUGGY]  inverted  =(x0  <  x0?  x1  :  x0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(x0  <  x0?  x1  :  x0);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(x0  <  x0?  x1  :  x0);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
72	[BUG]  [BUGGY]  inverted  =(inverted?  x1  :  x0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(inverted?  x1  :  x0);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(inverted?  x1  :  x0);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
73	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
74	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
75	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
76	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
77	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  min)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  min)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  min)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
78	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
79	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
80	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Integer    rtol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
81	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
82	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  f1)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
83	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
84	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
85	[BUG]  [BUGGY]  double  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
86	[BUG]  [BUGGY]  float  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
87	[BUG]  [BUGGY]  double  rtol  =  Math.min(x0  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(x0  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(x0  *  FastMath.abs(x0),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
88	[BUG]  [BUGGY]  double  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
89	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x0),  atol))  {  return  inverted?  x1  :  x0;	  rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
90	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;	  rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
91	[BUG]  [BUGGY]  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [CE]  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(x1  *  FastMath.abs(x0),  atol);	  rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  	45	None	replace
92	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
93	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  <identifier>  expected	103	None	replace
94	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy))  {  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
95	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
96	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
97	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowedSolution    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
98	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x1,  allowedSolution  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x1,  allowedSolution  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(x1,  allowedSolution  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowedSolution    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
99	[BUG]  [BUGGY]  if(atol)  {  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(atol)  {  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(atol)  {  if(f1  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
100	[BUG]  [BUGGY]  if(!inverted)  {  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(!inverted)  {  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(!inverted)  {  if(f1  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
101	[BUG]  [BUGGY]  rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol,  x0  *  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
102	[BUG]  [BUGGY]  rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol,  x1  *  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
103	[BUG]  [BUGGY]  rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(x1,  rtol  *  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
104	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(f1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
105	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x0  *  FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(f1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
106	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
107	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
108	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
109	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x0    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
110	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x0    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
111	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
112	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Integer    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
113	[BUG]  [BUGGY]  (f1  <  =  0)?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (f1  <  =  0)?  x0  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(f1  <  =  0)?  x0  :  x0;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
114	[BUG]  [BUGGY]  (f1  <  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (f1  <  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(f1  <  0)?  x0  :  x1;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
115	[BUG]  [BUGGY]  (x0  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (x0  <  =  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(x0  <  =  0)?  x0  :  x1;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
116	[BUG]  [BUGGY]  (f1  ==  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (f1  ==  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(f1  ==  0)?  x0  :  x1;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
117	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol));	  int    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
118	[BUG]  [BUGGY]  if(atol)  {  if(f0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(atol)  {  if(f0  <  =  0)  {  return  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(atol)  {  if(f0  <  =  0)  {  return  x1;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
119	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x1;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
120	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  <  =  0)  {  return  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  x1;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
121	[BUG]  [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  rtol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
122	[BUG]  [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  rtol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
123	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(FastMath.abs(x0),  atol);	  Integer    rtol    =    Math.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
124	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x0),  atol  +  1);	  Integer    rtol    =    Math.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
125	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x1))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x1))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x1))  {  return  inverted?  x1  :  x0;  }	  rtol    *    FastMath.abs(x0),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
126	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x0),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(atol  *  FastMath.abs(x0),  rtol);	  Integer    rtol    =    Math.max(atol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
127	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.max(atol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
128	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(x0  *  FastMath.abs(x1),  rtol);	  Integer    rtol    =    Math.max(atol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
129	[BUG]  [BUGGY]  if(atol)  {  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(atol)  {  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(atol)  {  if(f0  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
130	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(x1  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    Math.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
131	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(f0  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
132	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(f1  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
133	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
134	[BUG]  [BUGGY]  int  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
135	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x1,  atol));	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  return  f1  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  f1  <  =  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  f1  <  =  0)?  x0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
137	[BUG]  [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  f1  <  =  0)?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
138	[BUG]  [BUGGY]  return  inverted?  f1  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  inverted?  f1  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  f1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x1;  }	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
140	[BUG]  [BUGGY]  double  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
141	[BUG]  [BUGGY]  float  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
142	[BUG]  [BUGGY]  long  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  long  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	long  rtol  =  Math.min(rtol  *  FastMath.abs(x1),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
143	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol));	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
144	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
145	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x0),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x0),  rtol);	  Integer    rtol    =    Math.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
146	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x0),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(FastMath.abs(x0),  rtol);	  Integer    rtol    =    Math.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
147	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x1),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(FastMath.abs(x1),  rtol);	  Integer    rtol    =    Math.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
148	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
149	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
150	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(fastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(fastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
151	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x0),  atol,  allowedSolution);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x0),  atol,  allowedSolution);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(fastMath.abs(x0),  atol,  allowedSolution);	  int    rtol    =    FastMath.max(fastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
152	[BUG]  [BUGGY]  Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
153	[BUG]  [BUGGY]  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
154	[BUG]  [BUGGY]  Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(rtol,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
155	[BUG]  [BUGGY]  Math.max(rtol,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(rtol,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(rtol,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    max    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
156	[BUG]  [BUGGY]  Math.max(x1,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(x1,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  max  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    max    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
157	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
158	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
159	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
160	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
161	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol));	  Integer    rtol    =    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
162	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1,  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1,  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1,  atol))  {	  if    (FastMath.abs(x0    -    x1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
163	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x0),  atol,  allowedSolution);	  rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
164	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(rtol  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
165	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
166	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(FastMath.max(x0  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
167	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
168	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  f0)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
170	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
171	[BUG]  [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	  rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
172	[BUG]  [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
173	[BUG]  [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
174	[BUG]  [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
175	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
176	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(FastMath.abs(x1),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(FastMath.abs(x1),  atol  +  1);	  Integer    rtol    =    Math.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
177	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x1))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x1))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x1))  {  return  inverted?  x0  :  x1;	  rtol    *    FastMath.abs(x0),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
178	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
179	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
180	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
181	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(x1,  max  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
182	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f0    -    f1)    <    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
183	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f0    -    f1)    <    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
184	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(FastMath.abs(x1),  atol);	  Integer    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
185	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);	  Integer    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
186	[BUG]  [BUGGY]  rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(x0),  atol))  {  return  inverted?  x0  :  x1;	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
187	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
188	[BUG]  [BUGGY]  int  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.min(FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
189	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x1,  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
190	[BUG]  [BUGGY]  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);	  rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
191	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    f1)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
192	[BUG]  [BUGGY]  if  (FastMath.abs(f0  *  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  *  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  *  f1)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f0    -    f1)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
193	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(len  *  FastMath.abs(x1),  ftol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(len  *  FastMath.abs(x1),  ftol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(len  *  FastMath.abs(x1),  ftol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
194	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  allowed))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  allowed))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  *  FastMath.abs(x1),  allowed))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
195	[BUG]  [BUGGY]  rtol  *  FastMath.abs(f1))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(f1))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(f1))  {  return  inverted?  x0  :  x1;	  rtol    *    FastMath.abs(x0),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
196	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x2))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x2))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x2))  {  return  inverted?  x0  :  x1;	  rtol    *    FastMath.abs(x0),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
197	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x2),  atol);	  rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
198	[BUG]  [BUGGY]  (f1  >=  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (f1  >=  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(f1  >=  0)?  x0  :  x1;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
199	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
200	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
201	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
202	[BUG]  [BUGGY]  int  rtol  =  Math.min(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(f1  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
203	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
204	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(rtol  *  FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(rtol  *  FastMath.abs(x0),  rtol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(rtol  *  FastMath.abs(x0),  rtol);	  Integer    rtol    =    Math.max(atol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
205	[BUG]  [BUGGY]  if(f1  >=  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  >=  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  >=  0)  {  return  x0;  }	  if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
206	[BUG]  [BUGGY]  if(allowedSolution)  {  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowedSolution)  {  if(f1  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
207	[BUG]  [BUGGY]  if(inverted)  {  if(f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(inverted)  {  if(f1  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(inverted)  {  if(f1  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
208	[BUG]  [BUGGY]  if(allowedSolution)  {  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowedSolution)  {  if(f0  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
209	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  ftol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  ftol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  atol)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  ftol))  {	  if    (FastMath.abs(f0    -    x0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
210	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowedSolution    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
211	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
212	[BUG]  [BUGGY]  if  (FastMath.abs(rtol  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(rtol  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(rtol  -  f0)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
213	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
214	[BUG]  [BUGGY]  Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
215	[BUG]  [BUGGY]  int  rtol  =  Math.min(RTOL  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(RTOL  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(RTOL  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(RTOL    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
216	[BUG]  [BUGGY]  int  rtol  =  Math.min(RTOLE  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(RTOLE  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(RTOLE  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(RTOL    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
217	[BUG]  [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;	  rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
218	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
219	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(f1  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
220	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
221	[BUG]  [BUGGY]  inverted  =(f1?  x0  :  x1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(f1?  x0  :  x1);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(f1?  x0  :  x1);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
222	[BUG]  [BUGGY]  inverted  =(f1  <  =  0)?  x0  :  x1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(f1  <  =  0)?  x0  :  x1);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(f1  <  =  0)?  x0  :  x1);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
223	[BUG]  [BUGGY]  inverted  =(inverted?  f1  :  x0);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(inverted?  f1  :  x0);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(inverted?  f1  :  x0);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
224	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  absoluteAccuracy)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  absoluteAccuracy)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  absoluteAccuracy)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
225	[BUG]  [BUGGY]  Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
226	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
227	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
228	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(inverted  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(inverted  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(inverted  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
229	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(max  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
230	[BUG]  [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(f1  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(f1  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(max  -  x0)  <  =  FastMath.max(f1  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max    /    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
231	[BUG]  [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x2;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f1  <  =  0)  {  return  x0;  }  else  {  return  inverted?  x0  :  x2;  }	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
232	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));	  Integer    rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
233	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
234	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
235	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(fastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(fastMath.abs(x2),  atol);	  int    rtol    =    FastMath.max(fastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
236	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(fastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(fastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(fastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
237	[BUG]  [BUGGY]  return  f1?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  f1?  x1  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  f1?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
238	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
239	[BUG]  [BUGGY]  int  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
240	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
241	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
242	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  fx0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  fx0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  fx0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
243	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
244	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  inverted?  x1  :  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  inverted?  x1  :  x0;  }	  if(f0    <    =    0)    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
245	[BUG]  [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol  +  1);	  rtol    =    FastMath.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
246	[BUG]  [BUGGY]  if(inverted)  {  if(f0  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(inverted)  {  if(f0  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(inverted)  {  if(f0  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
247	[BUG]  [BUGGY]  if(allowedSolution)  {  if(f0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowedSolution)  {  if(f0  <  =  0)  {  return  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowedSolution)  {  if(f0  <  =  0)  {  return  x1;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
248	[BUG]  [BUGGY]  return  f1?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  f1?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  f1?  x0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
249	[BUG]  [BUGGY]  return  f0?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  f0?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  f0?  x0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
250	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  x0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  x0);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(atol  *  FastMath.abs(x1),  x0);	  Integer    rtol    =    Math.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
251	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  absoluteAccuracy);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
252	[BUG]  [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
253	[BUG]  [BUGGY]  float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
254	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(FastMath.abs(x0),  atol));	  Integer    rtol    =    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
255	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
256	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(FastMath.abs(x0),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
257	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x2),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x2),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x2),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
258	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
259	[BUG]  [BUGGY]  rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x0  :  x1;	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
260	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  ==  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  ==  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  ==  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
261	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  f1)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
262	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(x2),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
263	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
264	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x0    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
265	[BUG]  [BUGGY]  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);	  rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
266	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
267	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol))  {	  if    (FastMath.abs(x0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
268	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
269	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy));	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
270	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;  }	  rtol    *    FastMath.abs(f1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
271	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(f1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(FastMath.abs(f1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(FastMath.abs(f1),  atol);	  int    rtol    =    FastMath.max(f1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
272	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    FastMath.max(f0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
273	[BUG]  [BUGGY]  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);	  rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
274	[BUG]  [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(max,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
275	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
276	[BUG]  [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(rtol  -  x0)  <  =  FastMath.max(min,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
277	[BUG]  [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(max,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    max    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
278	[BUG]  [BUGGY]  float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
279	[BUG]  [BUGGY]  double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
280	[BUG]  [BUGGY]  rtol  =  Math.min(rtol  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol  *  FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol  *  FastMath.abs(x2),  atol);	  rtol    =    Math.min(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
281	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol);	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
282	[BUG]  [BUGGY]  Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(x1,  f1  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
283	[BUG]  [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(f0  <  =  0)  {  return  x1;  }  else  {  return  inverted?  x0  :  x1;  }	  if(f0    <    =    0)    {    return    x0;    }    else    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
284	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x2),  atol);	  Integer    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
285	[BUG]  [BUGGY]  rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
286	[BUG]  [BUGGY]  rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
287	[BUG]  [BUGGY]  rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);	  rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
288	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
289	[BUG]  [BUGGY]  Integer  f1  =  getInitialValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  f1  =  getInitialValue();  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getInitialValue();	  Integer    f1    =    getFunctionValue();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
290	[BUG]  [BUGGY]  int  rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(rtol,  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
291	[BUG]  [BUGGY]  int  rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(rtol,  f1  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
292	[BUG]  [BUGGY]  float  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(x0,  rtol  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
293	[BUG]  [BUGGY]  int  rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(rtol,  f0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
294	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x2))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x2))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x2))  {  return  inverted?  x1  :  x0;  }	  rtol    *    FastMath.abs(x0),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
295	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
296	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
297	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
298	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol)-  1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x0),  atol)-  1;	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
299	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  atol)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
300	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
301	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x2),  atol))  {  return  inverted?  x0  :  x1;	  rtol    *    FastMath.abs(f1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
302	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  rtol)  <  =  FastMath.max(x1,  ftol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
303	[BUG]  [BUGGY]  inverted  =(inverted?  f1  :  x1);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(inverted?  f1  :  x1);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(inverted?  f1  :  x1);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
304	[BUG]  [BUGGY]  inverted  =(inverted?  f0  :  x1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  inverted  =(inverted?  f0  :  x1);  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	inverted  =(inverted?  f0  :  x1);	  inverted    =(inverted?    x0    :    x1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
305	[BUG]  [BUGGY]  int  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
306	[BUG]  [BUGGY]  char  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  char  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	char  rtol  =  Math.min(x0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
307	[BUG]  [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  FastMath.max(FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
308	[BUG]  [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));	  rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
309	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(f0  *  FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
310	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
311	[BUG]  [BUGGY]  if(x0  <  =  0)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(x0  <  =  0)  {  return  f1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(x0  <  =  0)  {  return  f1;  }	  if(f1    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
312	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  FastMath.max(x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
313	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x1)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
314	[BUG]  [BUGGY]  int  rtol  =  Math.min(f0  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(f0  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(f0  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(x1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
315	[BUG]  [BUGGY]  Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(f0,  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
316	[BUG]  [BUGGY]  double  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol));	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
317	[BUG]  [BUGGY]  if(inverted)  {  if(f0  <  =  0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(inverted)  {  if(f0  <  =  0)  {  return  x1;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(inverted)  {  if(f0  <  =  0)  {  return  x1;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
318	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol));	  Integer    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
319	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(x0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
320	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f1)  <  =  FastMath.max(len  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x0    -    f1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
321	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
322	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  /  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  /  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(len  /  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(len    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
323	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  inverted  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  inverted  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  x0)  <  =  FastMath.max(max,  inverted  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(max,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
324	[BUG]  [BUGGY]  Integer  f1  =  getRelativeAccuracy();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  f1  =  getRelativeAccuracy();  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  f1  =  getRelativeAccuracy();	  Integer    f1    =    getFunctionValue();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
325	[BUG]  [BUGGY]  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.min(relativeAccuracy  *  FastMath.abs(x1),  atol);	  rtol    =    FastMath.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
326	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(FastMath.abs(x2),  atol));	  Integer    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
327	[BUG]  [BUGGY]  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x1;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
328	[BUG]  [BUGGY]  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Math.max(relativeAccuracy  *  FastMath.abs(x1),  atol))  {  return  inverted?  x1  :  x0;  }	  Math.max(x0,    f1    *    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
329	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
330	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
331	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1,  rtol  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1,  rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(max,  x1,  rtol  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    f0)    <    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
332	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  ftol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  ftol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  atol)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  ftol))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
333	[BUG]  [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  FastMath.max(FastMath.abs(x1),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
334	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  f0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
335	[BUG]  [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f0  -  x0)  <  =  FastMath.max(allowed  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowed    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
336	[BUG]  [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  *  FastMath.abs(x1),  atol))  {  return  inverted?  x0  :  x0;  }	  rtol    *    FastMath.abs(f1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
337	[BUG]  [BUGGY]  return  inverted?  f0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  inverted?  f0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  f0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
338	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  x1)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(x0    -    x1)    <    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
339	[BUG]  [BUGGY]  rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(f1),  atol))  {  return  inverted?  x1  :  x0;  }	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x1    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
340	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(inverted  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
341	[BUG]  [BUGGY]  return  inverted?  f0  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  return  inverted?  f0  :  x0;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	return  inverted?  f0  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
342	[BUG]  [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x0  -  atol)  <  FastMath.max(x0  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(rtol    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
343	[BUG]  [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  Math.abs(x0));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  Math.abs(x0));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  Math.abs(x0));	  rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
344	[BUG]  [BUGGY]  float  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  Math.min(max(x0  *  FastMath.abs(x1),  atol);	  float    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
345	[BUG]  [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);	  int    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
346	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  min)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
347	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  f0)  <  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    x0)    <    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
348	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(fastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(fastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(fastMath.max(x0  *  FastMath.abs(x1),  atol);	  Integer    rtol    =    Math.min(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
349	[BUG]  [BUGGY]  double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x0),  atol);	  int    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
350	[BUG]  [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  Integer    rtol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
351	[BUG]  [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
352	[BUG]  [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(f1  -  x0)  <  =  FastMath.max(allowedSolution  *  FastMath.abs(x1),  atol))  {	  if    (FastMath.abs(x1    -    x0)    <    =    FastMath.max(allowedSolution    *    FastMath.abs(x1),    atol))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
353	[BUG]  [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1,  atol));	  Integer    rtol    =    Math.min(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
354	[BUG]  [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	Integer  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);	  Integer    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
355	[BUG]  [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x0),  atol));  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  FastMath.max(FastMath.abs(x0),  atol));	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
356	[BUG]  [BUGGY]  float  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  float  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	float  rtol  =  FastMath.max(f1  *  FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(f1    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
357	[BUG]  [BUGGY]  (atol  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  (atol  <  =  0)?  x0  :  x1;  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	(atol  <  =  0)?  x0  :  x1;	  (f1    <    =    0)?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
358	[BUG]  [BUGGY]  rtol  /  FastMath.abs(f2),  atol))  {  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  rtol  /  FastMath.abs(f2),  atol))  {  return  inverted?  x0  :  x1;  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	rtol  /  FastMath.abs(f2),  atol))  {  return  inverted?  x0  :  x1;	  rtol    /    FastMath.abs(x1),    atol))    {    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
359	[BUG]  [BUGGY]  int  rtol  =  Math.min(FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  int  rtol  =  Math.min(FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	int  rtol  =  Math.min(FastMath.max(f0  *  FastMath.abs(x1),  atol);	  int    rtol    =    Math.min(FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
360	[BUG]  [BUGGY]  if  (FastMath.abs(x1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if  (FastMath.abs(x1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if  (FastMath.abs(x1  -  atol)  <  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy))  {	  if    (FastMath.abs(f1    -    atol)    <    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    absoluteAccuracy))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
361	[BUG]  [BUGGY]  if(x0  <  =  0)  {  return  inverted?  x0  :  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(x0  <  =  0)  {  return  inverted?  x0  :  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(x0  <  =  0)  {  return  inverted?  x0  :  x0;  }	  if(f0    <    =    0)    {    return    inverted?    x0    :    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
362	[BUG]  [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  double  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]      if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),              atol))  {  atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	double  rtol  =  FastMath.max(FastMath.abs(x0),  atol);	  int    rtol    =    FastMath.max(FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
363	[BUG]  [BUGGY]  if(allowed)  {  if(f0  <  =  0  ||  f1  <  =  0)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  x1;  }  break;  default:  throw  new  MathInternalError();  }  }        [BUGGY]  if(allowed)  {  if(f0  <  =  0  ||  f1  <  =  0)  {  return  x0;  }  [BUGGY]      atol))  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	235	236	1	replace	if(allowed)  {  if(f0  <  =  0  ||  f1  <  =  0)  {  return  x0;  }	  if(allowed)    {    if(f0    <    =    0)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
