bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(rtol)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(rtol)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(rtol)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  switch(atol)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(atol)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(atol)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  switch(x1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(x1)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(x1)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  switch(x0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(x0)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(x0)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	  	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
7	[BUG]  [BUGGY]    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
8	[BUG]  [BUGGY]    Math.max(x1,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Math.max(x1,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Math.max(x1,  rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  illegal  start  of  expression	10	None	add
9	[BUG]  [BUGGY]    Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));		non-compiled	[CE]  illegal  start  of  expression	10	None	add
10	[BUG]  [BUGGY]  switch(false)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(false)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(false)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  switch(inverted)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]  switch(inverted)  {  [BUGGY]  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(inverted)  {	switch  (allowed)  {  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
13	[BUG]  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  atol;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  atol;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  atol;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
14	[BUG]  [BUGGY]    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
15	[BUG]  [BUGGY]    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1),  relativeAccuracy);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
16	[BUG]  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    RelativeAccuracy  atol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
17	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
18	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
19	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
20	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
21	[BUG]  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {  [BUGGY]    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [BUGGY]  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	    Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;		non-compiled	[CE]  illegal  start  of  expression	10	None	add
