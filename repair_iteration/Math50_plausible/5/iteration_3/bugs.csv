bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
5	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
6	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
7	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
8	[BUG]  [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
9	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;	  Method    rtol    =    FastMath.max(f1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
10	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;	  Method    rtol    =    FastMath.max(f1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
11	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x0,  rtol  *  FastMath.abs(x1),  atol));  break;	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
14	[BUG]  [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x0),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x0),  atol));  break;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  rtol  *  FastMath.abs(x0),  atol));  break;	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
15	[BUG]  [BUGGY]  Math.max(x1,  y0  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  y0  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  y0  *  FastMath.abs(x1),  atol));  break;	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
17	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  break;	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  return  atol;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  return  atol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  return  atol;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    return    atol;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
19	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  return  atol;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  return  atol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  return  atol;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    return    atol;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
20	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(inverted    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
21	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(inverted  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(inverted    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
22	[BUG]  [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);	  Math.max(x0,    rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
23	[BUG]  [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol  +  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x0,  rtol  *  FastMath.abs(x1),  atol  +  2);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x0,  rtol  *  FastMath.abs(x1),  atol  +  2);	  Math.max(x0,    rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
24	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy));	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x0),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
25	[BUG]  [BUGGY]  Math.max(x0,  inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x0,  inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x0,  inverted  *  FastMath.abs(x1),  atol));	  Math.max(x1,    inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
26	[BUG]  [BUGGY]  Math.max(rtol,  inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(rtol,  inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(rtol,  inverted  *  FastMath.abs(x1),  atol));	  Math.max(x1,    inverted    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
27	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
28	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
29	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
30	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
31	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1,  atol  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1,  atol  *  FastMath.abs(x1),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1,  atol  *  FastMath.abs(x1),  rtol);	  Method    rtol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
32	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1,  y0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1,  y0  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1,  y0  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
33	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
34	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
35	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(f1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(f1  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(f1    *    FastMath.abs(x1),    atol);    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
36	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(absoluteAccuracy    *    FastMath.abs(x1),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.min(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(absoluteAccuracy    *    FastMath.abs(x1),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
38	[BUG]  [BUGGY]  Math.max(x1,  atol  *  FastMath.abs(x0),  rtol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  atol  *  FastMath.abs(x0),  rtol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  atol  *  FastMath.abs(x0),  rtol));	  Math.max(x1,    rtol    *    FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
39	[BUG]  [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x2),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  rtol  *  FastMath.abs(x2),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  rtol  *  FastMath.abs(x2),  atol));	  Math.max(x1,    rtol    *    FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
40	[BUG]  [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
41	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
42	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
43	[BUG]  [BUGGY]  Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
44	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
45	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  break;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
46	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(rtol  /  FastMath.abs(x1),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
47	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);	  inverted    =    rtol    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(fastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(fastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(fastMath.abs(x1),  atol);	  inverted    =    rtol    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
50	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x2),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x2),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
51	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x2),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x2),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x2),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x2),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
52	[BUG]  [BUGGY]  inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
53	[BUG]  [BUGGY]  inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
54	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol)/  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
55	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0,  atol),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
56	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
57	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
58	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
59	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
60	[BUG]  [BUGGY]  switch(relativeAccuracy,  atol)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(relativeAccuracy,  atol)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(relativeAccuracy,  atol)  {	  switch(relativeAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
61	[BUG]  [BUGGY]  return  inverted?  x0  :  x2;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  x2;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  x2;	  return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
62	[BUG]  [BUGGY]  inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;	  inverted    =    x0    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
63	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
64	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
65	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
66	[BUG]  [BUGGY]  switch(inverted?  x1  :  inverted)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(inverted?  x1  :  inverted)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(inverted?  x1  :  inverted)  {	  switch(inverted?    x0    :    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
67	[BUG]  [BUGGY]  switch(inverted?  x0  :  inverted,  atol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(inverted?  x0  :  inverted,  atol)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(inverted?  x0  :  inverted,  atol)  {	  switch(inverted?    x0    :    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
68	[BUG]  [BUGGY]  switch(inverted?  x0  :  x1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(inverted?  x0  :  x1)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(inverted?  x0  :  x1)  {	  switch(inverted?    x0    :    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
69	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
70	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
71	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
72	[BUG]  [BUGGY]  switch(false,  true)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(false,  true)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(false,  true)  {	  switch(false,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  switch(true,  false)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(true,  false)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(true,  false)  {	  switch(false,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  switch(rtol,  false)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(rtol,  false)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(rtol,  false)  {	  switch(false,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  switch(true,  true)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(true,  true)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(true,  true)  {	  switch(false,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  return  f1  <  =  0)?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f1  <  =  0)?  x0  :  x1;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f1  <  =  0)?  x0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
77	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
78	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
79	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
80	[BUG]  [BUGGY]  inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x1  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
81	[BUG]  [BUGGY]  inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x1  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
82	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
85	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  rtol);	  RelativeAccuracy    atol    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
86	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(x0  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
87	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(exampleAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(exampleAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(exampleAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
88	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
89	[BUG]  [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
90	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
91	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  x1,  atol);  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  x1,  atol);	  return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
92	[BUG]  [BUGGY]  return  inverted?  x0  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  x1,  atol;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  x1,  atol;	  return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
93	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
94	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
95	[BUG]  [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
96	[BUG]  [BUGGY]  inverted  =  atol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  atol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  atol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
97	[BUG]  [BUGGY]  switch(false,  rtol)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(false,  rtol)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(false,  rtol)  {	  switch(true)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);	  RelativeAccuracy    atol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
99	[BUG]  [BUGGY]  Math.max(rtol,  x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(rtol,  x0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(rtol,  x0  *  FastMath.abs(x1),  atol));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
100	[BUG]  [BUGGY]  Math.max(relativeAccuracy,  x1  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(relativeAccuracy,  x1  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(relativeAccuracy,  x1  *  FastMath.abs(x1),  atol));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
101	[BUG]  [BUGGY]  Math.max(relativeAccuracy,  x0  *  FastMath.abs(x1),  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(relativeAccuracy,  x0  *  FastMath.abs(x1),  absoluteAccuracy));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(relativeAccuracy,  x0  *  FastMath.abs(x1),  absoluteAccuracy));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
102	[BUG]  [BUGGY]  Math.max(x0,  relativeAccuracy  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x0,  relativeAccuracy  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x0,  relativeAccuracy  *  FastMath.abs(x1),  atol));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
103	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
104	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(x1  *  FastMath.abs(x1),  atol);  break;	  inverted    =    rtol    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  inverted  =  max  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  max  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  max  *  FastMath.max(x0  *  FastMath.abs(x1),  atol);  break;	  inverted    =    rtol    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1  *  FastMath.abs(x0),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x1,  rtol  *  FastMath.abs(x0),  atol);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
109	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
110	[BUG]  [BUGGY]  if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x1  :  x0;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
111	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x0,  rtol  *  FastMath.abs(x1),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(x1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(x1  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
113	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(x0  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
114	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(x1,  rtol  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
115	[BUG]  [BUGGY]  return  inverted?  x1  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x1  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x1  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
116	[BUG]  [BUGGY]  Math.max(x1,  y0  *  FastMath.abs(rtol),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  y0  *  FastMath.abs(rtol),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  y0  *  FastMath.abs(rtol),  atol));	  Math.max(x1,    y0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
117	[BUG]  [BUGGY]  Math.max(x0,  y0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x0,  y0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x0,  y0  *  FastMath.abs(x1),  atol));	  Math.max(x1,    y0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
118	[BUG]  [BUGGY]  Math.max(rtol,  y0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(rtol,  y0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(rtol,  y0  *  FastMath.abs(x1),  atol));	  Math.max(x1,    y0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
119	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(f0  *  FastMath.abs(x1),  atol);  break;	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
120	[BUG]  [BUGGY]  Math.max(max,  x0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(max,  x0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(max,  x0  *  FastMath.abs(x1),  atol));	  Math.max(max,    rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
121	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x0),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x0),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x0),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x0),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
122	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x0),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
123	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  absoluteAccuracy));	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x0),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
124	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
125	[BUG]  [BUGGY]  inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  inverted    =    x0    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
126	[BUG]  [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f1  <  =  0)?  x1  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f1  <  =  0)?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
127	[BUG]  [BUGGY]  return  inverted?  x1  :  x1,  atol;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x1  :  x1,  atol;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x1  :  x1,  atol;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
128	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x0),  atol);  break;	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
129	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1);  break;	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
130	[BUG]  [BUGGY]  Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.min(FastMath.abs(x1),  atol);  break;	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
131	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.min(rtol  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(x    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
132	[BUG]  [BUGGY]  return  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  x0  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(x    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
133	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  return  atol;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  return  atol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.min(rtol  *  FastMath.abs(x1),  atol);  return  atol;	  RelativeAccuracy    atol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    return    atol;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);  break;	  inverted    =    rtol    *    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
135	[BUG]  [BUGGY]  inverted  =  x1  *  FastMath.max(FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x1  *  FastMath.max(FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x1  *  FastMath.max(FastMath.abs(x1),  atol);  break;	  inverted    =    rtol    *    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
136	[BUG]  [BUGGY]  inverted  =  atol  *  FastMath.max(FastMath.abs(x1),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  atol  *  FastMath.max(FastMath.abs(x1),  rtol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  atol  *  FastMath.max(FastMath.abs(x1),  rtol);  break;	  inverted    =    rtol    *    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
137	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  relativeAccuracy),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x2),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
138	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x0),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x0),  rtol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
139	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1,  atol),  rtol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1,  atol),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x1,  atol),  rtol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
140	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  break;	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
141	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(Rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(Rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(Rtol  *  FastMath.abs(x1),  atol);	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
142	[BUG]  [BUGGY]  return  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(x    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
143	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  return  atol;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  return  atol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x0),  atol);  return  atol;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    return    atol;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
144	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
145	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x2),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x2),  atol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
146	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
147	[BUG]  [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
148	[BUG]  [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
149	[BUG]  [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x0),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x0),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(max,  rtol  *  FastMath.abs(x0),  atol));	  Math.max(max,    rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
150	[BUG]  [BUGGY]  Math.max(max,  f0  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(max,  f0  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(max,  f0  *  FastMath.abs(x1),  atol));	  Math.max(max,    rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
151	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(FastMath.abs(x0),  atol);  break;	  inverted    =    rtol    *    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
152	[BUG]  [BUGGY]  Math.max(y0,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(y0,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(y0,  rtol  *  FastMath.abs(x1),  atol));	  Math.max(x1,    y0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
153	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  atol);  break;	  inverted    =    x1    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
154	[BUG]  [BUGGY]  switch(f1?  x0  :  inverted)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(f1?  x0  :  inverted)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(f1?  x0  :  inverted)  {	  switch(inverted?    x0    :    inverted)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
155	[BUG]  [BUGGY]  return  f1?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f1?  x0  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f1?  x0  :  x0;	  return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
156	[BUG]  [BUGGY]  return  f0?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f0?  x0  :  x1;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f0?  x0  :  x1;	  return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
157	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x0),  atol  +  1);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
158	[BUG]  [BUGGY]  Math.max(relativeAccuracy,  rtol  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(relativeAccuracy,  rtol  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(relativeAccuracy,  rtol  *  FastMath.abs(x1),  atol));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
159	[BUG]  [BUGGY]  if(f1  >=  0)  {  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(f1  >=  0)  {  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(f1  >=  0)  {  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }	  Method    rtol    =    FastMath.max(f1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
160	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol,  x1  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol,  x1  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol,  x1  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
161	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol,  x0  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol,  x0  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol,  x0  *  FastMath.abs(x1),  atol);	  Method    rtol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
162	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  fastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  fastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  fastMath.max(rtol  *  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
163	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
164	[BUG]  [BUGGY]  return  f1?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f1?  x1  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f1?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
165	[BUG]  [BUGGY]  return  f0?  x1  :  x0;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f0?  x1  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f0?  x1  :  x0;	  return    inverted?    x1    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
166	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(len  *  FastMath.abs(x1),  atol);  break;	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
167	[BUG]  [BUGGY]  Switch(false)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Switch(false)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Switch(false)  {	  switch(true)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
168	[BUG]  [BUGGY]  return  f1?  x0  :  x1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f1?  x0  :  x1;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f1?  x0  :  x1;	  return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
169	[BUG]  [BUGGY]  switch(len  -  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(len  -  1)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(len  -  1)  {	  switch(len)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
170	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x2),  atol);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x0),    atol);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
171	[BUG]  [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
172	[BUG]  [BUGGY]  if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
173	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  1);	  return    inverted?    x0    :    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
174	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(len  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(len  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(len  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
175	[BUG]  [BUGGY]  switch(falseAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(falseAccuracy)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(falseAccuracy)  {	  switch(relativeAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
176	[BUG]  [BUGGY]  Math.max(rtol  /  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(rtol  /  FastMath.abs(x1),  atol));  break;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(rtol  /  FastMath.abs(x1),  atol));  break;	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
177	[BUG]  [BUGGY]  switch(f2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(f2)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(f2)  {	  switch(f1)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
178	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
179	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  +  1;	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
180	[BUG]  [BUGGY]  switch(null,  false)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(null,  false)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(null,  false)  {	  switch(false,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
181	[BUG]  [BUGGY]  switch(ftol)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(ftol)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(ftol)  {	  switch(fx)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
182	[BUG]  [BUGGY]  if(f1  >=  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(f1  >=  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(f1  >=  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x1;  }	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
183	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  2);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  2);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  2);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
184	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  3);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  3);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol  +  3);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
185	[BUG]  [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(max,  rtol  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(max,  rtol  *  FastMath.abs(x1),  atol  +  1);	  Math.max(x0,    rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
186	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
187	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(realizationAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(realizationAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(realizationAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(rtol    *    FastMath.abs(x1),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
188	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(f1  *  FastMath.abs(x1),  atol);  break;	  Method    rtol    =    FastMath.max(x0    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
189	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  absoluteAccuracy);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
190	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x2),  atol);	  Method    rtol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
191	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
192	[BUG]  [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  atol  *  FastMath.max(rtol  *  FastMath.abs(x0),  rtol);  break;	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
193	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  rtol),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
194	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(absoluteAccuracy  *  FastMath.abs(x1,  atol),  absoluteAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x1,    atol),    absoluteAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
195	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(rtol  *  FastMath.abs(x0),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x0),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  if(inverted  <  =  x0)  {  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(inverted  <  =  x0)  {  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(inverted  <  =  x0)  {  inverted  =  x0  *  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  break;  }	  inverted    =    x0    *    FastMath.max(x0    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
197	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(FastMath.abs(x1),  atol);	  inverted    =    rtol    *    FastMath.max(FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
198	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  break;	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
199	[BUG]  [BUGGY]  inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  x0  *  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  absoluteAccuracy);	  inverted    =    x0    *    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
200	[BUG]  [BUGGY]  inverted  =  rtol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  rtol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  rtol  *  FastMath.max(x0  *  FastMath.abs(x1),  rtol);	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
201	[BUG]  [BUGGY]  return  f0?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  f0?  x0  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  f0?  x0  :  x0;	  return    inverted?    x0    :    x0;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
202	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  break;	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
203	[BUG]  [BUGGY]  switch(x)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  switch(x)  {  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	switch(x)  {	  switch(fx)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
204	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
205	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x2),  rtol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x2),  rtol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x2),  rtol);	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    rtol);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
206	[BUG]  [BUGGY]  Math.max(x1,  l  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  l  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  l  *  FastMath.abs(x1),  atol));	  Math.max(x1,    rtol    *    FastMath.abs(x0),    atol));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
207	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
208	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1,  atol));  break;	  RelativeAccuracy    atol    =    FastMath.max(relativeAccuracy    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
209	[BUG]  [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	inverted  =  inverted  *  FastMath.max(rtol  *  FastMath.abs(x1),  rtol);  break;	  inverted    =    atol    *    FastMath.max(rtol    *    FastMath.abs(x1),    rtol);    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
210	[BUG]  [BUGGY]  return  x0?  inverted  :  x0;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  x0?  inverted  :  x0;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  x0?  inverted  :  x0;	  return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
211	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  FastMath.abs(x1));  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  FastMath.abs(x1));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(FastMath.abs(x1),  atol  *  FastMath.abs(x1));	  Method    rtol    =    FastMath.max(FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
212	[BUG]  [BUGGY]  Math.max(max,  inverted  *  FastMath.abs(x1),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(max,  inverted  *  FastMath.abs(x1),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(max,  inverted  *  FastMath.abs(x1),  atol));	  Math.max(max,    rtol    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
213	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  x2),  relativeAccuracy);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  x2),  relativeAccuracy);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  Math.max(relativeAccuracy  *  FastMath.abs(x1,  x2),  relativeAccuracy);	  RelativeAccuracy    atol    =    Math.max(relativeAccuracy    *    FastMath.abs(x2),    relativeAccuracy);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
214	[BUG]  [BUGGY]  return  inverted?  x0  :  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  return  inverted?  x0  :  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	return  inverted?  x0  :  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol);	  return    inverted?    x0    :    FastMath.max(rtol    *    FastMath.abs(x1),    atol);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
215	[BUG]  [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  break;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	RelativeAccuracy  atol  =  FastMath.max(x1,  inverted  *  FastMath.abs(x1),  atol);  break;	  RelativeAccuracy    atol    =    FastMath.max(x1,    rtol    *    FastMath.abs(x1),    atol);    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
216	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(relativeAccuracy  *  FastMath.abs(x1),  atol  +  1);	  Method    rtol    =    FastMath.max(rtol    *    FastMath.abs(x1),    atol    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
217	[BUG]  [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Method  rtol  =  FastMath.max(rtol  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x0;	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
218	[BUG]  [BUGGY]  if(x  <  =  0)  {  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(x  <  =  0)  {  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(x  <  =  0)  {  Method  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }	  Method    rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
219	[BUG]  [BUGGY]  Math.max(relativeAccuracy,  x0  *  FastMath.abs(rtol),  atol));  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(relativeAccuracy,  x0  *  FastMath.abs(rtol),  atol));  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(relativeAccuracy,  x0  *  FastMath.abs(rtol),  atol));	  Math.max(relativeAccuracy,    x0    *    FastMath.abs(x1),    atol));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
220	[BUG]  [BUGGY]  Math.max(x1,  inverted  *  FastMath.abs(x1),  atol));  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  Math.max(x1,  inverted  *  FastMath.abs(x1),  atol));  break;  [BUGGY]      case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	Math.max(x1,  inverted  *  FastMath.abs(x1),  atol));  break;	  Math.max(x1,    rtol    *    FastMath.abs(x1),    atol));    break;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
221	[BUG]  [BUGGY]  if(x  <  =  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      break;  default:  throw  new  MathInternalError();  }  }    if  (FastMath.abs(x1  -  x0)  <  FastMath.max(rtol  *  FastMath.abs(x1),  atol))  {      [BUGGY]  if(x  <  =  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  return  inverted  ?  x1  :  x0;  case  RIGHT_SIDE:  return  inverted  ?  x0  :  x1;  case  BELOW_SIDE:  return  (f1  <=  0)  ?  x1  :  x0;  case  ABOVE_SIDE:  return  (f1  >=  0)  ?  x1  :  x0;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.4082482904638631	237	237	1	replace	if(x  <  =  0)  {  rtol  =  FastMath.max(x1  *  FastMath.abs(x1),  atol);  return  inverted?  x0  :  x;  }	  rtol    =    FastMath.max(x1    *    FastMath.abs(x1),    atol);    return    inverted?    x0    :    x;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
