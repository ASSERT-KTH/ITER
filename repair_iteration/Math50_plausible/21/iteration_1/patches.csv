bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(x1)  <  =  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
3	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
4	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (f1.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
5	[BUG]  [BUGGY]  x1  =  x;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x1  =  x;  f1  =  fx;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  x;  f1  =  fx;	      x1    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  x1  =  f0;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x1  =  f0;  f1  =  fx;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  f0;  f1  =  fx;	      x1    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  x1  =  fx;  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x1  =  fx;  f1  =  ftol;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  fx;  f1  =  ftol;	      x1    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
8	[BUG]  [BUGGY]  f1  =  Math.abs(f2);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.abs(f2);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f2);	      f1    =    Math.abs(f1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  f1  =  Math.abs(f1)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.abs(f1)-  1;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)-  1;	      f1    =    Math.abs(f1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  f1  =  Math.abs(f0);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.abs(f0);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f0);	      f1    =    Math.abs(f1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  AllowedSolution.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  ==  ftol)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f0)  ==  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  ==  ftol)  {	  if    (FastMath.abs(f1)    ==    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  if  (FastMath.abs(fx)  ==  ftol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(fx)  ==  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(fx)  ==  ftol)  {	  if    (FastMath.abs(f1)    ==    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  f0  =  Math.max(f0,  max);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.max(f0,  max);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(f0,  max);	      f0    =    Math.max(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
18	[BUG]  [BUGGY]  f0  =  Math.max(f1,  f1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.max(f1,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(f1,  f1);	      f0    =    Math.max(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
19	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  fx)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  fx)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  fx)  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  max)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  max)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  max)  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if  (FastMath.abs(f0)>  ftol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f0)>  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)>  ftol)  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  f0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  =  f0)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  f0)  {	  if    (FastMath.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  f1  =  Math.max(f0,  f1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.max(f0,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(f0,  f1);	      f1    =    Math.max(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  f1  =  Math.max(f1,  f2);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.max(f1,  f2);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(f1,  f2);	      f1    =    Math.max(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  f1  =  x;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  x;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  x;	      f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  ftol;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  ftol;	      f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  f1  =  f0;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  f0;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  f0;	      f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  AllowedSolution.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  ftol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  <  ftol)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f0)  <  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  <  ftol)  {	  if    (FastMath.abs(f1)    <    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  f1  =  Math.min(f1,  f2);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.min(f1,  f2);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.min(f1,  f2);	      f1    =    Math.min(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  f1  =  Math.min(f0,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.min(f0,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.min(f0,  f1);	      f1    =    Math.min(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  AllowedSolution.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  ftol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  f0  =  Math.min(f0,  max);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.min(f0,  max);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(f0,  max);	      f0    =    Math.min(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  f0  =  Math.min(f1,  f1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.min(f1,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(f1,  f1);	      f0    =    Math.min(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
46	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
47	[BUG]  [BUGGY]  f0  =  f1;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  f1;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  f1;	      f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  f0  =  x;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  x;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  x;	      f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  f0  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  fx  +  1;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fx  +  1;	      f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  x0  =  fx;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x0  =  fx;  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  fx;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  x0  =  fx;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x0  =  fx;  f1  =  fx;  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  fx;  f1  =  fx;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  f1  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  fx  +  1;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  fx  +  1;	      f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  ftol)  {	  if    (FastMath.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  f1  =  Math.abs(f1)+  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.abs(f1)+  1;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)+  1;	      f1    =    Math.abs(f1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  ==  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
58	[BUG]  [BUGGY]  f0  =  Math.max(F0,  f1);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.max(F0,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(F0,  f1);	      f0    =    Math.max(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
60	[BUG]  [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
61	[BUG]  [BUGGY]  if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }	      x1    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
62	[BUG]  [BUGGY]  if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }	      x1    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
63	[BUG]  [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  x1;  }  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowed)  {  if  (!inverted)  {  return  x1;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  x0;  }  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowed)  {  if  (!inverted)  {  return  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(allowed)  {  if  (!inverted)  {  return  f0;  }  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowed)  {  if  (!inverted)  {  return  f0;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  f0  =  Math.min(F0,  f1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  Math.min(F0,  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(F0,  f1);	      f0    =    Math.min(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
67	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  =  absoluteAccuracy)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  absoluteAccuracy)  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
69	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  >=  ftol)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  >=  ftol)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  >=  ftol)  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(fx))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(fx))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  Math.abs(fx))  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  if(!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(!inverted)  {  return  x0;  }  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!inverted)  {  return  x0;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(!inverted)  {  return  x1;  }  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!inverted)  {  return  x1;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  x1  =  fx;  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  x1  =  fx;  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  fx;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f1);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f1);  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  f1);	      f1    =    Math.max(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
78	[BUG]  [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
82	[BUG]  [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
83	[BUG]  [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
84	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
85	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
86	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	      if(allowed)    {    if    (FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  f0  =  ftol;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f0  =  ftol;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  ftol;	      f0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy)  {  [BUGGY]    switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;        [BUGGY]  f1  =  Math.abs(f1)/;  [BUGGY]    if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/;	      f1    =    Math.abs(f1);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
