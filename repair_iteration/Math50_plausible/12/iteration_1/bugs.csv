bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(fx  <  0.0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(fx  <  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0.0)  {	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  if(fx!=  0.0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(fx!=  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx!=  0.0)  {	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  if(fx  >=  0.0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(fx  >=  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >=  0.0)  {	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	  	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]    final  double  fx  =  computeObjectiveValue(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    final  double  fx  =  computeObjectiveValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    final  double  fx  =  computeObjectiveValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
6	[BUG]  [BUGGY]    fx  =  computeObjectiveValue(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    fx  =  computeObjectiveValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    fx  =  computeObjectiveValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
7	[BUG]  [BUGGY]    final  double  fx  =  computeFunctionValue(x);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    final  double  fx  =  computeFunctionValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    final  double  fx  =  computeFunctionValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
8	[BUG]  [BUGGY]    final  double  fx  =  computeIntegerValue(x);  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    final  double  fx  =  computeIntegerValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    final  double  fx  =  computeIntegerValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
9	[BUG]  [BUGGY]    if(fx  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  <  0)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    if(fx  <  0)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
10	[BUG]  [BUGGY]    final  double  f0  =  computeObjectiveValue(x);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    final  double  f0  =  computeObjectiveValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    final  double  f0  =  computeObjectiveValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
11	[BUG]  [BUGGY]    final  double  fx  =  computeFullValue(x);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    final  double  fx  =  computeFullValue(x);  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    final  double  fx  =  computeFullValue(x);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
12	[BUG]  [BUGGY]  if(fx  <  =  0.0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(fx  <  =  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0.0)  {	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  if(fx  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]  if(fx  >  0.0)  {  [BUGGY]  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >  0.0)  {	if  (fx  ==  0.0)  {  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
14	[BUG]  [BUGGY]    if(fx  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    if(fx  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
15	[BUG]  [BUGGY]    if(fx  >  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]    while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);      [BUGGY]    if(fx  >  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]  if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	    if(fx  >  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
