bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x0,  atol);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0,  atol);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeObjectiveValue(x0,  atol);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  f0  =  computeFunctionValue(x0);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeFunctionValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeFunctionValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
3	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x0,  rtol);  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0,  rtol);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeObjectiveValue(x0,  rtol);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
4	[BUG]  [BUGGY]  f0  =  computeRelativeValue(x0);  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeRelativeValue(x0);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeRelativeValue(x0);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	  	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
6	[BUG]  [BUGGY]    x0  =  computeObjectiveValue(x0);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeObjectiveValue(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeObjectiveValue(x0);		non-compiled	[CE]  not  a  statement	4	None	add
7	[BUG]  [BUGGY]    fx  =  computeObjectiveValue(x0);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    fx  =  computeObjectiveValue(x0);  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    fx  =  computeObjectiveValue(x0);		non-compiled	[CE]  not  a  statement	4	None	add
8	[BUG]  [BUGGY]    f0  =  computeObjectiveValue(x0);  break;  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    f0  =  computeObjectiveValue(x0);  break;  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    f0  =  computeObjectiveValue(x0);  break;		non-compiled	[CE]  not  a  statement	4	None	add
9	[BUG]  [BUGGY]    x0  =  computeObjectiveValue(x0);  break;  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    x0  =  computeObjectiveValue(x0);  break;  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    x0  =  computeObjectiveValue(x0);  break;		non-compiled	[CE]  not  a  statement	4	None	add
10	[BUG]  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }		non-compiled	[CE]  not  a  statement	4	None	add
11	[BUG]  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  f0  =  computeObjectiveValue(x0);  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  f0  =  computeObjectiveValue(x0);  }  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  f0  =  computeObjectiveValue(x0);  }		non-compiled	[CE]  not  a  statement	4	None	add
12	[BUG]  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  throw  new  MathInternalError();  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  throw  new  MathInternalError();  }  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  throw  new  MathInternalError();  }		non-compiled	[CE]  not  a  statement	4	None	add
13	[BUG]  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  }  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x),  atol));  }		non-compiled	[CE]  not  a  statement	4	None	add
14	[BUG]  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  x0  =  computeObjectiveValue(x0);  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  x0  =  computeObjectiveValue(x0);  }  [BUGGY]  f0  =  computeObjectiveValue(x0);  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	    if(x  ==  x1)  {  f0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  }  else  {  x0  =  computeObjectiveValue(x0);  }		non-compiled	[CE]  not  a  statement	4	None	add
15	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x0,  fx);  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x0,  fx);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeObjectiveValue(x0,  fx);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
16	[BUG]  [BUGGY]  f0  =  computeObjectiveValue(x1);  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  case  ILLINOIS:  f0  *=  0.5;  break;  case  PEGASUS:  f0  *=  f1  /  (f1  +  fx);  break;  case  REGULA_FALSI:  if  (x  ==  x1)  {  x0  =  0.5  *  (x0  +  x1  -  FastMath.max(rtol  *  FastMath.abs(x1),  atol));  [BUGGY]  f0  =  computeObjectiveValue(x1);  [BUGGY]  }  break;  default:  throw  new  MathInternalError();  }  }  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	1.0	189	189	1	replace	f0  =  computeObjectiveValue(x1);	f0  =  computeObjectiveValue(x0);  	non-compiled	[CE]  not  a  statement	3	None	replace
