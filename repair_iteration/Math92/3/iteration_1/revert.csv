projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newLong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.longValues();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=(long)factorials.get(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:"+b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=(long)factorials.get(b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toString();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.split(":");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=factorials.toArray(newLong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newLong[factorials.size()+1]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.toArray(newLong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials().length;
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials()/2;
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b,1);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b,2);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b+1);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95shorta=(short)factorials.get(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=(long)factorials.get(a,b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95inta=(int)factorials.get(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95shorta=(short)factorials.get(b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95inta=(int)factorials.get(b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.split(":",a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.split(":"+a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.toString();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=newlong[b.toString()];
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95short[]factorials=b.toString();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.getFactorials(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=this.b.getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:"+b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:added");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,0,"overflow:");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,0,1);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,0,a.length);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,",overflow:"+b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=factorials.toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newlong[factorials.size()-1]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.longValues();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.getValues();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.length();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.split(":n");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:",b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,0,1);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b)-1;
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=this.factorials.toArray(newLong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newLong[factorials.size()-1]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=this.factorials.toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toString()+1;
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95shorta=(long)factorials.get(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials().toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials(a,b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:"+BYTE_PI);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95shorta=(long)factorials.get(b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.getValues();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.longValues()+1;
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:",b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:n");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,EPSILON);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b,EPSILON);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toString().trim();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,3,"overflow:");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newlong[factorials.size()+1]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,3,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,2,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,0,a.length);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials().toArray(factorials);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:"+factorials);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:"+EPSILON);
