bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  +  1]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  Long[factorials.size()  +  1]);	      long[]    factorials    =    b.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  long[]  factorials  =  a.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.toArray(new  Long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toArray(new  Long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials(a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a);	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().length;  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials().length;  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().length;	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials()  /  2;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials()  /  2;  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials()  /  2;	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  1);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  b,  1);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  1);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  2);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  b,  2);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  2);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  a);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  a);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  1);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b  +  1);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  short  a  =(short)factorials.get(a);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  short  a  =(short)factorials.get(a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(short)factorials.get(a);	      long    a    =(long)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  long  a  =(long)factorials.get(a,  b);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =(long)factorials.get(a,  b);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =(long)factorials.get(a,  b);	      long    a    =(long)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  int  a  =(int)factorials.get(a);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  int  a  =(int)factorials.get(a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	int  a  =(int)factorials.get(a);	      long    a    =(long)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  short  a  =(short)factorials.get(b);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  short  a  =(short)factorials.get(b);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(short)factorials.get(b);	      long    a    =(long)factorials.get(b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  int  a  =(int)factorials.get(b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  int  a  =(int)factorials.get(b);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	int  a  =(int)factorials.get(b);	      long    a    =(long)factorials.get(b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ": ",  a);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.split( ": ",  a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ": ",  a);	      long[]    factorials    =    b.split(   ":   ");    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ": "  +  a);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.split( ": "  +  a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ": "  +  a);	      long[]    factorials    =    b.split(   ":   ");    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  long[]  factorials  =  a.toString();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.toString();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toString();	      long[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString()  ];  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  new  long[b.toString()  ];  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString()  ];	      long[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  short[]  factorials  =  b.toString();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  short[]  factorials  =  b.toString();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  b.toString();	      long[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  long[]  factorials  =  a.getFactorials();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.getFactorials();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.getFactorials();	      long[]    factorials    =    b.getFactorials();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  long[]  factorials  =  b.getFactorials(a);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.getFactorials(a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.getFactorials(a);	      long[]    factorials    =    b.getFactorials();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  long[]  factorials  =  this.b.getFactorials();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  this.b.getFactorials();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.b.getFactorials();	      long[]    factorials    =    b.getFactorials();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: ");  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,   "overflow: ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: ");	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: "  +  b);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,   "overflow: "  +  b);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: "  +  b);	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  return  add(a,  b,   "overflow:  added ");  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,   "overflow:  added ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow:  added ");	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,   "overflow: ");  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,  0,   "overflow: ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,   "overflow: ");	  return    addAndCheck(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  1);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,  0,  1);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  1);	  return    addAndCheck(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  a.length);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,  0,  a.length);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  a.length);	  return    addAndCheck(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  b);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b, ",overflow: "  +  b);	  return    addAndCheck(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  -  1]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  long[factorials.size()  -  1]);	      long[]    factorials    =    b.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  long[]  factorials  =  a.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.toArray(new  long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toArray(new  long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  long[]  factorials  =  b.longValues();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.longValues();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.longValues();	      long[]    factorials    =    a.longValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  long[]  factorials  =  a.getValues();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.getValues();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.getValues();	      long[]    factorials    =    a.longValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  long[]  factorials  =  a.length();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.length();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.length();	      long[]    factorials    =    a.longValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ":n ");  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.split( ":n ");  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ":n ");	      long[]    factorials    =    b.split(   ":   ");    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: ",  b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,   "overflow: ",  b);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: ",  b);	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  return  add(a,  b,  0,  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,  0,  1);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  1);	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  1;  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  1;  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b)-  1;	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  -  1]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  Long[factorials.size()  -  1]);	      long[]    factorials    =    b.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);	      long[]    factorials    =    b.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  long[]  factorials  =  b.toString()  +  1;  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toString()  +  1;  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toString()  +  1;	      long[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  short  a  =(long)factorials.get(a);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  short  a  =(long)factorials.get(a);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(long)factorials.get(a);	      long    a    =(long)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials(a,  b);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b);	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  BYTE_PI);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  BYTE_PI);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  BYTE_PI);	  return    addAndCheck(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  short  a  =(long)factorials.get(b);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  short  a  =(long)factorials.get(b);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(long)factorials.get(b);	      long    a    =(long)factorials.get(b);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  long[]  factorials  =  b.getValues();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.getValues();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.getValues();	      long[]    factorials    =    b.getFactorials();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  long[]  factorials  =  a.longValues()  +  1;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  a.longValues()  +  1;  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.longValues()  +  1;	      long[]    factorials    =    a.longValues();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: ",  b);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,   "overflow: ",  b);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: ",  b);	  return    addAndCheck(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow:n ");  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,   "overflow:n ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow:n ");	  return    addAndCheck(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  EPSILON);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  EPSILON);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  EPSILON);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  EPSILON);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long  a  =  Math.min(factorials.length,  b,  EPSILON);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  EPSILON);	      long    a    =    Math.min(factorials.length,    b);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  long[]  factorials  =  b.toString().trim();  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toString().trim();  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toString().trim();	      long[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  3, "overflow: ");  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,  3, "overflow: ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  3, "overflow: ");	  return    addAndCheck(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  +  1]);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  long[factorials.size()  +  1]);	      long[]    factorials    =    b.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  return  add(a,  b,  3, "overflow:  add ");  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,  3, "overflow:  add ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  3, "overflow:  add ");	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  return  add(a,  b,  2, "overflow:  add ");  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,  2, "overflow:  add ");  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  2, "overflow:  add ");	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  return  add(a,  b,  0,  a.length);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  add(a,  b,  0,  a.length);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  a.length);	  return    add(a,    b,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials);  [BUGGY]    return  addAndCheck(a,  b,     "overflow:  add   ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(factorials);	      long[]    factorials    =    getFactorials();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  factorials);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  factorials);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  factorials);	  return    addAndCheck(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    public  static  long  addAndCheck(long  a,  long  b)  {    [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON);  [BUGGY]    }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
