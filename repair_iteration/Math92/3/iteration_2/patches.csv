bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  add(a,  b,  0,  0);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  0);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  0);	  return    add(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: "  +  this.factorials.length);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow: "  +  this.factorials.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: "  +  this.factorials.length);	  return    add(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  short[]  factorials  =  b.toArray(new  long[factorials.size()]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  b.toArray(new  long[factorials.size()]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  b.toArray(new  long[factorials.size()]);	  long[]    factorials    =    b.toArray(new    long[factorials.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
4	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  a,  b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  a,  b);	  long    a    =    Math.min(factorials.length,    a);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  long  a  =  Math.max(factorials.length,  b);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.max(factorials.length,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.max(factorials.length,  b);	  long    a    =    Math.min(factorials.length,    a);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  short  a  =  Math.min(factorials.length,  a);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short  a  =  Math.min(factorials.length,  a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =  Math.min(factorials.length,  a);	  long    a    =    Math.min(factorials.length,    a);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  0,  a.length);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  addAndCheck(a,  b,  0,  a.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  addAndCheck(a,  b,  0,  a.length);	  return    addAndCheck(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  long  b  =  addAndCheck(a,  b,  0,  a.length);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  b  =  addAndCheck(a,  b,  0,  a.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  b  =  addAndCheck(a,  b,  0,  a.length);	  return    addAndCheck(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  -  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  -  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  a.length  -  1);	  return    addAndCheck(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
10	[BUG]  [BUGGY]  return  add(a,  b,  0,  2);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  2);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  2);	  return    add(a,    b,    0,    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
11	[BUG]  [BUGGY]  return  add(a,  b,  0,  3);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  3);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  3);	  return    add(a,    b,    0,    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
12	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ":null ");  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.split( ":null ");  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ":null ");	  long[]    factorials    =    b.split(   ":n   ");    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
13	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials,  b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(factorials,  b);	  long[]    factorials    =    getFactorials().toArray(factorials);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
14	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials,  a);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(factorials,  a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(factorials,  a);	  long[]    factorials    =    getFactorials().toArray(factorials);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
15	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().addAndCheck(a,  b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().addAndCheck(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().addAndCheck(a,  b);	  long[]    factorials    =    getFactorials().toArray(factorials);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
16	[BUG]  [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  BYTE_PI);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  BYTE_PI);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b, ",overflow: "  +  BYTE_PI);	  return    addAndCheck(a,    b,       "overflow:   "    +    BYTE_PI);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
17	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  BYTE_PI);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  BYTE_PI);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  BYTE_PI);	  return    addAndCheck(a,    b,       "overflow:   "    +    BYTE_PI);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
18	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  false);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  false);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b,  false);	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
19	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  null);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  null);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b,  null);	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
20	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  true);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  true);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b,  true);	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
21	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  1,  a.length);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  1,  a.length);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b  +  1,  a.length);	  long    a    =    Math.min(factorials.length,    b    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b  *  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b  *  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b  *  1);	  long    a    =    Math.min(factorials.length,    b    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  a  +  1);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  a  +  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  a  +  1);	  long    a    =    Math.min(factorials.length,    b    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  3);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b,  3);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  3);	  long    a    =    Math.min(factorials.length,    b,    2);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  4);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b,  4);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  4);	  long    a    =    Math.min(factorials.length,    b,    2);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  -  1]);	  long[]    factorials    =    getFactorials().toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
27	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  +  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  +  1]);	  long[]    factorials    =    getFactorials().toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  short[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ]);	  long[]    factorials    =    getFactorials().toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
29	[BUG]  [BUGGY]  long[]  factorials  =  a.length()  +  1;  [CE]  >  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.length()  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.length()  +  1;	  long[]    factorials    =    a.length();    	non-compiled	[CE]  >  expected	36	None	replace
30	[BUG]  [BUGGY]  long[]  factorials  =  b.length();  [CE]  >  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.length();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.length();	  long[]    factorials    =    a.length();    	non-compiled	[CE]  >  expected	36	None	replace
31	[BUG]  [BUGGY]  long[]  factorials  =  a.getAllValues();  [CE]  >  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.getAllValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.getAllValues();	  long[]    factorials    =    a.getValues();    	non-compiled	[CE]  >  expected	35	None	replace
32	[BUG]  [BUGGY]  long[]  factorials  =  a.getFullValues();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.getFullValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.getFullValues();	  long[]    factorials    =    a.getValues();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
33	[BUG]  [BUGGY]  int  a  =(int)factorials.get(a,  b);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  int  a  =(int)factorials.get(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	int  a  =(int)factorials.get(a,  b);	  int    a    =(int)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  long[]  factorials  =  this.b.getFactorials(a);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.b.getFactorials(a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.b.getFactorials(a);	  long[]    factorials    =    this.b.getFactorials();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
35	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  0,  EPSILON);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b,  0,  EPSILON);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  0,  EPSILON);	  long    a    =    Math.min(factorials.length,    b,    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
36	[BUG]  [BUGGY]  long  a  =(short)factorials.get(a);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =(short)factorials.get(a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =(short)factorials.get(a);	  short    a    =(short)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  2);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  2);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  2);	  return    addAndCheck(a,    b,    0,    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  0,  1);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  addAndCheck(a,  b,  0,  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  addAndCheck(a,  b,  0,  1);	  return    addAndCheck(a,    b,    0,    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
39	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  1L);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  1L);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  1L);	  return    addAndCheck(a,    b,    0,    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  factorials,  EPSILON);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  factorials,  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  factorials,  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
41	[BUG]  [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  EPSILON);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b, ",overflow: "  +  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
42	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  + "n ");  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  + "n ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  + "n ");	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
43	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  this.factorials);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  this.factorials);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  this.factorials);	  return    addAndCheck(a,    b,       "overflow:   "    +    factorials);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
44	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  factorials,   "overflow: "  +  b);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  factorials,   "overflow: "  +  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  factorials,   "overflow: "  +  b);	  return    addAndCheck(a,    b,       "overflow:   "    +    factorials);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
45	[BUG]  [BUGGY]  return  add(a,  b, ",overflow:  added ");  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b, ",overflow:  added ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b, ",overflow:  added ");	  return    add(a,    b,       "overflow:    added   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  return  add(a,  b,  0,   "overflow:  added ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,   "overflow:  added ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,   "overflow:  added ");	  return    add(a,    b,       "overflow:    added   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
47	[BUG]  [BUGGY]  long  a  =  add(a,  b,  0,  a.length);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  add(a,  b,  0,  a.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  add(a,  b,  0,  a.length);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
48	[BUG]  [BUGGY]  long  b  =  add(a,  b,  0,  a.length);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  b  =  add(a,  b,  0,  a.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  b  =  add(a,  b,  0,  a.length);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
49	[BUG]  [BUGGY]  return  add(a,  b,  0,  a.length  -  1);  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  a.length  -  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  a.length  -  1);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
50	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  2,   "overflow: ");  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  2,   "overflow: ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  2,   "overflow: ");	  return    addAndCheck(a,    b,    3,   "overflow:   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
51	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  2);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  2);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  2);	  long    a    =    Math.min(factorials.length,    EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
52	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  1);	  long    a    =    Math.min(factorials.length,    EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
53	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  0,  EPSILON);  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  0,  EPSILON);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  0,  EPSILON);	  long    a    =    Math.min(factorials.length,    EPSILON);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
54	[BUG]  [BUGGY]  long[]  factorials  =  a.split( ": "  +  b);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.split( ": "  +  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.split( ": "  +  b);	  long[]    factorials    =    b.split(   ":   "    +    a);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ": "  +  a,  b);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.split( ": "  +  a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ": "  +  a,  b);	  long[]    factorials    =    b.split(   ":   "    +    a);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  long[factorials.size()  -  1]);	  long[]    factorials    =factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
57	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =factorials.toArray(new  long[factorials.size()  +  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  long[factorials.size()  +  1]);	  long[]    factorials    =factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
58	[BUG]  [BUGGY]  return  add(a,  b,  0,   "overflow: ");  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,   "overflow: ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,   "overflow: ");	  return    add(a,    b,    2,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
59	[BUG]  [BUGGY]  return  add(a,  b,  0, "overflow:  add ");  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0, "overflow:  add ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0, "overflow:  add ");	  return    add(a,    b,    2,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  return  add(a,  b,  2,   "overflow: ");  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  2,   "overflow: ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  2,   "overflow: ");	  return    add(a,    b,    2,   "overflow:    add   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
61	[BUG]  [BUGGY]  long[]  factorials  =  b.getAllValues();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.getAllValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.getAllValues();	  long[]    factorials    =    b.getValues();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  long[]  factorials  =  this.b.getValues();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.b.getValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.b.getValues();	  long[]    factorials    =    b.getValues();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  factorials,   "overflow: ",  b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  factorials,   "overflow: ",  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  factorials,   "overflow: ",  b);	  return    addAndCheck(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
64	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  0);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  0);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  0);	  return    addAndCheck(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
65	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  +  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  +  1]);	  long[]    factorials    =    this.factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
66	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[this.factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[this.factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  Long[this.factorials.size()  ]);	  long[]    factorials    =    this.factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
67	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  -  1]);	  long[]    factorials    =    this.factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
68	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().length  /  2;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().length  /  2;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().length  /  2;	  long[]    factorials    =    getFactorials()    /    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials()  *  2;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials()  *  2;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials()  *  2;	  long[]    factorials    =    getFactorials()    /    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  +  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  Long[factorials.size()  +  1]);	  long[]    factorials    =factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =factorials.toArray(new  Long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =factorials.toArray(new  Long[factorials.size()  -  1]);	  long[]    factorials    =factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
72	[BUG]  [BUGGY]  long[]  factorials  =  b.getFactorials(a,  b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.getFactorials(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.getFactorials(a,  b);	  long[]    factorials    =    b.getFactorials(a);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
73	[BUG]  [BUGGY]  long[]  factorials  =  a.getFactorials(b);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.getFactorials(b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.getFactorials(b);	  long[]    factorials    =    b.getFactorials(a);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
74	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  2,  2);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b,  2,  2);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  2,  2);	  long    a    =    Math.min(factorials.length,    b,    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  short[]  factorials  =  a.toString();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  a.toString();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  a.toString();	  short[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  int[]  factorials  =  b.toString();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  int[]  factorials  =  b.toString();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	int[]  factorials  =  b.toString();	  short[]    factorials    =    b.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  long[]  factorials  =  a.longValues()  *  1;  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.longValues()  *  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.longValues()  *  1;	  long[]    factorials    =    a.longValues()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
78	[BUG]  [BUGGY]  long[]  factorials  =  new  long[a.longValues()  ];  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[a.longValues()  ];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[a.longValues()  ];	  long[]    factorials    =    a.longValues()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
79	[BUG]  [BUGGY]  short[]  factorials  =  a.longValues()  +  1;  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  a.longValues()  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  a.longValues()  +  1;	  long[]    factorials    =    a.longValues()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
80	[BUG]  [BUGGY]  long[]  factorials  =  a.toString()  +  1;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.toString()  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toString()  +  1;	  long[]    factorials    =    b.toString()    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
81	[BUG]  [BUGGY]  short[]  factorials  =  b.toString()  +  1;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  b.toString()  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  b.toString()  +  1;	  long[]    factorials    =    b.toString()    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
82	[BUG]  [BUGGY]  long[]  factorials  =  a.toString().shortValue();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.toString().shortValue();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toString().shortValue();	  long[]    factorials    =    a.toString();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
83	[BUG]  [BUGGY]  short  a  =(short)factorials.get(a,  b);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short  a  =(short)factorials.get(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(short)factorials.get(a,  b);	  long    a    =(long)factorials.get(a,    b);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  long  a  =(long)factorials.get(a,  b  +  1);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =(long)factorials.get(a,  b  +  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =(long)factorials.get(a,  b  +  1);	  long    a    =(long)factorials.get(a,    b);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
85	[BUG]  [BUGGY]  long  a  =(long)factorials.get(a,  b).longValue();  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =(long)factorials.get(a,  b).longValue();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =(long)factorials.get(a,  b).longValue();	  long    a    =(long)factorials.get(a,    b);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  1];  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  1];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString()  +  1];	  long[]    factorials    =    new    long[b.toString()    ];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
87	[BUG]  [BUGGY]  long[]  factorials  =  new  long[a.toString()  ];  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[a.toString()  ];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[a.toString()  ];	  long[]    factorials    =    new    long[b.toString()    ];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
88	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  a.length  ];  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  a.length  ];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString()  +  a.length  ];	  long[]    factorials    =    new    long[b.toString()    ];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
89	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b)/  1;  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b)/  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b)/  1;	  long    a    =    Math.min(factorials.length,    b)-    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
90	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  2;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  2;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b)-  2;	  long    a    =    Math.min(factorials.length,    b)-    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
91	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  1L;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b)-  1L;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b)-  1L;	  long    a    =    Math.min(factorials.length,    b)-    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  long  a  =(short)factorials.get(b);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =(short)factorials.get(b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =(short)factorials.get(b);	  short    a    =(short)factorials.get(b);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
93	[BUG]  [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  this.overflow);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b, ",overflow: "  +  this.overflow);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b, ",overflow: "  +  this.overflow);	  return    addAndCheck(a,    b,   ",overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
94	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().length  -  1;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().length  -  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().length  -  1;	  long[]    factorials    =    getFactorials().length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().length  +  1;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().length  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().length  +  1;	  long[]    factorials    =    getFactorials().length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  long[]  factorials  =  a.toString().trim();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.toString().trim();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toString().trim();	  long[]    factorials    =    b.toString().trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
97	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString().trim()  ];  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[b.toString().trim()  ];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString().trim()  ];	  long[]    factorials    =    b.toString().trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
98	[BUG]  [BUGGY]  long[]  factorials  =  b.toString().trim()  +  1;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toString().trim()  +  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toString().trim()  +  1;	  long[]    factorials    =    b.toString().trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
99	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  this.factorials.length);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  this.factorials.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  this.factorials.length);	  return    addAndCheck(a,    b,    0,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
100	[BUG]  [BUGGY]  return  add(a,  b, ",overflow: "  +  b);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b, ",overflow: "  +  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b, ",overflow: "  +  b);	  return    add(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
101	[BUG]  [BUGGY]  short[]  factorials  =  getFactorials(a);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  getFactorials(a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  getFactorials(a);	  long[]    factorials    =    getFactorials(a);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
102	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(b);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(b);	  long[]    factorials    =    getFactorials(a);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  -  1]);	  long[]    factorials    =    this.factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
104	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[this.factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[this.factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  long[this.factorials.size()  ]);	  long[]    factorials    =    this.factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  +  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  +  1]);	  long[]    factorials    =    this.factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
106	[BUG]  [BUGGY]  byte  a  =(byte)factorials.get(b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  byte  a  =(byte)factorials.get(b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	byte  a  =(byte)factorials.get(b);	  int    a    =(int)factorials.get(b);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ": ",  a,  b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.split( ": ",  a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ": ",  a,  b);	  long[]    factorials    =    b.split(   ":   ",    a);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
108	[BUG]  [BUGGY]  long[]  factorials  =  a.split( ": ");  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.split( ": ");  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.split( ": ");	  long[]    factorials    =    b.split(   ":   ",    a);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
109	[BUG]  [BUGGY]  long[]  factorials  =  a.toArray(new  long[factorials.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.toArray(new  long[factorials.size()  -  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toArray(new  long[factorials.size()  -  1]);	  long[]    factorials    =    a.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
110	[BUG]  [BUGGY]  return  add(a,  b,   "overflow:  added ",  b);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow:  added ",  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow:  added ",  b);	  return    add(a,    b,       "overflow:    added   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  return  add(a,  b,  0,  b);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  b);	  return    add(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
112	[BUG]  [BUGGY]  long[]  factorials  =  b  ==  null?  null  :  b.getValues();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b  ==  null?  null  :  b.getValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b  ==  null?  null  :  b.getValues();	  long[]    factorials    =    b.getValues();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
113	[BUG]  [BUGGY]  long[]  factorials  =  b.getFullValues();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.getFullValues();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.getFullValues();	  long[]    factorials    =    b.getValues();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
114	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  1,   "overflow: ");  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  1,   "overflow: ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  1,   "overflow: ");	  return    addAndCheck(a,    b,    3,   "overflow:   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
115	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  1]);  [CE]  >  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  long[factorials.size()  1]);	  long[]    factorials    =    b.toArray(new    long[factorials.size()    -    1]);    	non-compiled	[CE]  >  expected	32	None	replace
116	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  EPSILON  +  1);  [CE]  >  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  EPSILON  +  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  EPSILON  +  1);	  long    a    =    Math.min(factorials.length,    EPSILON);    	non-compiled	[CE]  >  expected	54	None	replace
117	[BUG]  [BUGGY]  return  add(a,  b,  1,   "overflow:  add ");  [CE]  >  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  1,   "overflow:  add ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  1,   "overflow:  add ");	  return    add(a,    b,    3,   "overflow:    add   ");    	non-compiled	[CE]  >  expected	59	None	replace
118	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  b);  [CE]  >  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  b);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  b);	  return    addAndCheck(a,    b,    0,    1);    	non-compiled	[CE]  >  expected	28	None	replace
119	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: "  +  factorials);  [CE]  >  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow: "  +  factorials);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: "  +  factorials);	  return    add(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  >  expected	25	None	replace
120	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: "  +  BYTE_PI);  [CE]  >  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow: "  +  BYTE_PI);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: "  +  BYTE_PI);	  return    add(a,    b,       "overflow:   "    +    b);    	non-compiled	[CE]  >  expected	25	None	replace
121	[BUG]  [BUGGY]  return  add(a,  b,  0,  b.length);  [CE]  >  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  b.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  b.length);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  >  expected	61	None	replace
122	[BUG]  [BUGGY]  short[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =factorials.toArray(new  Long[factorials.size()  ]);	  long[]    factorials    =factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
123	[BUG]  [BUGGY]  short[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  this.factorials.toArray(new  long[factorials.size()  ]);	  long[]    factorials    =    this.factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
124	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  3];  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  3];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString()  +  3];	  long[]    factorials    =    new    long[b.toString()    ];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
125	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  EPSILON);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
126	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  +  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  +  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  EPSILON  +  1);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
127	[BUG]  [BUGGY]  short[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =factorials.toArray(new  long[factorials.size()  ]);	  long[]    factorials    =factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
128	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials()  /  2L;  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials()  /  2L;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials()  /  2L;	  long[]    factorials    =    getFactorials()    /    2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  1]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  Long[factorials.size()  1]);	  long[]    factorials    =    b.toArray(new    Long[factorials.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
130	[BUG]  [BUGGY]  byte  a  =(byte)factorials.get(a);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  byte  a  =(byte)factorials.get(a);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	byte  a  =(byte)factorials.get(a);	  int    a    =(int)factorials.get(a);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
131	[BUG]  [BUGGY]  short[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  this.factorials.toArray(new  Long[factorials.size()  ]);	  long[]    factorials    =    this.factorials.toArray(new    Long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
132	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b,  EPSILON  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b,  EPSILON  +  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b,  EPSILON  +  1);	  long    a    =    Math.min(factorials.length,    b,    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
133	[BUG]  [BUGGY]  short  a  =(long)factorials.get(a,  b);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short  a  =(long)factorials.get(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =(long)factorials.get(a,  b);	  long    a    =(long)factorials.get(a,    b);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
134	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factororials.size()  ]);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factororials.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(new  long[factororials.size()  ]);	  long[]    factorials    =    getFactorials().toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
135	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  b.length);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  b.length);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  b.length);	  return    addAndCheck(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
136	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b  -  1);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b  -  1);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b  -  1);	  long    a    =    Math.min(factorials.length,    b    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
137	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  2);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  b  +  2);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  b  +  2);	  long    a    =    Math.min(factorials.length,    b    +    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
138	[BUG]  [BUGGY]  long[]  factorials  =  b.values();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.values();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.values();	  long[]    factorials    =    b.longValues();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
139	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().values();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().values();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().values();	  long[]    factorials    =    getFactorials().length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
140	[BUG]  [BUGGY]  short[]  factorials  =  getFactorials(a,  b);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  getFactorials(a,  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  getFactorials(a,  b);	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
141	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ],  b);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ],  b);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials().toArray(new  long[factorials.size()  ],  b);	  long[]    factorials    =    getFactorials().toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
142	[BUG]  [BUGGY]  long[]  factorials  =  b.toLongBytes();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toLongBytes();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toLongBytes();	  long[]    factorials    =    b.longValues();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
143	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  +  1);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  +  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  a.length  +  1);	  return    addAndCheck(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
144	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  *  1]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toArray(new  long[factorials.size()  *  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  long[factorials.size()  *  1]);	  long[]    factorials    =    b.toArray(new    long[factorials.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
145	[BUG]  [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  *  1]);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.toArray(new  Long[factorials.size()  *  1]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.toArray(new  Long[factorials.size()  *  1]);	  long[]    factorials    =    b.toArray(new    Long[factorials.size()    -    1]);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
146	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  EPSILON);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(a,  b,  EPSILON);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b,  EPSILON);	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
147	[BUG]  [BUGGY]  long[]  factorials  =  getFactorials(a,  b)-  1;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  getFactorials(a,  b)-  1;  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  getFactorials(a,  b)-  1;	  long[]    factorials    =    getFactorials(a,    b);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
148	[BUG]  [BUGGY]  return  add(a,  b,  3, "overflow: ");  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  3, "overflow: ");  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  3, "overflow: ");	  return    add(a,    b,       "overflow:   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
149	[BUG]  [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[a.size()  ]);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  this.factorials.toArray(new  long[a.size()  ]);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  this.factorials.toArray(new  long[a.size()  ]);	  long[]    factorials    =    this.factorials.toArray(new    long[factorials.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
150	[BUG]  [BUGGY]  long[]  factorials  =  a.toString().split( ": ");  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.toString().split( ": ");  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.toString().split( ": ");	  long[]    factorials    =    a.toString();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
151	[BUG]  [BUGGY]  long[]  factorials  =  a.trim().toString();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.trim().toString();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.trim().toString();	  long[]    factorials    =    b.toString().trim();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
152	[BUG]  [BUGGY]  short[]  factorials  =  getFactorials().toArray(factorials);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short[]  factorials  =  getFactorials().toArray(factorials);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short[]  factorials  =  getFactorials().toArray(factorials);	  long[]    factorials    =    getFactorials().toArray(factorials);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
153	[BUG]  [BUGGY]  return  add(a,  b,   "overflow:  added ",  factorials);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow:  added ",  factorials);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow:  added ",  factorials);	  return    add(a,    b,       "overflow:    added   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
154	[BUG]  [BUGGY]  return  add(a,  b,  0,  a.length  +  1);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  a.length  +  1);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  a.length  +  1);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
155	[BUG]  [BUGGY]  return  add(a,  b,  0,  a.length  -  2);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,  0,  a.length  -  2);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,  0,  a.length  -  2);	  return    add(a,    b,    0,    a.length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
156	[BUG]  [BUGGY]  Long[]  factorials  =  b.toString();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  Long[]  factorials  =  b.toString();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	Long[]  factorials  =  b.toString();	  long[]    factorials    =    b.toString()    +    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
157	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  +  BYTE_PI);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  0,  a.length  +  BYTE_PI);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  0,  a.length  +  BYTE_PI);	  return    addAndCheck(a,    b,       "overflow:   "    +    BYTE_PI);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
158	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  2,  BYTE_PI);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  2,  BYTE_PI);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  2,  BYTE_PI);	  return    addAndCheck(a,    b,       "overflow:   "    +    BYTE_PI);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
159	[BUG]  [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  a.toString()  ];  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  new  long[b.toString()  +  a.toString()  ];  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  new  long[b.toString()  +  a.toString()  ];	  long[]    factorials    =    new    long[b.toString()    ];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
160	[BUG]  [BUGGY]  return  addAndCheck(a,  b,  factorials,  EPSILON,   "overflow: "  +  EPSILON);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,  factorials,  EPSILON,   "overflow: "  +  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,  factorials,  EPSILON,   "overflow: "  +  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
161	[BUG]  [BUGGY]  return  add(a,  b,   "overflow: "  +  EPSILON);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  add(a,  b,   "overflow: "  +  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b,   "overflow: "  +  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   "    +    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
162	[BUG]  [BUGGY]  long[]  factorials  =  a.trim();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  a.trim();  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  a.trim();	  long[]    factorials    =    a.length();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
163	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   ",overflow: "  +  factorials);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,   ",overflow: "  +  factorials);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   ",overflow: "  +  factorials);	  return    addAndCheck(a,    b,   ",overflow:   "    +    b);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
164	[BUG]  [BUGGY]  short  a  =  Math.min(factorials.length,  EPSILON);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  short  a  =  Math.min(factorials.length,  EPSILON);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	short  a  =  Math.min(factorials.length,  EPSILON);	  long    a    =    Math.min(factorials.length,    EPSILON);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
165	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: ",  EPSILON);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  return  addAndCheck(a,  b,   "overflow: ",  EPSILON);  [BUGGY]      }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: ",  EPSILON);	  return    addAndCheck(a,    b,       "overflow:   ",    b);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
166	[BUG]  [BUGGY]  long[]  factorials  =  b.split( ": ",  2);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long[]  factorials  =  b.split( ": ",  2);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long[]  factorials  =  b.split( ": ",  2);	  long[]    factorials    =    b.split(   ":n   ");    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
167	[BUG]  [BUGGY]  long  a  =  Math.min(factorials.length,  a.length);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      public  static  long  addAndCheck(long  a,  long  b)  {      [BUGGY]  long  a  =  Math.min(factorials.length,  a.length);  [BUGGY]      return  addAndCheck(a,  b,       "overflow:  add     ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	long  a  =  Math.min(factorials.length,  a.length);	  long    a    =    Math.min(factorials.length,    a);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
