projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newlong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toArray(newLong[factorials.size()]);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=a.longValues();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=(long)factorials.get(a);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnaddAndCheck(a,b,"overflow:"+b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95returnadd(a,b,"overflow:add");
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=Math.min(factorials.length,b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95longa=(long)factorials.get(b);
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.toString();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.getFactorials();
projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java95long[]factorials=b.split(":");
