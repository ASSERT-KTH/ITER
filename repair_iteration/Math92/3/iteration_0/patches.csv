bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    long[]  factorials  =  getFactorials();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  getFactorials();  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  getFactorials();		non-compiled	[CE]  illegal  start  of  type	6	None	add
2	[BUG]  [BUGGY]    long[]  factorials  =  b.toArray(new  long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  b.toArray(new  long[factorials.size()  ]);  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  b.toArray(new  long[factorials.size()  ]);		non-compiled	[CE]  illegal  start  of  type	6	None	add
3	[BUG]  [BUGGY]    long[]  factorials  =  b.toArray(new  Long[factorials.size()  ]);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  b.toArray(new  Long[factorials.size()  ]);  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  b.toArray(new  Long[factorials.size()  ]);		non-compiled	[CE]  illegal  start  of  type	6	None	add
4	[BUG]  [BUGGY]    long[]  factorials  =  a.longValues();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  a.longValues();  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  a.longValues();		non-compiled	[CE]  illegal  start  of  type	6	None	add
5	[BUG]  [BUGGY]    long  a  =(long)factorials.get(a);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long  a  =(long)factorials.get(a);  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long  a  =(long)factorials.get(a);		non-compiled	[CE]  illegal  start  of  type	6	None	add
6	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: ");  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]  return  addAndCheck(a,  b,   "overflow: ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: ");	return  addAndCheck(a,  b,   "overflow:  add ");  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  b);  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]  return  addAndCheck(a,  b,   "overflow: "  +  b);  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  addAndCheck(a,  b,   "overflow: "  +  b);	return  addAndCheck(a,  b,   "overflow:  add ");  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  return  add(a,  b, "overflow:  add ");  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]  return  add(a,  b, "overflow:  add ");  [BUGGY]  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	return  add(a,  b, "overflow:  add ");	return  addAndCheck(a,  b,   "overflow:  add ");  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]    long  a  =  Math.min(factorials.length,  b);  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long  a  =  Math.min(factorials.length,  b);  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long  a  =  Math.min(factorials.length,  b);		non-compiled	[CE]  illegal  start  of  type	6	None	add
10	[BUG]  [BUGGY]    long  a  =(long)factorials.get(b);  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long  a  =(long)factorials.get(b);  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long  a  =(long)factorials.get(b);		non-compiled	[CE]  illegal  start  of  type	6	None	add
11	[BUG]  [BUGGY]    long[]  factorials  =  b.toString();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  b.toString();  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  b.toString();		non-compiled	[CE]  illegal  start  of  type	6	None	add
12	[BUG]  [BUGGY]    long[]  factorials  =  b.getFactorials();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  b.getFactorials();  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  b.getFactorials();		non-compiled	[CE]  illegal  start  of  type	6	None	add
13	[BUG]  [BUGGY]    long[]  factorials  =  b.split( ": ");  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  public  static  long  addAndCheck(long  a,  long  b)  {  [BUGGY]    long[]  factorials  =  b.split( ": ");  [BUGGY]  return  addAndCheck(a,  b,   "overflow:  add ");  }  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  [VARIABLES]  short  NS  PS  ZS  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  long  a  b  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5773502691896258	95	95	1	replace	    long[]  factorials  =  b.split( ": ");		non-compiled	[CE]  illegal  start  of  type	6	None	add
