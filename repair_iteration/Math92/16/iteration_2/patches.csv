bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent  =  b.getParent();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent  =  b.getParent();  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  =  b.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  parent  =  a.getParent();  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent  =  a.getParent();  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  =  a.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
3	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  2);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  2);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg  +  2);	  ret    =    addAndCheck(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
4	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  3);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  3);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg  +  3);	  ret    =    addAndCheck(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
5	[BUG]  [BUGGY]  }  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
6	[BUG]  [BUGGY]  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	throw  new  ArithmeticException(msg);	  [Delete]    else    if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
7	[BUG]  [BUGGY]  }  else  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
8	[BUG]  [BUGGY]  }  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
9	[BUG]  [BUGGY]  if(b  >  a)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  if(b  <  =  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  ret);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  ret);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
12	[BUG]  [BUGGY]  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  addAndCheck(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	addAndCheck(a,  b,  msg);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
13	[BUG]  [BUGGY]  writeAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  writeAndCheck(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	writeAndCheck(a,  b,  msg);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
14	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b));  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b));	  rackState(Math.abs(a)    <    =    Math.abs(b));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  rackState(Math.abs(a)>  Math.abs(b));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  Math.abs(b));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  Math.abs(b));	  rackState(Math.abs(a)    <    =    Math.abs(b));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  rackState(Math.abs(b)  <  =  Math.abs(a));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(b)  <  =  Math.abs(a));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(b)  <  =  Math.abs(a));	  rackState(Math.abs(a)    <    =    Math.abs(b));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  b  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  b  +  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  b  +  1);	  read    =    Math.min(factorials.size(),    b);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
18	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  msg);	  read    =    Math.min(factorials.size(),    b);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
19	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  0);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  0);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  0);	  read    =    Math.min(factorials.size(),    b);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
20	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)+  1);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  msg)+  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)+  1);	  rackState(Math.abs(a)    <    msg));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
21	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  msg));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  msg));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  msg));	  rackState(Math.abs(a)    <    msg));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
22	[BUG]  [BUGGY]  rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)-  1)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)-  1)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)-  1)  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b)||  Math.abs(b))  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  Math.abs(b)  <  =  0)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  Math.abs(b)  <  =  0)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)||  Math.abs(b)  <  =  0)  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
27	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
28	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
29	[BUG]  [BUGGY]  ||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
30	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
31	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  else  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
32	[BUG]  [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
33	[BUG]  [BUGGY]  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
34	[BUG]  [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
35	[BUG]  [BUGGY]  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent    ==    a)    {    if(Math.abs(b)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
36	[BUG]  [BUGGY]  parent!=  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent!=  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent!=  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent    ==    a)    {    if(Math.abs(b)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
37	[BUG]  [BUGGY]  ret  =  a  +  b  +  1;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  a  +  b  +  1;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  a  +  b  +  1;	  ret    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
38	[BUG]  [BUGGY]  ret  =  a  +  b  +  2;  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  a  +  b  +  2;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  a  +  b  +  2;	  ret    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
39	[BUG]  [BUGGY]  safeThan(a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan(a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan(a)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    0)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
40	[BUG]  [BUGGY]  safeThan  =  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan  =  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  =  0)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    0)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
41	[BUG]  [BUGGY]  if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  ==  null)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  a);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  a);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMissingException(msg,  a);	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
44	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  ret);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMissingException(msg,  ret);	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
45	[BUG]  [BUGGY]  if(a  >  b)  {  aughtExceptionHandler.handleMissingException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  aughtExceptionHandler.handleMissingException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  aughtExceptionHandler.handleMissingException(msg);  }	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
46	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg)+  1;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg)+  1;  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg)+  1;	  ret    =    add(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
47	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg)/  1;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg)/  1;  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg)/  1;	  ret    =    add(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
48	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg)+  2;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg)+  2;  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg)+  2;	  ret    =    add(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
49	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
52	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
53	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
54	[BUG]  [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
55	[BUG]  [BUGGY]  rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  }  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    <    =    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
58	[BUG]  [BUGGY]  while(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  while(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	while(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    <    =    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
59	[BUG]  [BUGGY]  while(b  <  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  while(b  <  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	while(b  <  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    <    =    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
60	[BUG]  [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
61	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
62	[BUG]  [BUGGY]  long(a)  {  if(Binary.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(Binary.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(Binary.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
63	[BUG]  [BUGGY]  long(a)  {  if(Binary.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(Binary.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(Binary.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  long(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
65	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
66	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
67	[BUG]  [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
68	[BUG]  [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
69	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
70	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
71	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
72	[BUG]  [BUGGY]  if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
73	[BUG]  [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
74	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  +  1,  msg,  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
75	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  *  1,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  *  1,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  *  1,  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  +  2,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  +  2,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  +  2,  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
77	[BUG]  [BUGGY]  b  =  a  +  b  +  1;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  a  +  b  +  1;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  +  b  +  1;	  b    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
78	[BUG]  [BUGGY]  b  =  a  +  b  +  2;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  a  +  b  +  2;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  +  b  +  2;	  b    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
79	[BUG]  [BUGGY]  b  =  a  +  b.length;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  a  +  b.length;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  +  b.length;	  b    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
80	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
81	[BUG]  [BUGGY]  if(a  >  b)  {  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
82	[BUG]  [BUGGY]  rackState(Math.abs(a)>  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b)   ")    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
83	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b)   ")    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
84	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b)   ")    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg));	  readAndCheck(a,    b,    msg));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
86	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  ret));  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  ret));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  ret));	  readAndCheck(a,    b,    msg));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
87	[BUG]  [BUGGY]  addAndCheck(a,  b,  msg));  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  addAndCheck(a,  b,  msg));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	addAndCheck(a,  b,  msg));	  readAndCheck(a,    b,    msg));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
88	[BUG]  [BUGGY]  if(a  >  b)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
89	[BUG]  [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
90	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
91	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
92	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
93	[BUG]  [BUGGY]  if(b  >  a)  {  rackBlock(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackBlock(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackBlock(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }	  rackBlock(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
94	[BUG]  [BUGGY]  if(b  >  a)  {  rackBlock(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackBlock(a,  b,  msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackBlock(a,  b,  msg);  }	  rackBlock(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
95	[BUG]  [BUGGY]  ret  =  add(a,  msg,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  msg,  b);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  msg,  b);	  ret    =    add(msg,    a,    b);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
96	[BUG]  [BUGGY]  ret  =  add(a,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b);	  ret    =    add(msg,    a,    b);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
97	[BUG]  [BUGGY]  parent.addAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.addAndCheck(a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.addAndCheck(a,  msg);	  parent.addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
98	[BUG]  [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  parent.addAndCheck(a,  b);  }	  parent.addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
99	[BUG]  [BUGGY]  }  else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
100	[BUG]  [BUGGY]  }  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
101	[BUG]  [BUGGY]  }  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
102	[BUG]  [BUGGY]  bucket  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  bucket  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	bucket  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	  if(b    >    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
103	[BUG]  [BUGGY]  if(b  >  a)  {  if(b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  if(b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  if(b  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
104	[BUG]  [BUGGY]  safeThan  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  =  a)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
105	[BUG]  [BUGGY]  safeThan  |=  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan  |=  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  |=  a)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
106	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(a);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMatcher(a);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMatcher(a);	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
107	[BUG]  [BUGGY]  if(msg!=  null)  {  aughtExceptionHandler.handleMatcher(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(msg!=  null)  {  aughtExceptionHandler.handleMatcher(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(msg!=  null)  {  aughtExceptionHandler.handleMatcher(msg);  }	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
108	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(a,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMatcher(a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMatcher(a,  msg);	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
109	[BUG]  [BUGGY]  if(a  >=  b)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >=  b)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >=  b)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
110	[BUG]  [BUGGY]  read  =  new  StringReader(msg,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  new  StringReader(msg,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  new  StringReader(msg,  b);	  read    =    new    StringReader(msg);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
111	[BUG]  [BUGGY]  read  =  new  StringReader(b);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  new  StringReader(b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  new  StringReader(b);	  read    =    new    StringReader(msg);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
112	[BUG]  [BUGGY]  read  =  new  StringReader(a);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  new  StringReader(a);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  new  StringReader(a);	  read    =    new    StringReader(msg);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
113	[BUG]  [BUGGY]  ret  =  new  StringReader(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  new  StringReader(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  new  StringReader(msg);	  read    =    new    StringReader(msg);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
114	[BUG]  [BUGGY]  rackState(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }	  rackState(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
115	[BUG]  [BUGGY]  sweepState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  sweepState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	sweepState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  rackState(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
116	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg  +  2);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg  +  2);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg  +  2);	  ret    =    add(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
117	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg  +  1,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg  +  1,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg  +  1,  msg);	  ret    =    add(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
118	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
119	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b);	  readAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
120	[BUG]  [BUGGY]  readAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  msg);	  readAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
121	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
122	[BUG]  [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
123	[BUG]  [BUGGY]  if(a  <  0  ||  Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0  ||  Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0  ||  Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
124	[BUG]  [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
125	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    msg)]    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
126	[BUG]  [BUGGY]  rackState(Math.abs(b)  <  msg)]  throw  new  ArithmeticException( " ");  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(b)  <  msg)]  throw  new  ArithmeticException( " ");  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(b)  <  msg)]  throw  new  ArithmeticException( " ");	  rackState(Math.abs(a)    <    msg)]    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
127	[BUG]  [BUGGY]  rackState(Math.abs(a)>  msg)]  throw  new  ArithmeticException( " ");  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  msg)]  throw  new  ArithmeticException( " ");  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  msg)]  throw  new  ArithmeticException( " ");	  rackState(Math.abs(a)    <    msg)]    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
128	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
129	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    b)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
130	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    +    b    >    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
131	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  b  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
132	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
133	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
134	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
135	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
136	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  long(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(b  >  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
139	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
140	[BUG]  [BUGGY]  if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }	  rackAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
141	[BUG]  [BUGGY]  if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackAndCheck(a,  b,  msg);  }	  rackAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
142	[BUG]  [BUGGY]  set(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  set(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	set(a,  b,  msg);	  cast(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
143	[BUG]  [BUGGY]  if(b  <  =  a)  {  else  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  else  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  else  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
144	[BUG]  [BUGGY]  ||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	||  Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
145	[BUG]  [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
146	[BUG]  [BUGGY]  addAndCheck(b,  a,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  addAndCheck(b,  a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	addAndCheck(b,  a,  msg);	  rackBlock(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
147	[BUG]  [BUGGY]  if(b  >  a)  {  rackBlock(b,  a,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackBlock(b,  a,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackBlock(b,  a,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }	  rackBlock(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
148	[BUG]  [BUGGY]  if(b  >  a)  {  rackBlock(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  rackBlock(b,  a,  msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  rackBlock(b,  a,  msg);  }	  rackBlock(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
149	[BUG]  [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(a    <    =    b)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
150	[BUG]  [BUGGY]  if(Math.abs(a)  <  b)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Math.abs(a)  <  b)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Math.abs(a)  <  b)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(a    <    =    b)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
151	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
152	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Boolean.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Boolean.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Boolean.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
153	[BUG]  [BUGGY]  if(b  <  Long.MIN_VALUE)  {  if(a  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  Long.MIN_VALUE)  {  if(a  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  Long.MIN_VALUE)  {  if(a  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
154	[BUG]  [BUGGY]  if(a  <  =  Long.MIN_VALUE  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  Long.MIN_VALUE  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  Long.MIN_VALUE  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
155	[BUG]  [BUGGY]  if(b  <  Long.MIN_VALUE  ||  a  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  Long.MIN_VALUE  ||  a  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  Long.MIN_VALUE  ||  a  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
156	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  1);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  1);	  ret    =    addAndCheck(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
157	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI  +  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI  +  1);	  ret    =    addAndCheck(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
158	[BUG]  [BUGGY]  }  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
159	[BUG]  [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  b)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
160	[BUG]  [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(b)  <  =  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  b)  {  if(Math.abs(b)  <  =  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  b)  {  if(Math.abs(b)  <  =  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
161	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  b));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b));	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
162	[BUG]  [BUGGY]  rackState(Math.abs(b)>  a));  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(b)>  a));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(b)>  a));	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
163	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b,  msg));  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  b,  msg));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b,  msg));	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
164	[BUG]  [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
165	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  b)  {  ret  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
166	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  a  +  1);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  a  +  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  a  +  1);	  read    =    Math.min(factorials.size(),    a);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
167	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  a,  b);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  a,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  a,  b);	  read    =    Math.min(factorials.size(),    a);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
168	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  a,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  a,  msg);	  read    =    Math.min(factorials.size(),    a);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
169	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg,  1);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg,  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg,  1);	  ret    =    add(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
170	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI  +  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI  +  1);	  ret    =    add(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
171	[BUG]  [BUGGY]  readAndCheck(b,  a,  msg,  ret);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(b,  a,  msg,  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(b,  a,  msg,  ret);	  readAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
172	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  b  =  a  +  b;  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
173	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
174	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    >    b)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
175	[BUG]  [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }  else  {  throw  new  ArithmeticException( " ");  }	  parent.addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
176	[BUG]  [BUGGY]  parent.addAndCheck(a,  b,  msg,  ret);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.addAndCheck(a,  b,  msg,  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.addAndCheck(a,  b,  msg,  ret);	  parent.addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
177	[BUG]  [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  parent.addAndCheck(a,  b,  msg);  }	  parent.addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
178	[BUG]  [BUGGY]  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
179	[BUG]  [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
180	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  >  long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  >  long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  >  long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
181	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  <  =  long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  <  =  long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  <  =  long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
182	[BUG]  [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
183	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
184	[BUG]  [BUGGY]  }  else  if(a  ==  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  ==  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  ==  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    >    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
185	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b,  0,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  b,  0,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b,  0,  msg);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
186	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b,  a);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  b,  a);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b,  a);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
187	[BUG]  [BUGGY]  rackState(Math.abs(b)>  a,  msg);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(b)>  a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(b)>  a,  msg);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
188	[BUG]  [BUGGY]  parent.add(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.add(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.add(a,  b,  msg);	  parent.add(a,    b);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
189	[BUG]  [BUGGY]  parent.add(a,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.add(a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.add(a,  msg);	  parent.add(a,    b);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
190	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  BYTE_PI);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  BYTE_PI);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  BYTE_PI);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
191	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  NUMBER);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  NUMBER);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  NUMBER);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
192	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_NUMBER);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_NUMBER);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  DEFAULT_NUMBER);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
193	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
194	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  b  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
195	[BUG]  [BUGGY]  if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
196	[BUG]  [BUGGY]  if(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Math.abs(a)>  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
197	[BUG]  [BUGGY]  long  ret  =  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long  ret  =  addAndCheck(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long  ret  =  addAndCheck(a,  b,  msg);	  [Delete]    else    if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
198	[BUG]  [BUGGY]  }  else  if(a  <  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(a  <  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(a  <  0)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    >    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
199	[BUG]  [BUGGY]  }  else  if(b  >  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  >  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  >  a)  {	  [Delete]    else    if(a    >    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
200	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg,  b);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  +  1,  msg,  b);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
201	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  *  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  *  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  *  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
202	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  msg);	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    b)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
203	[BUG]  [BUGGY]  b  =  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  addAndCheck(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  addAndCheck(a,  b,  msg);	  rackBlock(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
204	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  0,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  0,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  0,  msg);	  [Delete]    	non-compiled	[CE]  <identifier>  expected	1	None	replace
205	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg)+  1L;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg)+  1L;  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg)+  1L;	  ret    =    add(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
206	[BUG]  [BUGGY]  if(b  >  Long.MIN_VALUE)  {  at  leastLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  Long.MIN_VALUE)  {  at  leastLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  Long.MIN_VALUE)  {  at  leastLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
207	[BUG]  [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
208	[BUG]  [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
209	[BUG]  [BUGGY]  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent    ==    a)    {    if(Math.abs(b)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
210	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent  ==  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  ==  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent    ==    a)    {    if(Math.abs(b)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
211	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
212	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
213	[BUG]  [BUGGY]  if(Long.MIN_VALUE  -  b  <  =  a)  {  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Long.MIN_VALUE  -  b  <  =  a)  {  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Long.MIN_VALUE  -  b  <  =  a)  {  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
214	[BUG]  [BUGGY]  if(a  <  0)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(b  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
215	[BUG]  [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
216	[BUG]  [BUGGY]  long(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(b  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
217	[BUG]  [BUGGY]  b  =  a  +  b  +  3;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  a  +  b  +  3;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  +  b  +  3;	  b    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
218	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
219	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(msg,  ret);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMatcher(msg,  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMatcher(msg,  ret);	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
220	[BUG]  [BUGGY]  read  =  new  StringReader(msg  + ", "  +  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  new  StringReader(msg  + ", "  +  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  new  StringReader(msg  + ", "  +  b);	  read    =    new    StringReader(msg);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
221	[BUG]  [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
222	[BUG]  [BUGGY]  ret  =  add(msg,  b,  a);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(msg,  b,  a);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(msg,  b,  a);	  ret    =    add(msg,    a,    b);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
223	[BUG]  [BUGGY]  removeAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  removeAndCheck(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	removeAndCheck(a,  b,  msg);	  rackAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
224	[BUG]  [BUGGY]  append(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  append(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	append(a,  b,  msg);	  rackAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
225	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
226	[BUG]  [BUGGY]  if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
227	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
228	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
229	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(a    <    =    b)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
230	[BUG]  [BUGGY]  if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
231	[BUG]  [BUGGY]  if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
232	[BUG]  [BUGGY]  rackState(Math.abs(a)>  factorials));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  factorials));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  factorials));	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
233	[BUG]  [BUGGY]  rackState(Math.abs(a)>  msg)+  1);  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  msg)+  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  msg)+  1);	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
234	[BUG]  [BUGGY]  ret  =  readAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  readAndCheck(a,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  readAndCheck(a,  b);	  readAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
235	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
236	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
237	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
238	[BUG]  [BUGGY]  ret  =  readAndCheck(a,  b,  msg));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  readAndCheck(a,  b,  msg));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  readAndCheck(a,  b,  msg));	  readAndCheck(a,    b,    msg));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
239	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  return  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  return  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  return  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
240	[BUG]  [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
241	[BUG]  [BUGGY]  long(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  long(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	long(a)  {  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
242	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
243	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
244	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  aughtExceptionHandler.handleMissingException(msg,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMissingException(msg,  b);	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
245	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
246	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg,  2);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg,  2);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg,  2);	  ret    =    add(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
247	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  b));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  b));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  b));	  rackState(Math.abs(a)    <    msg));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
248	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  SAFE_MIN);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  SAFE_MIN);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  SAFE_MIN);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
249	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON  +  1);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON  +  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  EPSILON  +  1);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
250	[BUG]  [BUGGY]  safeThan  <  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan  <  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  <  0)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    0)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
251	[BUG]  [BUGGY]  if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(b  <  =  Long.MIN_VALUE)  {  b  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
252	[BUG]  [BUGGY]  rackState(Math.abs(a)>  factorials,  b,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  factorials,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  factorials,  b,  msg);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
253	[BUG]  [BUGGY]  rackState(Math.abs(a)>  factorials,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  factorials,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  factorials,  msg);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
254	[BUG]  [BUGGY]  sweepState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  sweepState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	sweepState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
255	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
256	[BUG]  [BUGGY]  parent  =  msg.getParent();  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent  =  msg.getParent();  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  =  msg.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
257	[BUG]  [BUGGY]  }  else  if(b  <  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  }  else  if(b  <  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	}  else  if(b  <  0)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
258	[BUG]  [BUGGY]  safeAdd(b,  a,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeAdd(b,  a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeAdd(b,  a,  msg);	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
259	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
260	[BUG]  [BUGGY]  parent.add(a,  b  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.add(a,  b  +  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.add(a,  b  +  1);	  parent.add(a,    b);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
261	[BUG]  [BUGGY]  if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  ==  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
262	[BUG]  [BUGGY]  if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
263	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
264	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
265	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b)   ")    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
266	[BUG]  [BUGGY]  if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    <    =    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
267	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
268	[BUG]  [BUGGY]  if(b  <  0)  {  if(Integer.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Integer.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Integer.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
269	[BUG]  [BUGGY]  safeMultiply(b,  a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeMultiply(b,  a,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeMultiply(b,  a,  msg);	  [Delete]    else    if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
270	[BUG]  [BUGGY]  if(a  <  0)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
271	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  return  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
272	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }	  if(b    >    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
273	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
274	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
275	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >=  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
276	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
277	[BUG]  [BUGGY]  actorials(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  actorials(a,  b,  msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	actorials(a,  b,  msg);	  cast(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
278	[BUG]  [BUGGY]  rackState(Math.abs(b)  <  =  Math.abs(a))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(b)  <  =  Math.abs(a))  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(b)  <  =  Math.abs(a))  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
279	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b))  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
280	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)||  b  >  a)  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
281	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  2);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  2);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  2);	  ret    =    addAndCheck(a,    b,    msg,    DEFAULT_TWO_PI);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
282	[BUG]  [BUGGY]  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
283	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >=  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
284	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  ==  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  ==  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  ==  b)  {  b  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
285	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)+  1;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  msg)+  1;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)+  1;	  rackState(Math.abs(a)    <    msg));    	non-compiled	[CE]  <identifier>  expected	38	None	replace
286	[BUG]  [BUGGY]  if(a  <  msg)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  msg)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  msg)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
287	[BUG]  [BUGGY]  ret  =  a  +  b  *  b;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  a  +  b  *  b;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  a  +  b  *  b;	  ret    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
288	[BUG]  [BUGGY]  parent.add(b,  a);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.add(b,  a);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.add(b,  a);	  parent.add(a,    b);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
289	[BUG]  [BUGGY]  parent.replace(a,  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  parent.replace(a,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.replace(a,  b);	  parent.add(a,    b);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
290	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
291	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
292	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
293	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
294	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
295	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
296	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
297	[BUG]  [BUGGY]  if(b  <  0)  {  if(a  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  0)  {  if(a  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(a  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
298	[BUG]  [BUGGY]  if(a  <  0  ||  b  <  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0  ||  b  <  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0  ||  b  <  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }	  if(a    <    0    ||    b    >    Long.MIN_VALUE)    {    if(b    <    0)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
299	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  ret);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  ret);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  ret);	  read    =    Math.min(factorials.size(),    b);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
300	[BUG]  [BUGGY]  if(a  <  =  b)  {  parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  parent!=    null    &&    parent    ==    a)    {    if(Math.abs(b)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
301	[BUG]  [BUGGY]  if(a  >  b)  {  at  leastLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  at  leastLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  at  leastLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
302	[BUG]  [BUGGY]  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
303	[BUG]  [BUGGY]  b  =  a  *  b;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  b  =  a  *  b;  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  *  b;	  b    =    a    +    b;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
304	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
305	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
306	[BUG]  [BUGGY]  if(a  >  b)  {  if(a  <  =  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  if(a  <  =  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  if(a  <  =  b)  {  ret  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
307	[BUG]  [BUGGY]  if(b  >  a)  {  aughtExceptionHandler.handleMatcher(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  aughtExceptionHandler.handleMatcher(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  aughtExceptionHandler.handleMatcher(msg);  }	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
308	[BUG]  [BUGGY]  if(b  ==  null)  {  aughtExceptionHandler.handleMatcher(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  ==  null)  {  aughtExceptionHandler.handleMatcher(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  ==  null)  {  aughtExceptionHandler.handleMatcher(msg);  }	  aughtExceptionHandler.handleMatcher(msg);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
309	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)+  1]  throw  new  ArithmeticException( " ");  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  msg)+  1]  throw  new  ArithmeticException( " ");  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)+  1]  throw  new  ArithmeticException( " ");	  rackState(Math.abs(a)    <    msg)]    throw    new    ArithmeticException(   "   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
310	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  EPSILON));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  EPSILON));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  EPSILON));	  readAndCheck(a,    b,    msg));    	non-compiled	[CE]  <identifier>  expected	84	None	replace
311	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
312	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
313	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    >    b)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
314	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    >    b)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
315	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
316	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }	  if(b    <    0)    {    if(Long.MIN_VALUE    -    a    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
317	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
318	[BUG]  [BUGGY]  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
319	[BUG]  [BUGGY]  else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	else  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
320	[BUG]  [BUGGY]  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(b    <    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
321	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >=  a)  {  b  =  a  +  b;  }	  if(b    <    a)    {    if(Long.MIN_VALUE    -    a    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
322	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON,  factorials);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON,  factorials);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  EPSILON,  factorials);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
323	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON  ||  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON  ||  b);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  EPSILON  ||  b);	  ret    =    addAndCheck(a,    b,    msg,    EPSILON);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
324	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
325	[BUG]  [BUGGY]  maticallyLong(a)  {  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  maticallyLong(a)  {  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	maticallyLong(a)  {  if(b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
326	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
327	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
328	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b)*  2)  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
329	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
330	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  Math.abs(b)||  b  <  Math.abs(a))  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
331	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b)||  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b)||  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  rackState(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
332	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
333	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
334	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	  [Delete]    else    if(b    <    =    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
335	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
336	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  EPSILON);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  EPSILON);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  EPSILON);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
337	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg,  DEFAULT_THRESHOLD);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  readAndCheck(a,  b,  msg,  DEFAULT_THRESHOLD);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg,  DEFAULT_THRESHOLD);	  readAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
338	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
339	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
340	[BUG]  [BUGGY]  rackState(Math.abs(a)>  factorials.length));  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  factorials.length));  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  factorials.length));	  rackState(Math.abs(a)>    msg));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
341	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    >    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
342	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg  *  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b,  msg  *  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg  *  1);	  ret    =    addAndCheck(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
343	[BUG]  [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    =    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
344	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    a)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
345	[BUG]  [BUGGY]  if(msg!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(msg!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(msg!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
346	[BUG]  [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(aughtExceptionHandler!=  null)  {  aughtExceptionHandler.handleMissingException(msg);  }	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
347	[BUG]  [BUGGY]  if(b  >  a)  {  aughtExceptionHandler.handleMissingException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  aughtExceptionHandler.handleMissingException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  aughtExceptionHandler.handleMissingException(msg);  }	  aughtExceptionHandler.handleMissingException(msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
348	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  ret  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
349	[BUG]  [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }	  if(b    <    =    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
350	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }	  [Delete]    else    if(a    <    =    b)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
351	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
352	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  -  1,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  addAndCheck(a,  b  -  1,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  -  1,  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
353	[BUG]  [BUGGY]  ret  =  add(a,  b  +  1,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b  +  1,  msg);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b  +  1,  msg);	  ret    =    addAndCheck(a,    b    +    1,    msg);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
354	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b,  msg  +  1);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  rackState(Math.abs(a)>  b,  msg  +  1);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b,  msg  +  1);	  rackState(Math.abs(a)>    b,    msg);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
355	[BUG]  [BUGGY]  if(a  <  =  Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
356	[BUG]  [BUGGY]  if(a  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  Long.MIN_VALUE)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
357	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
358	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	  if(a    <    0)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
359	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
360	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
361	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
362	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	  if(b    <    0)    {    if(long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
363	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg  *  1);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  ret  =  add(a,  b,  msg  *  1);  [BUGGY]      }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg  *  1);	  ret    =    add(a,    b,    msg    +    1);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
364	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }	  if(a    <    =    b)    {    if(Long.MIN_VALUE    -    b)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
365	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
366	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	  if(a    <    b)    {    if(Long.MIN_VALUE    -    b    <    =    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
367	[BUG]  [BUGGY]  safeThan  <  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  safeThan  <  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  <  a)  {  throw  new  ArithmeticException(msg);  }	  safeThan    <    =    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
368	[BUG]  [BUGGY]  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  >  b)  {  throw  new  ArithmeticException(msg);  }	  aticallyLong(a)    {    if(Long.MIN_VALUE    -    b)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
369	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  ||  b  >  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  ||  b  >  a)  {  ret  =  a  +  b;  }  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  ||  b  >  a)  {  ret  =  a  +  b;  }	  [Delete]    	non-compiled	[CE]  <identifier>  expected	1	None	replace
370	[BUG]  [BUGGY]  read  =  Math.max(factorials.size(),  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.max(factorials.size(),  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.max(factorials.size(),  b);	  read    =    Math.min(factorials.size(),    a);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
371	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  a  +  1,  b);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {        [BUGGY]  read  =  Math.min(factorials.size(),  a  +  1,  b);  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  a  +  1,  b);	  read    =    Math.min(factorials.size(),    a);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
