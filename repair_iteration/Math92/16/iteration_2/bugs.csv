bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  rackAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackAndCheck(a,  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackAndCheck(a,  b,  msg);	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  rackBlock(a,  b,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackBlock(a,  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackBlock(a,  b,  msg);	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  rackBlock(b,  a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackBlock(b,  a,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackBlock(b,  a,  msg);	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b))  {  throw  new  ArithmeticException(msg);	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b) ")  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b));  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  =  Math.abs(b));  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  =  Math.abs(b));	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  rackState(Math.abs(a)>  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)>  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  b,  msg);	      if(b    >    a)    {    if(Math.abs(a)>    msg)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  rackState(Math.abs(a)>  msg));  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)>  msg));  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)>  msg));	      if(b    >    a)    {    if(Math.abs(a)>    msg)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  if(b  <  0)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  addAndCheck(a,  b  +  1,  msg);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b  +  1,  msg);	  ret    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  ret  =  a  +  b;  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  a  +  b;  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  a  +  b;	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  ret  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  ret  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
24	[BUG]  [BUGGY]  b  =  a  +  b;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  b  =  a  +  b;  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	b  =  a  +  b;	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
25	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  0)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  b)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  readAndCheck(a,  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg);	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  readAndCheck(b,  a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  readAndCheck(b,  a,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(b,  a,  msg);	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  readAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  readAndCheck(a,  b);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b);	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  cast(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  cast(a,  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	cast(a,  b,  msg);	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aticallyLong(a)  {  if(Long.MIN_VALUE  -  b)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aticallyLong(a)  {  if(Long.MIN_VALUE  -  b  >  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aticallyLong(a)  {  if(long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException( " ");  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException( " ");  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg)]  throw  new  ArithmeticException( " ");	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  rackState(Math.abs(a)  <  msg));  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  rackState(Math.abs(a)  <  msg));  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	rackState(Math.abs(a)  <  msg));	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg  +  1);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  add(a,  b,  msg  +  1);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg  +  1);	  ret    =    add(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
41	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  <  =  a)  {  b  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
42	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aughtExceptionHandler.handleMissingException(msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMissingException(msg);	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  parent.addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent.addAndCheck(a,  b,  msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.addAndCheck(a,  b,  msg);	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  aughtExceptionHandler.handleMatcher(msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  aughtExceptionHandler.handleMatcher(msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	aughtExceptionHandler.handleMatcher(msg);	      if(b    >    a)    {    if(Math.abs(a)    <    =    Math.abs(b))    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
47	[BUG]  [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  >  0)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent  =  parent.getParent();  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent  =  parent.getParent();	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
49	[BUG]  [BUGGY]  parent.addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent.addAndCheck(a,  b);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.addAndCheck(a,  b);	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
50	[BUG]  [BUGGY]  parent.add(a,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent.add(a,  b);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent.add(a,  b);	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
51	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent!=  null  &&  parent  ==  a)  {  if(Math.abs(b)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  safeThan  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  safeThan  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  <  =  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  safeThan  <  =  0)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	safeThan  <  =  0)  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
56	[BUG]  [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  1);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  addAndCheck(a,  b,  msg  +  1);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg  +  1);	  ret    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
58	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  ret  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  >  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  >  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  0)  {  if(Long.MIN_VALUE  -  a  +  b  >  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  a)  {  if(Long.MIN_VALUE  -  a  >  a)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  b)  {  if(Long.MIN_VALUE  -  b  >  a)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
63	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg,  DEFAULT_TWO_PI);	  ret    =    add(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  ret  =  add(a,  b,  msg)+  1;  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  add(a,  b,  msg)+  1;  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(a,  b,  msg)+  1;	  ret    =    add(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  [Delete]  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(a  >  b)  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  [Delete]  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(b  >  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  [Delete]  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(b  <  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    >    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  [Delete]  else  if(a  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(a  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(a  <  =  a)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
69	[BUG]  [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  a)  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  [Delete]  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(b  <  =  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(a  <  =  b)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
73	[BUG]  [BUGGY]  [Delete]  else  if(b  >  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  [Delete]  else  if(b  >  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	[Delete]  else  if(b  >  a)  {  if(Math.abs(a)  <  msg)  {  throw  new  ArithmeticException( " ");  }	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
74	[BUG]  [BUGGY]  ret  =  add(msg,  a,  b);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  add(msg,  a,  b);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  add(msg,  a,  b);	  ret    =    add(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
75	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  read  =  Math.min(factorials.size(),  b);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  b);	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
76	[BUG]  [BUGGY]  read  =  Math.min(factorials.size(),  a);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  read  =  Math.min(factorials.size(),  a);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  Math.min(factorials.size(),  a);	      if(b    >    a)    {    if(Math.abs(a)    <    msg)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
77	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  EPSILON);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  EPSILON);	  ret    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
78	[BUG]  [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);  [BUGGY]    }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	ret  =  addAndCheck(a,  b,  msg,  DEFAULT_TWO_PI);	  ret    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
79	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
80	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
81	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException( " ");  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  read  =  new  StringReader(msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  read  =  new  StringReader(msg);  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	read  =  new  StringReader(msg);	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  readAndCheck(a,  b,  msg));  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  readAndCheck(a,  b,  msg));  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	readAndCheck(a,  b,  msg));	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  a)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(b  <  =  0)  {  if(Long.MIN_VALUE  -  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
88	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  ret  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    ret    =    a    +    b;    }    else    {    throw    new    ArithmeticException(msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
89	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b  <  =  a)  {  b  =  a  +  b;  }	      if(b    <    0)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
90	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  if  (a  >  b)  {      [BUGGY]  if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  }  else  {  throw  new  ArithmeticException(msg);  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	113	113	1	replace	if(a  <  =  b)  {  if(Long.MIN_VALUE  -  b)  {  b  =  a  +  b;  }	      if(b    <    a)    {    if(Long.MIN_VALUE    -    a)    {    b    =    a    +    b;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
