bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  b  =  get(a,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  get(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  get(a,  b);	  long    b    =    get(a,    msg);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
2	[BUG]  [BUGGY]  int  b  =  get(a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  b  =  get(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  b  =  get(a,  msg);	  long    b    =    get(a,    msg);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
3	[BUG]  [BUGGY]  long  b  =  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  addAndCheck(a,  b,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  addAndCheck(a,  b,  msg);	  long    b    =    get(a,    msg);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
4	[BUG]  [BUGGY]  if(a  >  b  ||  b  <  msg)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b  ||  b  <  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b  ||  b  <  msg)  {	  if(b    >    a    ||    b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
5	[BUG]  [BUGGY]  if(b  <  a  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  a  ||  b  >  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  a  ||  b  >  a)  {	  if(b    >    a    ||    b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
6	[BUG]  [BUGGY]  if(a  >  b  ||  b  <  a)  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b  ||  b  <  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b  ||  b  <  a)  {	  if(b    >    a    ||    b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
7	[BUG]  [BUGGY]  if(a  <  0  ||  b  ==  msg)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  ==  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  ==  msg)  {	  if(a    <    0    ||    b    >    msg)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  if(a  <  0  ||  b  >=  msg)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >=  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >=  msg)  {	  if(a    <    0    ||    b    >    msg)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  if(b  <  0  ||  a  >  msg)  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  0  ||  a  >  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  0  ||  a  >  msg)  {	  if(a    <    0    ||    b    >    msg)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a  +  2)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  a  +  2)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a  +  2)  {	  if(a    <    0    ||    b    >    a    +    1)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
11	[BUG]  [BUGGY]  if(a  <  0  ||  b  >=  a  +  1)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >=  a  +  1)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >=  a  +  1)  {	  if(a    <    0    ||    b    >    a    +    1)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
12	[BUG]  [BUGGY]  if(a  <  0  ||  b  ==  a  +  1)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  ==  a  +  1)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  ==  a  +  1)  {	  if(a    <    0    ||    b    >    a    +    1)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
13	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b  +  1,  msg);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b  +  1,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b  +  1,  msg);	  long    b    =    getAndCheck(a,    b    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
14	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b  *  1);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b  *  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b  *  1);	  long    b    =    getAndCheck(a,    b    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
15	[BUG]  [BUGGY]  long  a  =  addAndCheck(b,  a,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(b,  a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(b,  a,  msg);	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
16	[BUG]  [BUGGY]  int  a  =  getAndCheck(b,  a,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  getAndCheck(b,  a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(b,  a,  msg);	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
17	[BUG]  [BUGGY]  long  a  =  getAndCheck(b,  a,  msg)+  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(b,  a,  msg)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(b,  a,  msg)+  1;	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
18	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b,  msg)+  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b,  msg)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b,  msg)+  1;	  long    b    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
19	[BUG]  [BUGGY]  int  b  =  getAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  b  =  getAndCheck(a,  b,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  b  =  getAndCheck(a,  b,  msg);	  long    b    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
20	[BUG]  [BUGGY]  if(a  <  =  0  ||  b  ==  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  0  ||  b  ==  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  0  ||  b  ==  a)  {	  if(a    <    0    ||    b    ==    a)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  long  a  =  factorials.get(a)+  1;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(a)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(a)+  1;	  long    a    =    factorials.get(msg)+    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  long  a  =  factorials.get(msg)/  1;  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(msg)/  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(msg)/  1;	  long    a    =    factorials.get(msg)+    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  long  a  =  factorials.get(msg)+  2;  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(msg)+  2;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(msg)+  2;	  long    a    =    factorials.get(msg)+    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
24	[BUG]  [BUGGY]  int  a  =  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  addAndCheck(a,  b,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  addAndCheck(a,  b,  msg);	  long    a    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
25	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  msg)+  1;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(a,  b,  msg)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b,  msg)+  1;	  long    a    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
26	[BUG]  [BUGGY]  if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials    ==    null    ||    msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	63	None	replace
27	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials    ==    null    ||    msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	63	None	replace
28	[BUG]  [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials    ==    null    ||    msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	63	None	replace
29	[BUG]  [BUGGY]  if(a!=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a!=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a!=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    ==    null    ||    b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
30	[BUG]  [BUGGY]  if(a  ==  0  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  ==  0  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  0  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    ==    null    ||    b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
31	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  msg);	  long    a    =    addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
32	[BUG]  [BUGGY]  long  a  =  this.factorials.get(a);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  this.factorials.get(a);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  this.factorials.get(a);	  long    a    =    this.factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
33	[BUG]  [BUGGY]  long  a  =  this.factorials.get(msg,  b);  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  this.factorials.get(msg,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  this.factorials.get(msg,  b);	  long    a    =    this.factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
34	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  ret);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  ret);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg,  ret);	  long    a    =    getAndCheck(a,    b,    msg,    b);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
35	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  null);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  null);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg,  null);	  long    a    =    getAndCheck(a,    b,    msg,    b);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
36	[BUG]  [BUGGY]  int  a  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  getAndCheck(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(a,  msg);	  long    a    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
38	[BUG]  [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  if(msg!=  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
40	[BUG]  [BUGGY]  if(msg  ==  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
41	[BUG]  [BUGGY]  if(b  <  0)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  0)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
42	[BUG]  [BUGGY]  if(a  <  =  0)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  0)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
43	[BUG]  [BUGGY]  if(a  <  0  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  msg  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  msg  ==  null)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
44	[BUG]  [BUGGY]  if(a  <  0  ||  msg!=  null)  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  msg!=  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  msg!=  null)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
45	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
46	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
47	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
49	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    ms    	non-compiled	[CE]  <identifier>  expected	58	None	replace
50	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    ms    	non-compiled	[CE]  <identifier>  expected	58	None	replace
51	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  m  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  m  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  m	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    ms    	non-compiled	[CE]  <identifier>  expected	58	None	replace
52	[BUG]  [BUGGY]  if(a  <  b  ||  b  ==  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  ==  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  ==  a)  {	  if(a    <    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
53	[BUG]  [BUGGY]  if(a  <  b  ||  b  >  0)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  >  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >  0)  {	  if(a    <    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
54	[BUG]  [BUGGY]  if(a  <  b  ||  b  >  msg)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  >  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >  msg)  {	  if(a    <    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
55	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
56	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
57	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
58	[BUG]  [BUGGY]  if(a  >  b)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }	  if(b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
59	[BUG]  [BUGGY]  int  b  =  getAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  b  =  getAndCheck(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  b  =  getAndCheck(a,  b);	  int    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  byte  b  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  byte  b  =  getAndCheck(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	byte  b  =  getAndCheck(a,  msg);	  int    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  int  b  =  addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  b  =  addAndCheck(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  b  =  addAndCheck(a,  b);	  int    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
62	[BUG]  [BUGGY]  if(a  <  b  ||  b  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  >  Long.MAX_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >  Long.MAX_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
63	[BUG]  [BUGGY]  if(b  <  =  a  ||  b  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  a  ||  b  >  Long.MAX_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a  ||  b  >  Long.MAX_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
64	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  Long.MAX_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  Long.MAX_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
65	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
66	[BUG]  [BUGGY]  if(factororials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factororials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factororials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
67	[BUG]  [BUGGY]  long  a  =  factorials.get(a,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(a,  msg);	  long    a    =    factorials.get(a);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
69	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
70	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	30	None	replace
71	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	30	None	replace
72	[BUG]  [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  0;  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
73	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  if(a  <  =  0  ||  b  >=  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  0  ||  b  >=  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  0  ||  b  >=  a)  {	  if(a    <    0    ||    b    >=    a)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
75	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
76	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
77	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
78	[BUG]  [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
79	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
80	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a  +  1;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
81	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
82	[BUG]  [BUGGY]  if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  if(msg!=    null    ||    msg.length()    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
83	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  msg.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  msg.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  msg.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
84	[BUG]  [BUGGY]  int  a  =  addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  addAndCheck(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  addAndCheck(a,  b);	  int    a    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
85	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
86	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
87	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  0)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  0)  {	  if(b    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
88	[BUG]  [BUGGY]  if(b  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  0)  {	  if(b    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
89	[BUG]  [BUGGY]  long  b  =  addAndCheck(a,  b  +  1);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  addAndCheck(a,  b  +  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  addAndCheck(a,  b  +  1);	  long    b    =    addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
90	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null)    {    for(int    a    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
91	[BUG]  [BUGGY]  if(b  ==  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  ==  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  ==  a)  {	  if(a    ==    b)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
92	[BUG]  [BUGGY]  if(msg!=  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    <    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
93	[BUG]  [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    <    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
94	[BUG]  [BUGGY]  if(msg  ==  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    <    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
95	[BUG]  [BUGGY]  if(b  <  =  a  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  a  ||  msg  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a  ||  msg  ==  null)  {	  if(b    <    =    a)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
96	[BUG]  [BUGGY]  if(b  <  a  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  a  ||  msg  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  a  ||  msg  ==  null)  {	  if(b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
97	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)/  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)/  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg)/  1;	  long    a    =    getAndCheck(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
98	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  2;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  2;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg)+  2;	  long    a    =    getAndCheck(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
99	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  msg.length;  b++)  {  a  =  b  +  b;  }	  if(msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
100	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
101	[BUG]  [BUGGY]  if(a  <  0  ||  b  ==  0)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  ==  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  ==  0)  {	  if(a    <    0    ||    b!=    a)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
102	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
103	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
104	[BUG]  [BUGGY]  if(b  <  =  a  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  a  ||  b  >  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a  ||  b  >  a)  {	  if(a    <    =    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
105	[BUG]  [BUGGY]  if(a  <  =  b  ||  b  ==  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  b  ||  b  ==  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  ||  b  ==  a)  {	  if(a    <    =    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
106	[BUG]  [BUGGY]  if(a  <  b  ||  b  >  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  >  Long.MIN_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >  Long.MIN_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
107	[BUG]  [BUGGY]  if(b  <  =  a  ||  b  >  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  a  ||  b  >  Long.MIN_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a  ||  b  >  Long.MIN_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
108	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  Long.MIN_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  Long.MIN_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
109	[BUG]  [BUGGY]  if(a  >  b  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b  ||  msg  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b  ||  msg  ==  null)  {	  if(b    >    a    ||    msg    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
110	[BUG]  [BUGGY]  if(a  <  b  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  msg  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  msg  ==  null)  {	  if(b    >    a    ||    msg    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
111	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
112	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
113	[BUG]  [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  0;  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
114	[BUG]  [BUGGY]  if(factorials.length  ==  0)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials.length  ==  0)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials.length  ==  0)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
115	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null)    {    for(int    a    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
116	[BUG]  [BUGGY]  if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
117	[BUG]  [BUGGY]  if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
118	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    <    0    ||    b    >    a)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
119	[BUG]  [BUGGY]  int  a  =  getAndCheck(a,  b,  msg,  ret);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  getAndCheck(a,  b,  msg,  ret);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(a,  b,  msg,  ret);	  int    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
120	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
121	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
122	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
123	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
124	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
125	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
126	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b  -  1);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b  -  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b  -  1);	  long    b    =    getAndCheck(a,    b    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
127	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b,  msg  +  1);  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b,  msg  +  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b,  msg  +  1);	  long    b    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
128	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
129	[BUG]  [BUGGY]  if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a	  if(a    <    0    ||    b    >    a)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
130	[BUG]  [BUGGY]  if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(a    <    0    ||    b    >    a)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
131	[BUG]  [BUGGY]  if(b  <  0  ||  a  >=  b)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  0  ||  a  >=  b)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  0  ||  a  >=  b)  {	  if(a    <    0    ||    b    >=    a)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
132	[BUG]  [BUGGY]  if(a  <  =  b  &&  b  >  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  b  &&  b  >  Long.MIN_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  &&  b  >  Long.MIN_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MIN_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
133	[BUG]  [BUGGY]  long  a  =  this.factorials.get(msg)+  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  this.factorials.get(msg)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  this.factorials.get(msg)+  1;	  long    a    =    this.factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
134	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
135	[BUG]  [BUGGY]  if(b  >  a  ||  msg!=  null)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  >  a  ||  msg!=  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  a  ||  msg!=  null)  {	  if(b    >    a    ||    msg    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
136	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	30	None	replace
137	[BUG]  [BUGGY]  if(a  <  =  b  &&  b  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  b  &&  b  >  Long.MAX_VALUE)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  &&  b  >  Long.MAX_VALUE)  {	  if(a    <    =    b    ||    b    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
138	[BUG]  [BUGGY]  long  a  =  getAndCheck(b,  a,  msg,  ret);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(b,  a,  msg,  ret);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(b,  a,  msg,  ret);	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
139	[BUG]  [BUGGY]  long  a  =  getAndCheck(b,  a,  msg  +  1);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(b,  a,  msg  +  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(b,  a,  msg  +  1);	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
140	[BUG]  [BUGGY]  if(a  <  0)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
141	[BUG]  [BUGGY]  if(a  ==  null)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  ==  null)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  null)  {  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
142	[BUG]  [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
143	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  msg,  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(a,  b,  msg,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b,  msg,  b);	  long    a    =    getAndCheck(a,    b,    msg,    b);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
144	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
145	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a;  b++)  {  if(b  >  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
146	[BUG]  [BUGGY]  if(a  <  =  b  &&  b  >  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  b  &&  b  >  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  &&  b  >  a)  {	  if(a    <    =    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
147	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
148	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
149	[BUG]  [BUGGY]  long  a  =  addAndCheck(b,  a);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(b,  a);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(b,  a);	  long    a    =    addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
150	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
151	[BUG]  [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
152	[BUG]  [BUGGY]  if(a  <  b  ||  b  >=  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  b  ||  b  >=  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >=  a)  {	  if(a    <    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
153	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(a!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
154	[BUG]  [BUGGY]  if(a  >=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >=  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    ==    null    ||    b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
155	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    ==    null    ||    b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
156	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
157	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
158	[BUG]  [BUGGY]  long  b  =  add(a,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  add(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  add(a,  b);	  long    b    =    get(a,    msg);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
159	[BUG]  [BUGGY]  if(msg!=  null)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
160	[BUG]  [BUGGY]  if(b  ==  null)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  ==  null)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  ==  null)  {	  if(a    <    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
161	[BUG]  [BUGGY]  long  b  =  addAndCheck(msg,  a);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  addAndCheck(msg,  a);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  addAndCheck(msg,  a);	  long    b    =    addAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
162	[BUG]  [BUGGY]  if(b  >  a  ||  b  ==  a)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  >  a  ||  b  ==  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  a  ||  b  ==  a)  {	  if(b    >    a    ||    b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
163	[BUG]  [BUGGY]  if(b  >=  0)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  >=  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >=  0)  {	  if(b    >    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
164	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
165	[BUG]  [BUGGY]  if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
166	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  msg  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(a,  b,  msg  +  1);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b,  msg  +  1);	  long    a    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
167	[BUG]  [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(a    <    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
168	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
169	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
170	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
171	[BUG]  [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(long  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
172	[BUG]  [BUGGY]  int  a  =  getAndCheck(a,  b,  msg,  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  getAndCheck(a,  b,  msg,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(a,  b,  msg,  b);	  int    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
173	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  1L;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  1L;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg)+  1L;	  long    a    =    getAndCheck(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
174	[BUG]  [BUGGY]  if(b  <  a  ||  a  >=  b)  {  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  a  ||  a  >=  b)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  a  ||  a  >=  b)  {	  if(a    <    0    ||    b!=    a)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
175	[BUG]  [BUGGY]  if(factorials!=  null  &&  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  &&  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  &&  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
176	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)-  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)-  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg)-  1;	  long    a    =    getAndCheck(a,    b,    msg)+    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
177	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  facts.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  facts.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  facts.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
178	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b)+  1;  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  b  =  getAndCheck(a,  b)+  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b)+  1;	  long    b    =    getAndCheck(a,    b    +    1);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
179	[BUG]  [BUGGY]  if(a  <  =  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    >    b)    {    if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
180	[BUG]  [BUGGY]  if(b  <  =  a  ||  a  >  b)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  =  a  ||  a  >  b)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a  ||  a  >  b)  {	  if(a    <    =    b    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
181	[BUG]  [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
182	[BUG]  [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    b;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
183	[BUG]  [BUGGY]  char  b  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  char  b  =  getAndCheck(a,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	char  b  =  getAndCheck(a,  msg);	  int    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
184	[BUG]  [BUGGY]  if(a  <  0  ||  b  <  a)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  <  a)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  <  a)  {	  if(a    <    0    ||    b    <    =    a)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
185	[BUG]  [BUGGY]  long  a  =  get(a,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  get(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  get(a,  b);	  long    a    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
186	[BUG]  [BUGGY]  if(a  <  =  0  ||  b  >  a  +  1)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  =  0  ||  b  >  a  +  1)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  0  ||  b  >  a  +  1)  {	  if(a    <    0    ||    b    >    a    +    1)    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
187	[BUG]  [BUGGY]  for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
188	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  EPSILON)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  EPSILON)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  EPSILON)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    <    0    ||    b    >    a)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
189	[BUG]  [BUGGY]  if(msg  ==  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(a    <    0    ||    b    >    a)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
190	[BUG]  [BUGGY]  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(a    ==    null    ||    b    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
191	[BUG]  [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
192	[BUG]  [BUGGY]  long  a  =  factorials.get(msg)-  1;  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(msg)-  1;  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(msg)-  1;	  long    a    =    factorials.get(msg)+    1;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
193	[BUG]  [BUGGY]  for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  1;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
194	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  msg,  EPSILON);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  addAndCheck(a,  b,  msg,  EPSILON);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b,  msg,  EPSILON);	  long    a    =    addAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
195	[BUG]  [BUGGY]  if(factorials  ==  null  ||!factorials.isEmpty())  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||!factorials.isEmpty())  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||!factorials.isEmpty())  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
196	[BUG]  [BUGGY]  if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
197	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(b,  a,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	30	None	replace
198	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
199	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a,  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
200	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
201	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                        junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	  if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
202	[BUG]  [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
203	[BUG]  [BUGGY]  if(a  ==  b  ||  b  ==  msg)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  ==  b  ||  b  ==  msg)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  b  ||  b  ==  msg)  {	  if(a    ==    b)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
204	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a,  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
205	[BUG]  [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
206	[BUG]  [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
207	[BUG]  [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  facts.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b!=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
208	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(a,  b,  ms  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(a,  b,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)ret  =  addAndCheck(a,  b,  ms	  if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    ms    	non-compiled	[CE]  <identifier>  expected	58	None	replace
209	[BUG]  [BUGGY]  if(msg!=  null  &&  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg!=  null  &&  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null  &&  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	  if(msg!=    null    ||    msg.length()    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
210	[BUG]  [BUGGY]  if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	  if(msg!=    null    ||    msg.length()    ==    0)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
211	[BUG]  [BUGGY]  char  a  =  getAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  char  a  =  getAndCheck(a,  b,  msg);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	char  a  =  getAndCheck(a,  b,  msg);	  int    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
212	[BUG]  [BUGGY]  int  a  =  getAndCheck(b,  a);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  int  a  =  getAndCheck(b,  a);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(b,  a);	  int    a    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
213	[BUG]  [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials    ==    null    ||    msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	63	None	replace
214	[BUG]  [BUGGY]  if(factorials  ==  null  ||  msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials  ==  null  ||  msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	  if(factorials    ==    null    ||    msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    ms    	non-compiled	[CE]  <identifier>  expected	63	None	replace
215	[BUG]  [BUGGY]  if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null  ||  msg.length()  <  =  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	  if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
216	[BUG]  [BUGGY]  if(b  <  a  ||  b  >  0)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(b  <  a  ||  b  >  0)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  a  ||  b  >  0)  {	  if(b    <    a)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
217	[BUG]  [BUGGY]  long  a  =  getAndCheck(b,  a,  msg,  DEFAULT_TWO_PI);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  getAndCheck(b,  a,  msg,  DEFAULT_TWO_PI);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(b,  a,  msg,  DEFAULT_TWO_PI);	  long    a    =    getAndCheck(b,    a,    msg);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
218	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  EPSILON)  {  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(a  <  0  ||  b  >  EPSILON)  {  [BUGGY]        ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  EPSILON)  {	  if(a    <    0    ||    b    >    msg)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
219	[BUG]  [BUGGY]  if(factorials.length  <  2)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials.length  <  2)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials.length  <  2)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	  for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
220	[BUG]  [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  &&  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	  if(factorials!=    null    ||    factorials.length    <    2)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
221	[BUG]  [BUGGY]  long  a  =  factorials.get(a,  b);  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48      [CONTEXT]      private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;      [BUGGY]  long  a  =  factorials.get(a,  b);  [BUGGY]      if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(a,  b);	  long    a    =    factorials.get(a);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
