bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
2	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
3	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
4	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
5	[BUG]  [BUGGY]  if(b  <  =  a)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  <  =  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  =  a)  {	  if(a    <    =    b)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  if(a  <  =  b  ||  b  >  Long.MIN_VALUE)  {  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  =  b  ||  b  >  Long.MIN_VALUE)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  ||  b  >  Long.MIN_VALUE)  {	  if(a    <    =    b)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  long  b  =  addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  b  =  addAndCheck(a,  b);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  addAndCheck(a,  b);	      long    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  int  b  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  int  b  =  getAndCheck(a,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  b  =  getAndCheck(a,  msg);	      long    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
10	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
11	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
12	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  getAndCheck(a,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  msg);	      long    a    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  addAndCheck(a,  b);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b);	      long    a    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  if(a  <  0  ||  b  ==  a)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  ==  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  ==  a)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  if(a  <  0  ||  b  >=  a)  {  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  >=  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >=  a)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  msg)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  >  msg)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  msg)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  if(a  <  0  ||  b!=  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b!=  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b!=  a)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  if(b  <  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  <  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  <  a)  {	  if(b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  if(b  >  a  ||  msg  ==  null)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  >  a  ||  msg  ==  null)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  a  ||  msg  ==  null)  {	  if(b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
22	[BUG]  [BUGGY]  long  a  =  factorials.get(a);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  factorials.get(a);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(a);	      long    a    =    factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  long  a  =  this.factorials.get(msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  this.factorials.get(msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  this.factorials.get(msg);	      long    a    =    factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  long  a  =  factorials.get(msg)+  1;  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  factorials.get(msg)+  1;  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  factorials.get(msg)+  1;	      long    a    =    factorials.get(msg);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
27	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  if(a  ==  b)  {  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  ==  b)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  b)  {	  if(a    >=    b)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
32	[BUG]  [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  if(a  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  if(a  >  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  >  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >  b)  {  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  if(a  <  0)  {  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0)  {	  if(a    <    b)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  if(a  <  0  ||  b  <  =  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  <  =  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  <  =  a)  {	  if(a    <    b)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  long  a  =  addAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  addAndCheck(a,  b,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  addAndCheck(a,  b,  msg);	      long    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  int  a  =  getAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  int  a  =  getAndCheck(a,  b,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(a,  b,  msg);	      long    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  1;  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  getAndCheck(a,  b,  msg)+  1;  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg)+  1;	      long    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  b  =  getAndCheck(a,  b,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b,  msg);	      long    b    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  if(b  >  0)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  >  0)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  0)  {	  if(b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  if(b  >=  a)  {  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  >=  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >=  a)  {	  if(b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
46	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b!=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
47	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
48	[BUG]  [BUGGY]  long  b  =  get(a,  msg);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  b  =  get(a,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  get(a,  msg);	      long    b    =    getAndCheck(a,    msg);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  if(a  <  =  0  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  =  0  ||  b  >  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  0  ||  b  >  a)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
51	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  a  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
52	[BUG]  [BUGGY]  if(a  ==  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  ==  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  ==  null  ||  b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  long  a  =  getAndCheck(b,  a,  msg);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  getAndCheck(b,  a,  msg);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(b,  a,  msg);	      long    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  b);  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  a  =  getAndCheck(a,  b,  msg,  b);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  a  =  getAndCheck(a,  b,  msg,  b);	      long    a    =    getAndCheck(a,    b,    msg);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  if(a  <  =  b  ||  b  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  =  b  ||  b  >  Long.MAX_VALUE)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  ||  b  >  Long.MAX_VALUE)  {	  if(a    <    =    b)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  ms	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
59	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
61	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
62	[BUG]  [BUGGY]  long  b  =  getAndCheck(a,  b  +  1);  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  long  b  =  getAndCheck(a,  b  +  1);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	long  b  =  getAndCheck(a,  b  +  1);	      long    b    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null  ||  msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  ms	      if(msg    ==    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  if(a  <  =  b  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  =  b  ||  b  >  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b  ||  b  >  a)  {	  if(a    <    =    b)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  if(msg!=  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(msg!=  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(msg!=  null  ||  msg.length()  ==  0)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
66	[BUG]  [BUGGY]  int  a  =  getAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  int  a  =  getAndCheck(a,  b);  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	int  a  =  getAndCheck(a,  b);	      long    a    =    getAndCheck(a,    b);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
67	[BUG]  [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    a    =    b    +    b;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
68	[BUG]  [BUGGY]  if(b  >  a  ||  b  <  a)  {  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  >  a  ||  b  <  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  a  ||  b  <  a)  {	  if(b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
69	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
70	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    >=    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
71	[BUG]  [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(factorials!=  null  ||  factorials.length  <  2)  {  for(int  b  =  0;  b  <  b;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }	      if(factorials!=    null)    {    for(int    b    =    0;    b    <    factorials.length;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(a,    b,    msg);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
72	[BUG]  [BUGGY]  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]    if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }	      if(msg!=    null)    {    for(int    b    =    0;    b    <    a;    b++)    {    if(b    <    0)    {    ret    =    addAndCheck(b,    a,    msg);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
73	[BUG]  [BUGGY]  if(a  <  b  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  b  ||  b  >  a)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b  ||  b  >  a)  {	  if(a    <    b)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a  +  1)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48    [CONTEXT]    private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;    [BUGGY]  if(a  <  0  ||  b  >  a  +  1)  {  [BUGGY]      ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a  +  1)  {	  if(a    <    0    ||    b    >    a)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
