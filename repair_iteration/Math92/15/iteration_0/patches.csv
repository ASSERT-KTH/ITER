bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(msg!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
2	[BUG]  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
3	[BUG]  [BUGGY]    if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(msg  ==  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
4	[BUG]  [BUGGY]    if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(msg  ==  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
5	[BUG]  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(msg!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
6	[BUG]  [BUGGY]  if(a  <  0  ||  b  >  a)  {  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]  if(a  <  0  ||  b  >  a)  {  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  0  ||  b  >  a)  {	if  (a  >  b)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]  if(a  <  b)  {  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]  if(a  <  b)  {  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  b)  {	if  (a  >  b)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
8	[BUG]  [BUGGY]  if(b  >  a)  {  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]  if(b  >  a)  {  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(b  >  a)  {	if  (a  >  b)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
9	[BUG]  [BUGGY]    long  b  =  getAndCheck(a,  msg);  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    long  b  =  getAndCheck(a,  msg);  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    long  b  =  getAndCheck(a,  msg);		non-compiled	[CE]  <identifier>  expected	30	None	add
10	[BUG]  [BUGGY]    long  a  =  getAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    long  a  =  getAndCheck(a,  b);  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    long  a  =  getAndCheck(a,  b);		non-compiled	[CE]  <identifier>  expected	30	None	add
11	[BUG]  [BUGGY]    long  a  =  getAndCheck(a,  b,  msg);  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    long  a  =  getAndCheck(a,  b,  msg);  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    long  a  =  getAndCheck(a,  b,  msg);		non-compiled	[CE]  <identifier>  expected	30	None	add
12	[BUG]  [BUGGY]    long  a  =  factorials.get(msg);  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    long  a  =  factorials.get(msg);  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    long  a  =  factorials.get(msg);		non-compiled	[CE]  <identifier>  expected	30	None	add
13	[BUG]  [BUGGY]    long  b  =  getAndCheck(a,  b);  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    long  b  =  getAndCheck(a,  b);  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    long  b  =  getAndCheck(a,  b);		non-compiled	[CE]  <identifier>  expected	30	None	add
14	[BUG]  [BUGGY]  if(a  <  =  b)  {  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]  if(a  <  =  b)  {  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  <  =  b)  {	if  (a  >  b)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
15	[BUG]  [BUGGY]  if(a  >=  b)  {  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]  if(a  >=  b)  {  [BUGGY]    ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	if(a  >=  b)  {	if  (a  >  b)  {  	non-compiled	[CE]  <identifier>  expected	29	None	replace
16	[BUG]  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]    junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
17	[BUG]  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
18	[BUG]  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(factorials!=  null)  {  for(int  b  =  0;  b  <  a;  b++)  {  if(b  >=  0)  {  ret  =  addAndCheck(b,  a,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
19	[BUG]  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  ret  =  addAndCheck(a,  b,  msg);  }		non-compiled	[CE]  <identifier>  expected	30	None	add
20	[BUG]  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [CE]  <identifier>  expected  [FE]            junit.framework.AssertionFailedError:  48  [CONTEXT]  private  static  long  addAndCheck(long  a,  long  b,  String  msg)  {  long  ret;  [BUGGY]    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }  [BUGGY]  if  (a  >  b)  {  ret  =  addAndCheck(b,  a,  msg);  }  else  {  if  (a  <  0)  {  if  (b  <  0)  {  if  (Long.MIN_VALUE  -  b  <=  a)  {  ret  =  a  +  b;  [CLASS]  MathUtils  [METHOD]  addAndCheck  [RETURN_TYPE]  long  long  a  long  b  String  msg  [VARIABLES]  boolean  long[]  factorials  double  EPSILON  SAFE_MIN  TWO_PI  byte  NB  PB  ZB  short  NS  PS  ZS  String  msg  long  a  b  ret  	projects/Math92/src/java/org/apache/commons/math/util/MathUtils.java	0.5	111	111	1	replace	    if(factorials!=  null)  {  for(int  b  =  0;  b  <  factorials.length;  b++)  {  if(b  <  0)  {  a  =  b  +  b;  }		non-compiled	[CE]  <identifier>  expected	30	None	add
