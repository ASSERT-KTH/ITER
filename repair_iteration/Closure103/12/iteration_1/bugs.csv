bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue());  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getValue());	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2	[BUG]  [BUGGY]  exceptionHandler.push(n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.push(n,  astPositionCounter);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  astPositionCounter);	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
3	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue());  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue());	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
4	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.addChildToFront(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n);	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	  	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
6	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
7	[BUG]  [BUGGY]    astPosition.put(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    astPosition.put(n,  astPositionCounter++);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    astPosition.put(n,  astPositionCounter++);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
8	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  astPositionCounter);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
9	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  parent);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
10	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
11	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
12	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  nodePriorities);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  nodePriorities);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
14	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.addToDeepest(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n);	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
15	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.addChildToBack(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n);	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
16	[BUG]  [BUGGY]  exceptionHandler.addToFront(n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.addToFront(n);  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n);	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
17	[BUG]  [BUGGY]  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]  exceptionHandler.pop();  [BUGGY]  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.pop();	exceptionHandler.push(n);  	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]    AstPosition  astPosition  =  cfg.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    AstPosition  astPosition  =  cfg.getEntry().getValue();  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    AstPosition  astPosition  =  cfg.getEntry().getValue();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
19	[BUG]  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;		non-compiled	[CE]  ';'  expected	24	None	add
20	[BUG]  [BUGGY]    AstPosition  astPosition  =  cfg.getAstPosition(n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    AstPosition  astPosition  =  cfg.getAstPosition(n);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    AstPosition  astPosition  =  cfg.getAstPosition(n);		non-compiled	[CE]  illegal  start  of  expression	24	None	add
21	[BUG]  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    cfg.getEntry().getValue())  {  exceptionHandler.push(n);  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    cfg.getEntry().getValue())  {  exceptionHandler.push(n);		non-compiled	[CE]  ';'  expected	24	None	add
22	[BUG]  [BUGGY]    Node  entry  =  n.getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:  [BUGGY]    Node  entry  =  n.getValue();  [BUGGY]  exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	    Node  entry  =  n.getValue();		non-compiled	[CE]  illegal  start  of  expression	24	None	add
