bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getKey();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getKey();	  n    ==    cfg.getEntry().getValue();    	non-compiled	[CE]  not  a  statement	109	None	replace
2	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue()  +  1;	  n    ==    cfg.getEntry().getValue();    	non-compiled	[CE]  not  a  statement	109	None	replace
3	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getName();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getName();	  n    ==    cfg.getEntry().getValue();    	non-compiled	[CE]  not  a  statement	109	None	replace
4	[BUG]  [BUGGY]  n!=  cfg.getEntry().getValue();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n!=  cfg.getEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n!=  cfg.getEntry().getValue();	  n    ==    cfg.getEntry().getValue();    	non-compiled	[CE]  not  a  statement	109	None	replace
5	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  astPositionCounter);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  cfg);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  nodePriorities);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  value);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  value);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
9	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  1);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  parent);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
14	[BUG]  [BUGGY]  AstPosition.put(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition.put(n,  astPositionCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition.put(n,  astPositionCounter++);	  astPosition.put(n,    parent++);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent++);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent++);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
16	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.astPositionCounter++);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
17	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter);	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
18	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getAstPosition();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getAstPosition();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getAstPosition();	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
19	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.get(parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.get(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.get(parent);	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
20	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.get(n,  parent);	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    value);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    value);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  value,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    value);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
24	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  astPositionCounter  +  1);	  exceptionHandler.addChildToBack(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  cfg.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  cfg.astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  cfg.astPositionCounter);	  exceptionHandler.addChildToBack(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  astPositionCounter++);	  exceptionHandler.addChildToBack(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	73	None	replace
28	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	73	None	replace
29	[BUG]  [BUGGY]  nodePriorities  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  nodePriorities  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	nodePriorities  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	73	None	replace
30	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter  +  1);	  AstPosition    astPosition    =    cfg.getAstPosition(astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter++);	  AstPosition    astPosition    =    cfg.getAstPosition(astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
35	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(cfg,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(cfg,  n,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(cfg,  n,  parent);	  exceptionHandler.addChildToBack(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(cfg,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(cfg,  parent);	  exceptionHandler.addChildToBack(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  root,  value);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  root,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  root,  value);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityComparator);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  	107	None	replace
48	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  parent);	  AstPosition    astPosition    =    cfg.getEntry().getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
49	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n,  astPositionCounter);	  AstPosition    astPosition    =    cfg.getEntry().getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
50	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getAstPosition(parent);	  AstPosition    astPosition    =    cfg.getEntry().getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
51	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getAstPosition(n  +  1);	  AstPosition    astPosition    =    cfg.getEntry().getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
52	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue().getAstPosition(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue().getAstPosition(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getValue().getAstPosition(n);	  AstPosition    astPosition    =    cfg.getEntry().getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
56	[BUG]  [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	113	None	replace
57	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	113	None	replace
58	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  	113	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  2);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  2);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  3);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  3);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  4);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  4);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  4);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  1);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
63	[BUG]  [BUGGY]  astPosition.put(n,  cfg.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  cfg.getEntry().getKey());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  cfg.getEntry().getKey());	  astPosition.put(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  astPosition.put(n,  cfg.getEntry().getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  cfg.getEntry().getValue()  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  cfg.getEntry().getValue()  +  1);	  astPosition.put(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
65	[BUG]  [BUGGY]  astPosition.put(n,  cfg.getEntry().getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  cfg.getEntry().getName());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  cfg.getEntry().getName());	  astPosition.put(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
75	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  parent,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  parent,  astPositionCounter);	  exceptionHandler.addChildToBack(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
76	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  parent,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  parent,  cfg);	  exceptionHandler.addChildToBack(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(cfg);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  parent.getAstPosition(cfg);	  AstPosition    astPosition    =    cfg.getAstPosition(parent);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
78	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(astPositionCounter,  parent);	  AstPosition    astPosition    =    cfg.getAstPosition(parent);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n,  parent);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  n,  parent);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  n);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  n);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  value);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  path,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  path,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  path,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
92	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	91	None	replace
93	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	91	None	replace
94	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  astPosition.push(n);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  astPosition.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext()))  {  astPosition.push(n);	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	91	None	replace
95	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getKey()  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getKey()  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getKey()  +  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
96	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue()  *  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue()  *  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getValue()  *  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
97	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getKey()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getKey()  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getKey()  -  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
98	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getValue()  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getValue()  -  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
101	[BUG]  [BUGGY]  Node  entry  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getLastChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getLastChild();	  Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
102	[BUG]  [BUGGY]  Node  entry  =  cfg.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getLastChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getLastChild();	  Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
103	[BUG]  [BUGGY]  Node  entry  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getFirstChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getFirstChild();	  Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
104	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry().getFirstChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry().getFirstChild();	  Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
105	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(cfg,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(cfg,  n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(cfg,  n);	  exceptionHandler.addToDeepest(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
106	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg,  parent);	  exceptionHandler.addToDeepest(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
107	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getAstPosition(astPositionCounter);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
108	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getAstPosition(parent);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
109	[BUG]  [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  parent.getAstPosition(n);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
110	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(astPosition);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getAstPosition(astPosition);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getAstPosition(astPosition);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
114	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getType());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getType());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getType());	  exceptionHandler.push(n,    parent.getValue());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
115	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getValue()  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getValue()  +  1);	  exceptionHandler.push(n,    parent.getValue());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
116	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  parent);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
117	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n,  astPositionCounter);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
118	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  n);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
119	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  n  +  1);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
120	[BUG]  [BUGGY]  exceptionHandler.push(n,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  priorityComparator);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  priorityComparator);	  exceptionHandler.push(n,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
121	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  astPositionCounter  +  1);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
122	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg.astPositionCounter);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
123	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  astPositionCounter++);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
124	[BUG]  [BUGGY]  astPosition.put(n,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  0);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  0);	  astPosition.put(n,    1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
125	[BUG]  [BUGGY]  astPosition.put(n,  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  2);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  2);	  astPosition.put(n,    1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
126	[BUG]  [BUGGY]  astPosition.put(n,  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  3);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  3);	  astPosition.put(n,    1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
129	[BUG]  [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  parent.getAstPosition();	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
130	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition();	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
131	[BUG]  [BUGGY]  AstPosition  astPosition  =  nodePriorities.getAstPosition();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  nodePriorities.getAstPosition();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  nodePriorities.getAstPosition();	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
132	[BUG]  [BUGGY]  AstPosition  astPosition  =  this.astPosition.getAstPosition();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  this.astPosition.getAstPosition();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  this.astPosition.getAstPosition();	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
133	[BUG]  [BUGGY]  astPosition.put(n,  cfg.getEntry().getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  cfg.getEntry().getValue()  -  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  cfg.getEntry().getValue()  -  1);	  astPosition.put(n,    astPositionCounter++    -    1);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
138	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  parent,  astPositionCounter);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
139	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  parent  +  1);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
140	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  nodePriorities);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
141	[BUG]  [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  parent.getAstPosition(n,  cfg);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  parent.getAstPosition(n,  cfg);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
148	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue(),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getEntry().getValue(),  parent);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
149	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  nodePriorities);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
150	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  parent,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  parent,  astPositionCounter);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
151	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	90	None	replace
152	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  astPosition.push(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  astPosition.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()))  {  astPosition.push(n);	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	90	None	replace
153	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	90	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  values);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  values);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities,  values);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
157	[BUG]  [BUGGY]  Node  entry  =  parent.getValue(),  cfg.getEntry().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getValue(),  cfg.getEntry().getNext();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getValue(),  cfg.getEntry().getNext();	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  	58	None	replace
158	[BUG]  [BUGGY]  Node  entry  =  parent.getValue(),  astPositionCounter++;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getValue(),  astPositionCounter++;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getValue(),  astPositionCounter++;	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  	58	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
161	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getEntry());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getEntry());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent.getEntry());	  exceptionHandler.addToDeepest(n,    cfg.getEntry());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
162	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  cfg.getEntry());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  cfg.getEntry());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  cfg.getEntry());	  exceptionHandler.addToDeepest(n,    cfg.getEntry());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  false);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  false);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  true);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  true);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  true);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  true);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  true);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  true);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  true);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  true);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
168	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  parent,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  parent,  astPositionCounter);	  exceptionHandler.addToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
169	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  parent,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  parent,  cfg);	  exceptionHandler.addToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
170	[BUG]  [BUGGY]  Node  entry  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getNext();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
171	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry().getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry().getNext();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry().getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
172	[BUG]  [BUGGY]  Node  entry  =  n.getEntry();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  n.getEntry();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  n.getEntry();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
173	[BUG]  [BUGGY]  exceptionHandler.push(n);  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n);  return  true;	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
174	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	if(shouldTraverseFunctions  &&  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
175	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	if(shouldTraverseFunctions  ||  n  ==  parent.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
176	[BUG]  [BUGGY]  n  =  cfg.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  =  cfg.getEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  =  cfg.getEntry().getValue();	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
177	[BUG]  [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	if(n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
178	[BUG]  [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	25	None	replace
179	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
180	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclaration())  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclaration())  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclaration())  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
181	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclared(n,  parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclared(n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionDeclared(n,  parent);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
182	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter++);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
183	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  astPositionCounter  +  1);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
184	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  1);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
185	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  astPositionCounter);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
186	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry().getKey();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry().getKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry().getKey();	  Node    entry    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
187	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry().getValue()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry().getValue()  +  1;	  Node    entry    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
188	[BUG]  [BUGGY]  Node  entry  =  n.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  n.getEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  n.getEntry().getValue();	  Node    entry    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
189	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getType()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	26	None	replace
190	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getType())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getType())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getType()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	26	None	replace
191	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg,  n,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg,  n,  parent);	  exceptionHandler.addChildToFront(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
192	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg,  parent);	  exceptionHandler.addChildToFront(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
193	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n  +  1,  parent);	  AstPosition    astPosition    =    cfg.getAstPosition(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
194	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  n  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  n  +  1);	  AstPosition    astPosition    =    cfg.getAstPosition(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
195	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  2);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  +  2);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n  +  2);	  AstPosition    astPosition    =    cfg.getAstPosition(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorities);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
197	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getName());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getName());	  exceptionHandler.push(n,    cfg.getEntry().getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
198	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getEntry().getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getEntry().getName());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getEntry().getName());	  exceptionHandler.push(n,    cfg.getEntry().getName());    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  this);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
203	[BUG]  [BUGGY]  Node  entry  =  parent.getKey();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  parent.getKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  parent.getKey();	  Node    entry    =    n.getKey();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
204	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  parent.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  parent.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  parent.getValue());	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
205	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  parent);	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
206	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue()  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.getEntry().getValue()  +  1);	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
207	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.getEntry().getKey());	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
208	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  parent.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  parent.getEntry().getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  parent.getEntry().getValue());	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
209	[BUG]  [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	70	None	replace
210	[BUG]  [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  false;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  false;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n))  {  exceptionHandler.push(n);  return  false;	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	70	None	replace
211	[BUG]  [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n,  parent))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  	70	None	replace
212	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getKey(),  parent);	  exceptionHandler.addChildToFront(cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
213	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getEntry().getKey());	  exceptionHandler.addChildToFront(cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
214	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  parent);	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
215	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent.getValue());	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
216	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg.getEntry().getKey());	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
217	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue()  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue()  +  1);	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
218	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent.getEntry().getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent.getEntry().getValue());	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
223	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  astPositionCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  astPositionCounter  +  1);	  exceptionHandler.addToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
224	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.astPositionCounter);	  exceptionHandler.addToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
225	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  astPositionCounter++);	  exceptionHandler.addToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
226	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  priorityCounter);	  exceptionHandler.addToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
227	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getEntry().getKey();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getEntry().getKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getEntry().getKey();	  AstPosition    astPosition    =    cfg.getEntry().getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
228	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getRawKey();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getRawKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getRawKey();	  AstPosition    astPosition    =    cfg.getEntry().getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
229	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getKey()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getKey()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getKey()  +  1;	  AstPosition    astPosition    =    cfg.getEntry().getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
231	[BUG]  [BUGGY]  cfg.getEntry().getValue().push(n,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().push(n,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().push(n,  parent);	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
232	[BUG]  [BUGGY]  cfg.getEntry().getValue().push(n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().push(n,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().push(n,  astPositionCounter);	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodeTraversal,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodeTraversal,  n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodeTraversal,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodeFunctions,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodeFunctions,  n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodeFunctions,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
236	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.astPositionCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.astPositionCounter  +  1);	  exceptionHandler.push(n,    cfg.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
241	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  false;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  false;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getType()))  {  exceptionHandler.push(n);  return  false;	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    false;    	non-compiled	[CE]  ';'  expected	79	None	replace
242	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  false;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  false;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()))  {  exceptionHandler.push(n);  return  false;	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    false;    	non-compiled	[CE]  ';'  expected	79	None	replace
243	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  false;	  cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    false;    	non-compiled	[CE]  not  a  statement	79	None	replace
244	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  astPositionCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  astPositionCounter  +  1);	  exceptionHandler.addToDeepest(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
245	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg.astPositionCounter);	  exceptionHandler.addToDeepest(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
246	[BUG]  [BUGGY]  astPositionCounter.addToDeepest(n,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPositionCounter.addToDeepest(n,  exceptionHandler);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPositionCounter.addToDeepest(n,  exceptionHandler);	  exceptionHandler.addToDeepest(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
247	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  astPositionCounter++);	  exceptionHandler.addToDeepest(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
250	[BUG]  [BUGGY]  exceptionHandler.put(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  astPositionCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  astPositionCounter++);	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
251	[BUG]  [BUGGY]  exceptionHandler.put(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  parent);	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
252	[BUG]  [BUGGY]  exceptionHandler.put(n,  cfg.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  cfg.getEntry().getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  cfg.getEntry().getValue());	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
253	[BUG]  [BUGGY]  astPosition.put(n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  astPositionCounter);	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
254	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue()  /  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue()  /  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue()  /  1);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
255	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue()  +  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue()  +  2);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue()  +  2);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
256	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getEntry().getValue()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getEntry().getValue()  +  1;	  AstPosition    astPosition    =    n.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
257	[BUG]  [BUGGY]  AstPosition  astPosition  =  parent.getEntry().getValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  parent.getEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  parent.getEntry().getValue();	  AstPosition    astPosition    =    n.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
258	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getKey());	  exceptionHandler.push(n,    cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
259	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getEntry().getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getEntry().getKey());	  exceptionHandler.push(n,    cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  parent,  node);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  n);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
262	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getKey();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getKey();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getCurrentEntry().getKey();	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
263	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getCurrentEntry().getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getCurrentEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getCurrentEntry().getValue();	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
264	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  +  1;	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
265	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().astPositionCounter();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().astPositionCounter();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getCurrentEntry().astPositionCounter();	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
266	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue()  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue()  +  2;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getValue()  +  2;	  AstPosition    astPosition    =    cfg.getEntry().getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
267	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue()  *  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getValue()  *  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getValue()  *  1;	  AstPosition    astPosition    =    cfg.getEntry().getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
268	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  parent,  astPositionCounter);	  exceptionHandler.addChildToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
269	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  parent,  cfg);	  exceptionHandler.addChildToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
270	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  parent,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  parent,  nodePriorities);	  exceptionHandler.addChildToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorities,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
273	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getFirstChild()))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	78	None	replace
274	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  	78	None	replace
275	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  false;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  false;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext()))  {  exceptionHandler.push(n);  return  false;	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	78	None	replace
276	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg);	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
277	[BUG]  [BUGGY]  exceptionHandler.push(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  nodePriorities);	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
278	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getFirstChild().getType()))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getType()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	71	None	replace
279	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getKey()))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getType()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	71	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parents,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parents);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  shouldTraverseFunctions,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
285	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().astPositionCounter()  +  1;	  AstPosition    astPosition    =    cfg.getEntry().astPositionCounter();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
286	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter++;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter++;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().astPositionCounter++;	  AstPosition    astPosition    =    cfg.getEntry().astPositionCounter();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
287	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getEntry().astPositionCounter();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getEntry().astPositionCounter();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getEntry().astPositionCounter();	  AstPosition    astPosition    =    cfg.getEntry().astPositionCounter();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
288	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  astPosition.push(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue())  {  astPosition.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue())  {  astPosition.push(n);	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	27	None	replace
289	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	27	None	replace
290	[BUG]  [BUGGY]  exceptionHandler.addToFront(cfg,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(cfg,  n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(cfg,  n);	  exceptionHandler.addToFront(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
291	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg,  parent);	  exceptionHandler.addToFront(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
292	[BUG]  [BUGGY]  exceptionHandler.addToFront(parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(parent,  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(parent,  cfg);	  exceptionHandler.addToFront(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
293	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue());	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
294	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry().getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry().getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry().getValue());	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
295	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getValue(),  cfg);	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
296	[BUG]  [BUGGY]  exceptionHandler.push(n,  astPositionCounter  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  astPositionCounter  +  2);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  astPositionCounter  +  2);	  exceptionHandler.push(n,    astPositionCounter    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
297	[BUG]  [BUGGY]  exceptionHandler.push(n,  astPositionCounter  +  1  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  astPositionCounter  +  1  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  astPositionCounter  +  1  -  1);	  exceptionHandler.push(n,    astPositionCounter    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
298	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  cfg,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  cfg,  parent);	  exceptionHandler.addChildToBack(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
299	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  cfg,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  cfg,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  cfg,  astPositionCounter);	  exceptionHandler.addChildToBack(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
300	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg,  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg,  parent);	  exceptionHandler.addChildToFront(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	72	None	replace
302	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString()  +  1))  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  	72	None	replace
303	[BUG]  [BUGGY]  astPosition.put(n,  nodePriorities++  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  nodePriorities++  -  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  nodePriorities++  -  1);	  astPosition.put(n,    nodePriorities++);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
304	[BUG]  [BUGGY]  astPosition.put(n,  priorityCounter++);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  priorityCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  priorityCounter++);	  astPosition.put(n,    nodePriorities++);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
305	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  priorityCounter);	  exceptionHandler.addChildToBack(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
307	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentPosition(parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentPosition(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getCurrentPosition(parent);	  AstPosition    astPosition    =    cfg.getAstPosition(parent);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodeHandler,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodeHandler,  n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodeHandler,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
309	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue())+  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getValue())+  1;  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getValue())+  1;	  exceptionHandler.push(n,    cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  not  a  statement	51	None	replace
310	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	78	None	replace
311	[BUG]  [BUGGY]  Node  entry  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  node.getLastChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  node.getLastChild();	  Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  astPositionCounter,  n);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
313	[BUG]  [BUGGY]  exceptionHandler.push(n,  priorityCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  priorityCounter  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  priorityCounter  +  1);	  exceptionHandler.push(n,    astPositionCounter    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
314	[BUG]  [BUGGY]  exceptionHandler.push(n,  nodePriorities  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  nodePriorities  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  nodePriorities  +  1);	  exceptionHandler.push(n,    astPositionCounter    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
317	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg,  nodePriorities);	  exceptionHandler.addChildToFront(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
318	[BUG]  [BUGGY]  exceptionHandler.put(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  nodePriorities);	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
319	[BUG]  [BUGGY]  exceptionHandler.put(n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  priorityCounter);	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
324	[BUG]  [BUGGY]  AstPosition  astPosition  =  getAstPosition(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  getAstPosition(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  getAstPosition(n);	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
325	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.get(n  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.get(n  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.get(n  +  1);	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
326	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter++);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.get(n,  astPositionCounter++);	  AstPosition    astPosition    =    astPosition.get(n);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
327	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition(parent);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
328	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(n  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(n  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition(n  +  1);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
329	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(n,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition(n,  parent);	  AstPosition    astPosition    =    astPosition.getAstPosition(n);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
331	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.pop();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.pop();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.pop();	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	27	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
334	[BUG]  [BUGGY]  exceptionHandler.push(n,  nodePriorities.getValue());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  nodePriorities.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  nodePriorities.getValue());	  exceptionHandler.push(n,    parent.getValue());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
335	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getValue());	  exceptionHandler.push(n,    parent.getValue());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  astPositionCounter,  n);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  root,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
339	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  priorityCounter);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
340	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  priorityComparator);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  priorityComparator);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
341	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	72	None	replace
342	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg,  astPositionCounter);	  exceptionHandler.addToDeepest(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
343	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getValue(),  cfg.getEntry());	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
344	[BUG]  [BUGGY]  cfg.getEntry().getValue().add(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().add(n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().add(n);	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
345	[BUG]  [BUGGY]  cfg.getEntry().getValue().push(n  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().push(n  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().push(n  +  1);	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorities,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorities,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorities,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  ControlFlowAnalysisGraph());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  ControlFlowAnalysisGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  ControlFlowAnalysisGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
350	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  priorityCounter);	  exceptionHandler.addToDeepest(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  1);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  1);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    1);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
355	[BUG]  [BUGGY]  AstPosition  astPosition  =  n.getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  n.getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  n.getValue();	  AstPosition    astPosition    =    n.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
356	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionPrototype())  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionPrototype())  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.isFunctionPrototype())  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
357	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty())  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty())  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty())  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
360	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getValue(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getValue(),  parent);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
361	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  root);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg.getEntry().getValue(),  root);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
363	[BUG]  [BUGGY]  cfg.getEntry().setValue(parent))  {  exceptionHandler.push(n);  return  true;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(parent))  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(parent))  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  ';'  expected	70	None	replace
364	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;  }	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	70	None	replace
365	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  return  true;	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	70	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  true);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  true);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  true);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
367	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getKey());	  exceptionHandler.addChildToFront(cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
368	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getKey());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg.getEntry().getKey());	  exceptionHandler.addChildToFront(cfg.getEntry().getKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
369	[BUG]  [BUGGY]  astPosition.put(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  nodePriorities);	  astPosition.put(n,    1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  root);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
371	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(parent,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(parent,  n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(parent,  n);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
372	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent-1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n,  parent-1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n,  parent-1);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
373	[BUG]  [BUGGY]  Node  entry  =  nodePriorities.getValue();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  nodePriorities.getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  nodePriorities.getValue();	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
374	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry();	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  node,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  node,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  node,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
377	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry(n.getFirstChild());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry(n.getFirstChild());	  Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
378	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext()  +  1))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	91	None	replace
379	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getNext())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getNext())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getNext())&&!shouldTraverseFunctions)  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getNext()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	91	None	replace
380	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(cfg,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(cfg,  n  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(cfg,  n  +  1);	  exceptionHandler.addChildToBack(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
385	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  nodePriorities);	  exceptionHandler.addChildToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
386	[BUG]  [BUGGY]  astPosition.put(n,  nCounter++);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  nCounter++);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  nCounter++);	  astPosition.put(n,    astPositionCounter++    -    1);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
389	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  nodePriorities);	  exceptionHandler.addToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
390	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  value);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  value);	  exceptionHandler.addToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
391	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent  -  cfg.getEntry());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent  -  cfg.getEntry());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent  -  cfg.getEntry());	  exceptionHandler.addToDeepest(n,    cfg.getEntry());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
392	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent?  cfg.getEntry()  :  null);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent?  cfg.getEntry()  :  null);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent?  cfg.getEntry()  :  null);	  exceptionHandler.addToDeepest(n,    cfg.getEntry());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
393	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  nodePriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  nodePriorities);	  exceptionHandler.addChildToBack(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
394	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  parent  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  parent  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  parent  -  1);	  exceptionHandler.addChildToBack(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
398	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  *  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(n  *  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(n  *  1);	  AstPosition    astPosition    =    cfg.getAstPosition(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
399	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getSingleNodeEntry().getValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getSingleNodeEntry().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getSingleNodeEntry().getValue();	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
402	[BUG]  [BUGGY]  cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n.getString(),  value))  {  exceptionHandler.push(n);	  cfg.getEntry().setValue(n.getString()))    {    exceptionHandler.push(n);    	non-compiled	[CE]  ';'  expected	90	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator,    value);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
404	[BUG]  [BUGGY]  exceptionHandler.push(n,  priorityCounter++);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  priorityCounter++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  priorityCounter++);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
405	[BUG]  [BUGGY]  exceptionHandler.push(n,  nodePriorities++);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  nodePriorities++);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  nodePriorities++);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
406	[BUG]  [BUGGY]  exceptionHandler.push(n,  astPositionCounter++  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  astPositionCounter++  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  astPositionCounter++  -  1);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
407	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  parent,  priorityCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  parent,  priorityCounter);	  exceptionHandler.addToDeepest(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
408	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().getAstPosition(0);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().getAstPosition(0);	  AstPosition    astPosition    =    cfg.getEntry().getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
409	[BUG]  [BUGGY]  exceptionHandler.push(n,  astPositionCounter  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  astPositionCounter  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  astPositionCounter  -  1);	  exceptionHandler.push(n,    astPositionCounter    +    1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
410	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getKey())  {  exceptionHandler.push(n);  return  true;  }	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	73	None	replace
411	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue());	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    	non-compiled	[CE]  not  a  statement	73	None	replace
412	[BUG]  [BUGGY]  astPosition.put(n,  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  astPosition.put(n,  astPositionCounter  +  1);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	astPosition.put(n,  astPositionCounter  +  1);	  astPosition.put(n,    1);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
413	[BUG]  [BUGGY]  AstPosition  n  =  cfg.getAstPosition(parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  n  =  cfg.getAstPosition(parent);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  n  =  cfg.getAstPosition(parent);	  AstPosition    astPosition    =    cfg.getAstPosition(parent);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
414	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue(),  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue(),  cfg);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getEntry().getValue(),  cfg);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
415	[BUG]  [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  }	  n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	27	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityCounter);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  int  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  	107	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  astPriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  astPriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  astPriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
421	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  *  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  *  2;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getCurrentEntry().getValue()  *  2;	  AstPosition    astPosition    =    cfg.getCurrentEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  priorityCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
424	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition(0);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition(0);	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
425	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition()  +  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition()  +  1;	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
426	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPosition.getAstPosition()  -  1;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPosition.getAstPosition()  -  1;	  AstPosition    astPosition    =    astPosition.getAstPosition();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
427	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue(),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue(),  parent);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg.getEntry().getValue(),  parent);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
428	[BUG]  [BUGGY]  Node  entry  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  n.removeFirstChild();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  n.removeFirstChild();	  Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  key,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  key,  exceptionHandler);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  key,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  astPriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  astPriorities);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  astPriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  root);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  root);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPosition,  root);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
432	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.getEntry().getValue(),  n);	  exceptionHandler.addToFront(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
433	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  astPositionCounter  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  astPositionCounter  -  1);	  exceptionHandler.addChildToFront(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
434	[BUG]  [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  n);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToDeepest(n,  cfg.getEntry().getValue(),  n);	  exceptionHandler.addToDeepest(n,    cfg.getEntry().getValue());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
435	[BUG]  [BUGGY]  cfg.getEntry().getValue().pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().pop();  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().pop();	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
436	[BUG]  [BUGGY]  cfg.getEntry().getValue().peek();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().getValue().peek();  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().getValue().peek();	  cfg.getEntry().getValue().push(n);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  true,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  true,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  true,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    true);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  entry);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
439	[BUG]  [BUGGY]  AstPosition  position  =  astPosition.get(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  position  =  astPosition.get(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  position  =  astPosition.get(n);	  astPosition.put(n,    parent++);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
440	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  astPositionCounter  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  astPositionCounter  -  1);	  exceptionHandler.addChildToBack(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
441	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	if(shouldTraverseFunctions  ||  n!=  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }	  if(shouldTraverseFunctions    ||    n    ==    cfg.getEntry().getValue())    {    exceptionHandler.push(n);    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
442	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getName()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getName()  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getName()  -  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
443	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getString()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  cfg.getEntry().getString()  -  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  cfg.getEntry().getString()  -  1);	  exceptionHandler.push(n,    cfg.getEntry().getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
444	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getAstPosition(parent,  astPositionCounter);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getAstPosition(parent,  astPositionCounter);	  AstPosition    astPosition    =    cfg.getAstPosition(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
445	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToBack(n,  root);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToBack(n,  root);	  exceptionHandler.addChildToBack(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
446	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n.getEntry().getValue()  +  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n.getEntry().getValue()  +  1);	  exceptionHandler.addChildToFront(cfg.getEntry().getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
447	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  cfg.getValue());	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
448	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  parent.getValue());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(n,  parent.getValue());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(n,  parent.getValue());	  exceptionHandler.addChildToFront(n.getValue());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
450	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.isEmpty();	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
451	[BUG]  [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.push(n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n)&&!exceptionHandler.push(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n)&&!exceptionHandler.push(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  not  a  statement	25	None	replace
452	[BUG]  [BUGGY]  cfg.getEntry().setValue(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  cfg.getEntry().setValue(n);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	cfg.getEntry().setValue(n);	  cfg.getEntry().setValue(n))    {    exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  null);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    null);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
455	[BUG]  [BUGGY]  exceptionHandler.push(n,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  1);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  1);	  exceptionHandler.push(n,    astPositionCounter++);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
456	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.push(n,  parent.getFirstChild());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.push(n,  parent.getFirstChild());	  exceptionHandler.push(n,    parent.getValue());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
460	[BUG]  [BUGGY]  Node  entry  =  n.getFirstChild().getValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  n.getFirstChild().getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  n.getFirstChild().getValue();	  Node    entry    =    cfg.getEntry().getValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
461	[BUG]  [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addToFront(n,  cfg.getEntry());  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addToFront(n,  cfg.getEntry());	  exceptionHandler.addToFront(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
462	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(cfg,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.addChildToFront(cfg,  n,  astPositionCounter);  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.addChildToFront(cfg,  n,  astPositionCounter);	  exceptionHandler.addChildToFront(cfg,    n);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
463	[BUG]  [BUGGY]  Node  entry  =  n,  parent.getValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  n,  parent.getValue();  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  n,  parent.getValue();	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  	58	None	replace
464	[BUG]  [BUGGY]  Node  entry  =  cfg.getEntry(n.getValue());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  Node  entry  =  cfg.getEntry(n.getValue());  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	Node  entry  =  cfg.getEntry(n.getValue());	  Node    entry    =    parent.getValue();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorities);	  NodeTraversal.traverse(compiler,    nodePriorities,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
466	[BUG]  [BUGGY]  exceptionHandler.put(n,  new  Integer(astPositionCounter));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  exceptionHandler.put(n,  new  Integer(astPositionCounter));  [BUGGY]      return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	exceptionHandler.put(n,  new  Integer(astPositionCounter));	  exceptionHandler.put(n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  exceptionHandler);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  nodePriorities);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    root);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
469	[BUG]  [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  cfg.getEntry().astPositionCounter(0);  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  cfg.getEntry().astPositionCounter(0);	  AstPosition    astPosition    =    cfg.getEntry().astPositionCounter();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
470	[BUG]  [BUGGY]  AstPosition  astPosition  =  astPositionCounter++;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      astPosition.put(n,  astPositionCounter++);  switch  (n.getType())  {  case  Token.FUNCTION:  if  (shouldTraverseFunctions  ||  n  ==  cfg.getEntry().getValue())  {  exceptionHandler.push(n);  return  true;  }  return  false;  case  Token.TRY:      [BUGGY]  AstPosition  astPosition  =  astPositionCounter++;  [BUGGY]      exceptionHandler.push(n);  return  true;  }          [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	AstPosition  astPosition  =  astPositionCounter++;	  astPosition.put(n,    astPositionCounter++    -    1);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
