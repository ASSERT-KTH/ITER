bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return computeFollowNode(fromNode, parent); [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. [BUGGY] return computeFollowNode(fromNode, parent); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. [BUGGY] [BUGGY] return computeFollowNode(fromNode, parent); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	
3	[BUG] [BUGGY] return computeFollowNode(fromNode, parent); [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [BUGGY] return computeFollowNode(fromNode, parent); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [BUGGY] [BUGGY] return computeFollowNode(fromNode, parent); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	
5	[BUG] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); [FE] AssertionFailedError [CONTEXT] case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(node.getNext()); [BUGGY] return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); }  } else if (parent.getLastChild() == node){ for (Node finallyNode : finallyMap.get(parent)) { createEdge(fromNode, Branch.UNCOND, finallyNode); } return computeFollowNode(fromNode, parent); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ [BUGGY] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(node.getNext()); return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); }  } else if (parent.getLastChild() == node){ for (Node finallyNode : finallyMap.get(parent)) { createEdge(fromNode, Branch.UNCOND, finallyNode); } return computeFollowNode(fromNode, parent); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3651483716701107	734	735	3	add	
7	[BUG] [BUGGY] handleCatch(n); [FE] AssertionFailedError [CONTEXT] case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); return; case Token.CATCH: [BUGGY] handleCatch(n); [BUGGY] return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: handleReturn(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	331	331	3	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); return; case Token.CATCH: [BUGGY] [BUGGY] handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: handleReturn(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	331	331	3	add	
9	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); return; case Token.CATCH: handleCatch(n); [BUGGY] return; [BUGGY] case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: handleReturn(n); return; case Token.WITH: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); return; case Token.CATCH: handleCatch(n); [BUGGY] [BUGGY] return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: handleReturn(n); return; case Token.WITH: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	
11	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, node.getLastChild()); [FE] AssertionFailedError [CONTEXT] private void handleCatch(Node node) { [BUGGY] createEdge(node, Branch.UNCOND, node.getLastChild()); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleCatch [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	545	545	3	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleCatch(Node node) { [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, node.getLastChild()); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleCatch [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	545	545	3	add	
13	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void handleCatch(Node node) { createEdge(node, Branch.UNCOND, node.getLastChild()); [BUGGY] } [BUGGY]  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleCatch [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	546	546	3	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleCatch(Node node) { createEdge(node, Branch.UNCOND, node.getLastChild()); [BUGGY] [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleCatch [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	546	546	3	add	
15	[BUG] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); [FE] AssertionFailedError [CONTEXT] return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(parent.getLastChild()); [BUGGY] return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  if (parent.getFirstChild() == node) { [BUGGY] [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.   return computeFallThrough(parent.getLastChild()); return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	add	
17	[BUG] [BUGGY] if (NodeUtil.hasFinally(curHandler)) { [FE] AssertionFailedError [CONTEXT] private void handleReturn(Node node) { Node lastJump = null; for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) { Node curHandler = iter.next(); if (NodeUtil.isFunction(curHandler)) { break; } [BUGGY] if (NodeUtil.hasFinally(curHandler)) { [BUGGY] if (lastJump == null) { createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } }  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleReturn(Node node) { Node lastJump = null; for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) { Node curHandler = iter.next(); if (NodeUtil.isFunction(curHandler)) { break; } [BUGGY] [BUGGY] if (NodeUtil.hasFinally(curHandler)) { if (lastJump == null) { createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } }  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	628	628	3	add	
19	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } if (NodeUtil.hasFinally(curHandler)) { if (lastJump == null) { createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } [BUGGY] } [BUGGY]  if (node.hasChildren()) { connectToPossibleExceptionHandler(node, node.getFirstChild()); } if (lastJump == null) { createEdge(node, Branch.UNCOND, null); } else { finallyMap.put(lastJump, null); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (NodeUtil.hasFinally(curHandler)) { if (lastJump == null) { createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } [BUGGY] [BUGGY] } if (node.hasChildren()) { connectToPossibleExceptionHandler(node, node.getFirstChild()); } if (lastJump == null) { createEdge(node, Branch.UNCOND, null); } else { finallyMap.put(lastJump, null); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	637	637	3	add	
21	[BUG] [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ [FE] AssertionFailedError [CONTEXT] return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); }  } else if (parent.getLastChild() == node){ for (Node finallyNode : finallyMap.get(parent)) { createEdge(fromNode, Branch.UNCOND, finallyNode); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return parent; case Token.TRY:  if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  [BUGGY] [BUGGY] } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent); }  } else if (parent.getLastChild() == node){ for (Node finallyNode : finallyMap.get(parent)) { createEdge(fromNode, Branch.UNCOND, finallyNode); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	add	
23	[BUG] [BUGGY] exceptionHandler.push(n); [FE] AssertionFailedError [CONTEXT] astPosition.put(n, astPositionCounter++); switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: [BUGGY] exceptionHandler.push(n); [BUGGY] return true; }         [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] astPosition.put(n, astPositionCounter++); switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: [BUGGY] [BUGGY] exceptionHandler.push(n); return true; }         [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	226	226	3	add	
25	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: exceptionHandler.push(n); [BUGGY] return true; [BUGGY] }          [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) { exceptionHandler.push(n); return true; } return false; case Token.TRY: exceptionHandler.push(n); [BUGGY] [BUGGY] return true; }          [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	227	227	3	add	
27	[BUG] [BUGGY] if (n == parent.getFirstChild().getNext()) { [FE] AssertionFailedError [CONTEXT] case Token.RETURN: case Token.THROW: return false; case Token.TRY:       [BUGGY] if (n == parent.getFirstChild().getNext()) { [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.RETURN: case Token.THROW: return false; case Token.TRY:       [BUGGY] [BUGGY] if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	add	
29	[BUG] [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); [FE] AssertionFailedError [CONTEXT] case Token.THROW: return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	282	282	3	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.THROW: return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { [BUGGY] [BUGGY] Preconditions.checkState(exceptionHandler.peek() == parent); exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	282	282	3	add	
31	[BUG] [BUGGY] exceptionHandler.pop(); [FE] AssertionFailedError [CONTEXT] return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] exceptionHandler.pop(); [BUGGY] } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return false; case Token.TRY:       if (n == parent.getFirstChild().getNext()) { Preconditions.checkState(exceptionHandler.peek() == parent); [BUGGY] [BUGGY] exceptionHandler.pop(); } } } return true; } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	add	
33	[BUG] [BUGGY] handleTry(n); [FE] AssertionFailedError [CONTEXT] case Token.FUNCTION: handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: [BUGGY] handleTry(n); [BUGGY] return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	328	328	3	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.FUNCTION: handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: [BUGGY] [BUGGY] handleTry(n); return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	328	328	3	add	
35	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); [BUGGY] return; [BUGGY] case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] handleFunction(n); return; case Token.EXPR_RESULT: handleExpr(n); return; case Token.THROW: handleThrow(n); return; case Token.TRY: handleTry(n); [BUGGY] [BUGGY] return; case Token.CATCH: handleCatch(n); return; case Token.BREAK: handleBreak(n); return; case Token.CONTINUE: handleContinue(n); return; case Token.RETURN: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal t ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	add	
37	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	541	541	3	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, node.getFirstChild()); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	541	541	3	add	
39	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] } [BUGGY]  [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	542	542	3	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTry(Node node) { createEdge(node, Branch.UNCOND, node.getFirstChild()); [BUGGY] [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleTry [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	542	542	3	add	
41	[BUG] [BUGGY] if (parent.getFirstChild() == node) { [FE] AssertionFailedError [CONTEXT] if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  [BUGGY] if (parent.getFirstChild() == node) { [BUGGY] if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	726	726	3	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY:  [BUGGY] [BUGGY] if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(parent.getLastChild()); } else { // and have no FINALLY. return computeFollowNode(fromNode, parent); }  } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { // and have FINALLY block. return computeFallThrough(node.getNext()); } else { [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] computeFollowNode [RETURN_TYPE] Node  Node fromNode Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs finallyNode forNode fromNode init item iter lastJump n next nextSibling node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	726	726	3	add	
43	[BUG] [BUGGY] nodePriorities.put(candidate, ++priorityCounter); [FE] AssertionFailedError [CONTEXT] } } }     for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) { if (!nodePriorities.containsKey(candidate)) { [BUGGY] nodePriorities.put(candidate, ++priorityCounter); [BUGGY] } }  nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap finallyMap AbstractCompiler compiler DiGraphNode candidate entry boolean shouldTraverseFunctions ControlFlowGraph cfg Node entry externs root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.26490647141300877	180	180	3	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } }     for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) { if (!nodePriorities.containsKey(candidate)) { [BUGGY] [BUGGY] nodePriorities.put(candidate, ++priorityCounter); } }  nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap finallyMap AbstractCompiler compiler DiGraphNode candidate entry boolean shouldTraverseFunctions ControlFlowGraph cfg Node entry externs root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.26490647141300877	180	180	3	add	
45	[BUG] [BUGGY] return n != parent.getFirstChild(); [FE] AssertionFailedError [CONTEXT] case Token.WHILE: case Token.WITH: return n != parent.getFirstChild(); case Token.DO: return n != parent.getFirstChild().getNext();  case Token.SWITCH: case Token.CASE: case Token.CATCH: case Token.LABEL: [BUGGY] return n != parent.getFirstChild(); [BUGGY] case Token.FUNCTION: return n == parent.getFirstChild().getNext().getNext(); case Token.CONTINUE: case Token.BREAK: case Token.EXPR_RESULT: case Token.VAR: case Token.RETURN: case Token.THROW: return false; case Token.TRY: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.24618298195866545	264	264	3	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.WHILE: case Token.WITH: return n != parent.getFirstChild(); case Token.DO: return n != parent.getFirstChild().getNext();  case Token.SWITCH: case Token.CASE: case Token.CATCH: case Token.LABEL: [BUGGY] [BUGGY] return n != parent.getFirstChild(); case Token.FUNCTION: return n == parent.getFirstChild().getNext().getNext(); case Token.CONTINUE: case Token.BREAK: case Token.EXPR_RESULT: case Token.VAR: case Token.RETURN: case Token.THROW: return false; case Token.TRY: [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal nodeTraversal Node n Node parent [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions NodeTraversal nodeTraversal ControlFlowGraph cfg Node entry externs n parent root value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.24618298195866545	264	264	3	add	
47	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] } else { createEdge(node, Branch.UNCOND, computeFollowNode(node)); }  if (parent != null) { switch (parent.getType()) { case Token.DEFAULT: case Token.CASE: case Token.TRY: [BUGGY] break; [BUGGY] default: if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) { Node next = node.getLastChild(); if (next != null) { createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next)); } } break; } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.23570226039551587	509	509	3	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { createEdge(node, Branch.UNCOND, computeFollowNode(node)); }  if (parent != null) { switch (parent.getType()) { case Token.DEFAULT: case Token.CASE: case Token.TRY: [BUGGY] [BUGGY] break; default: if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) { Node next = node.getLastChild(); if (next != null) { createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next)); } } break; } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.23570226039551587	509	509	3	add	
49	[BUG] [BUGGY] connectToPossibleExceptionHandler(node, node.getFirstChild()); [FE] AssertionFailedError [CONTEXT] createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } } if (node.hasChildren()) { [BUGGY] connectToPossibleExceptionHandler(node, node.getFirstChild()); [BUGGY] } if (lastJump == null) { createEdge(node, Branch.UNCOND, null); } else { finallyMap.put(lastJump, null); } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2182178902359924	640	640	3	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] createEdge(node, Branch.UNCOND, curHandler.getLastChild()); } else { finallyMap.put(lastJump, computeFallThrough(curHandler.getLastChild())); } lastJump = curHandler; } } if (node.hasChildren()) { [BUGGY] [BUGGY] connectToPossibleExceptionHandler(node, node.getFirstChild()); } if (lastJump == null) { createEdge(node, Branch.UNCOND, null); } else { finallyMap.put(lastJump, null); } } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleReturn [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond cur curHandler deflt elseBlock entry externs forNode init item iter lastJump n next node parent root thenBlock value Iterator iter Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2182178902359924	640	640	3	add	
51	[BUG] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node)); [FE] AssertionFailedError [CONTEXT] if (child != null) { createEdge(node, Branch.UNCOND, computeFallThrough(child)); } else { [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node)); [BUGGY] } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.21004201260420147	500	500	3	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (child != null) { createEdge(node, Branch.UNCOND, computeFallThrough(child)); } else { [BUGGY] [BUGGY] createEdge(node, Branch.UNCOND, computeFollowNode(node)); } [CLASS] ControlFlowAnalysis 1 AstControlFlowGraph 1 2 [METHOD] handleStmtList [RETURN_TYPE] void  Node node [VARIABLES] Multimap finallyMap AbstractCompiler compiler boolean shouldTraverseFunctions ControlFlowGraph cfg Node body child collection cond deflt elseBlock entry externs forNode init item iter n next node parent root thenBlock value Map astPosition nodePriorities priorities Deque exceptionHandler int astPositionCounter priorityCounter Comparator priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.21004201260420147	500	500	3	add	
